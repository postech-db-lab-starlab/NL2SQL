# Generated from g4/SelectSQLParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03cf")
        buf.write("\u0579\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\3\2\5\2\u00b3\n\2\3\2\3\2\3\3\3\3\3")
        buf.write("\3\3\3\6\3\u00bb\n\3\r\3\16\3\u00bc\3\3\3\3\5\3\u00c1")
        buf.write("\n\3\3\3\3\3\5\3\u00c5\n\3\5\3\u00c7\n\3\3\3\5\3\u00ca")
        buf.write("\n\3\3\3\5\3\u00cd\n\3\3\3\3\3\6\3\u00d1\n\3\r\3\16\3")
        buf.write("\u00d2\3\3\3\3\5\3\u00d7\n\3\3\3\5\3\u00da\n\3\3\3\5\3")
        buf.write("\u00dd\n\3\3\3\5\3\u00e0\n\3\5\3\u00e2\n\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\7\4\u00e9\n\4\f\4\16\4\u00ec\13\4\3\5\3\5\5\5")
        buf.write("\u00f0\n\5\3\6\3\6\3\6\7\6\u00f5\n\6\f\6\16\6\u00f8\13")
        buf.write("\6\3\7\3\7\7\7\u00fc\n\7\f\7\16\7\u00ff\13\7\3\7\3\7\3")
        buf.write("\7\7\7\u0104\n\7\f\7\16\7\u0107\13\7\3\7\3\7\5\7\u010b")
        buf.write("\n\7\3\b\3\b\5\b\u010f\n\b\3\b\5\b\u0112\n\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\5\b\u0119\n\b\3\b\5\b\u011c\n\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u0124\n\b\3\t\3\t\3\t\3\t\5\t\u012a\n")
        buf.write("\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\5\n\u0135\n\n\3")
        buf.write("\13\5\13\u0138\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\5\13\u0143\n\13\3\13\3\13\3\13\3\13\5\13\u0149")
        buf.write("\n\13\3\13\3\13\5\13\u014d\n\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\5\13\u0158\n\13\3\13\3\13\3\13")
        buf.write("\5\13\u015d\n\13\5\13\u015f\n\13\3\13\3\13\5\13\u0163")
        buf.write("\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u016d\n\f\3")
        buf.write("\r\3\r\7\r\u0171\n\r\f\r\16\r\u0174\13\r\3\r\3\r\5\r\u0178")
        buf.write("\n\r\3\r\5\r\u017b\n\r\3\r\5\r\u017e\n\r\3\16\3\16\5\16")
        buf.write("\u0182\n\16\3\16\3\16\3\17\3\17\5\17\u0188\n\17\3\17\3")
        buf.write("\17\5\17\u018c\n\17\3\20\3\20\3\21\3\21\5\21\u0192\n\21")
        buf.write("\3\21\3\21\7\21\u0196\n\21\f\21\16\21\u0199\13\21\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u01a1\n\22\3\22\5\22\u01a4")
        buf.write("\n\22\3\22\3\22\5\22\u01a8\n\22\3\22\5\22\u01ab\n\22\3")
        buf.write("\22\3\22\5\22\u01af\n\22\3\22\3\22\5\22\u01b3\n\22\3\22")
        buf.write("\5\22\u01b6\n\22\5\22\u01b8\n\22\3\23\3\23\3\23\3\23\5")
        buf.write("\23\u01be\n\23\3\23\3\23\3\23\3\23\3\23\7\23\u01c5\n\23")
        buf.write("\f\23\16\23\u01c8\13\23\3\23\3\23\5\23\u01cc\n\23\5\23")
        buf.write("\u01ce\n\23\3\23\3\23\5\23\u01d2\n\23\3\24\3\24\5\24\u01d6")
        buf.write("\n\24\3\25\3\25\3\25\3\25\5\25\u01dc\n\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\5\25\u01e3\n\25\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u01e9\n\26\3\27\3\27\3\30\3\30\3\30\5\30\u01f0\n\30\5")
        buf.write("\30\u01f2\n\30\3\31\3\31\3\31\3\31\3\31\5\31\u01f9\n\31")
        buf.write("\3\31\5\31\u01fc\n\31\3\32\3\32\3\33\3\33\3\34\3\34\3")
        buf.write("\34\3\34\5\34\u0206\n\34\3\35\3\35\5\35\u020a\n\35\3\36")
        buf.write("\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\6\37\u021c\n\37\r\37\16\37\u021d")
        buf.write("\3 \3 \3 \3 \3 \5 \u0225\n \5 \u0227\n \3!\3!\3!\6!\u022c")
        buf.write("\n!\r!\16!\u022d\5!\u0230\n!\3\"\3\"\5\"\u0234\n\"\3#")
        buf.write("\3#\3#\5#\u0239\n#\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0244")
        buf.write("\n$\3%\3%\3%\5%\u0249\n%\3&\3&\3\'\3\'\5\'\u024f\n\'\3")
        buf.write("(\5(\u0252\n(\3(\3(\5(\u0256\n(\3(\6(\u0259\n(\r(\16(")
        buf.write("\u025a\3(\5(\u025e\n(\3(\3(\5(\u0262\n(\3(\3(\5(\u0266")
        buf.write("\n(\5(\u0268\n(\3)\3)\3*\5*\u026d\n*\3*\3*\3+\5+\u0272")
        buf.write("\n+\3+\3+\3,\3,\3,\3,\3,\3,\3,\5,\u027d\n,\3,\5,\u0280")
        buf.write("\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u028f\n")
        buf.write("-\3.\3.\5.\u0293\n.\3.\5.\u0296\n.\3.\3.\3.\5.\u029b\n")
        buf.write(".\3.\3.\5.\u029f\n.\3.\3.\5.\u02a3\n.\3.\5.\u02a6\n.\3")
        buf.write(".\5.\u02a9\n.\3.\3.\5.\u02ad\n.\3.\5.\u02b0\n.\3.\5.\u02b3")
        buf.write("\n.\3.\3.\5.\u02b7\n.\3.\5.\u02ba\n.\3.\5.\u02bd\n.\3")
        buf.write(".\3.\3.\5.\u02c2\n.\3.\3.\3.\3.\3.\7.\u02c9\n.\f.\16.")
        buf.write("\u02cc\13.\3.\3.\5.\u02d0\n.\3.\3.\3.\5.\u02d5\n.\3.\3")
        buf.write(".\5.\u02d9\n.\3.\5.\u02dc\n.\3/\3/\5/\u02e0\n/\3/\3/\5")
        buf.write("/\u02e4\n/\3/\3/\3/\5/\u02e9\n/\3/\3/\3/\5/\u02ee\n/\3")
        buf.write("/\3/\5/\u02f2\n/\5/\u02f4\n/\3\60\3\60\3\60\3\60\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\5\62\u0304")
        buf.write("\n\62\3\62\3\62\3\63\3\63\3\63\7\63\u030b\n\63\f\63\16")
        buf.write("\63\u030e\13\63\3\64\3\64\3\64\7\64\u0313\n\64\f\64\16")
        buf.write("\64\u0316\13\64\3\65\3\65\3\65\3\65\7\65\u031c\n\65\f")
        buf.write("\65\16\65\u031f\13\65\3\65\3\65\3\66\3\66\3\66\7\66\u0326")
        buf.write("\n\66\f\66\16\66\u0329\13\66\3\67\3\67\3\67\7\67\u032e")
        buf.write("\n\67\f\67\16\67\u0331\13\67\38\38\38\78\u0336\n8\f8\16")
        buf.write("8\u0339\138\39\39\39\79\u033e\n9\f9\169\u0341\139\3:\3")
        buf.write(":\3:\7:\u0346\n:\f:\16:\u0349\13:\3;\3;\3;\3;\3;\3;\5")
        buf.write(";\u0351\n;\5;\u0353\n;\3<\3<\3<\5<\u0358\n<\3<\5<\u035b")
        buf.write("\n<\3<\3<\3<\5<\u0360\n<\3<\5<\u0363\n<\3=\3=\5=\u0367")
        buf.write("\n=\3>\3>\3>\3?\3?\3?\3?\3@\3@\3@\3@\3@\5@\u0375\n@\3")
        buf.write("@\3@\3@\3@\3@\5@\u037c\n@\3@\3@\3@\5@\u0381\n@\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\6A\u03a1\nA\rA\16A\u03a2")
        buf.write("\3A\3A\5A\u03a7\nA\3A\3A\3A\3A\6A\u03ad\nA\rA\16A\u03ae")
        buf.write("\3A\3A\5A\u03b3\nA\3A\3A\3A\3A\3A\3A\3A\5A\u03bc\nA\3")
        buf.write("A\3A\3A\3A\3A\3A\5A\u03c4\nA\3A\3A\3A\5A\u03c9\nA\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u03d1\nA\3A\3A\3A\5A\u03d6\nA\3A\3A\3")
        buf.write("A\5A\u03db\nA\5A\u03dd\nA\3A\3A\3A\3A\3A\3A\3A\5A\u03e6")
        buf.write("\nA\3A\3A\3A\5A\u03eb\nA\3A\3A\3A\3A\3A\3A\5A\u03f3\n")
        buf.write("A\3A\3A\3A\5A\u03f8\nA\3A\3A\3A\3A\3A\3A\5A\u0400\nA\3")
        buf.write("A\3A\3A\3A\3A\3A\5A\u0408\nA\3A\5A\u040b\nA\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u0415\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\5")
        buf.write("A\u0420\nA\3B\3B\3B\3B\3B\3C\3C\3C\3C\7C\u042b\nC\fC\16")
        buf.write("C\u042e\13C\3C\3C\3C\3C\3C\5C\u0435\nC\3D\3D\5D\u0439")
        buf.write("\nD\3E\3E\3E\5E\u043e\nE\3E\3E\3E\3E\3E\3E\3E\5E\u0447")
        buf.write("\nE\3E\5E\u044a\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0456")
        buf.write("\nE\3E\3E\3E\3E\3E\3E\5E\u045e\nE\3E\3E\3E\3E\3E\3E\7")
        buf.write("E\u0466\nE\fE\16E\u0469\13E\5E\u046b\nE\3E\3E\5E\u046f")
        buf.write("\nE\3E\3E\5E\u0473\nE\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u048c\nF\3G\3")
        buf.write("G\3G\3G\3G\3H\3H\3H\3H\5H\u0497\nH\3H\3H\3H\3H\3H\5H\u049e")
        buf.write("\nH\7H\u04a0\nH\fH\16H\u04a3\13H\3I\3I\3I\3I\5I\u04a9")
        buf.write("\nI\3J\3J\3J\3J\3J\3J\5J\u04b1\nJ\3J\3J\3J\5J\u04b6\n")
        buf.write("J\3J\3J\3J\3J\7J\u04bc\nJ\fJ\16J\u04bf\13J\3K\3K\3K\5")
        buf.write("K\u04c4\nK\3K\3K\3K\3K\3K\3K\3K\3K\5K\u04ce\nK\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u04db\nK\3K\3K\3K\3K\5K\u04e1")
        buf.write("\nK\3K\3K\3K\3K\5K\u04e7\nK\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\5K\u04f7\nK\3K\3K\3K\3K\5K\u04fd\nK\7")
        buf.write("K\u04ff\nK\fK\16K\u0502\13K\3L\3L\3L\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\7L\u0512\nL\fL\16L\u0515\13L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\6L\u051e\nL\rL\16L\u051f\3L\3L\3L\3L\3L")
        buf.write("\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0531\nL\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\7L\u053e\nL\fL\16L\u0541\13L\3")
        buf.write("M\3M\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5")
        buf.write("N\u0555\nN\3O\3O\3O\3O\3O\3O\3O\5O\u055e\nO\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\5P\u0567\nP\3Q\3Q\3R\3R\3S\3S\3T\3T\3U\3U\3")
        buf.write("V\3V\3W\3W\3X\3X\3X\2\5\u0092\u0094\u0096Y\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\2/\4\2\b\b,,\4\2\r\r))\5\2::CC\u00a1\u00a1")
        buf.write("\4\2EEOO\4\2  GG\4\2TT\u0080\u0080\4\2\u03ca\u03ca\u03cc")
        buf.write("\u03cc\3\2\u03cd\u03ce\3\2\u0261\u026b\4\2\u03b8\u03ba")
        buf.write("\u03c3\u03c3\4\2\67\67\u0099\u0099\4\2ee\u03c6\u03c6\4")
        buf.write("\2\u00bb\u00bc\u00c3\u00c6\3\2\u00ab\u00b0\3\2\u00b1\u00b3")
        buf.write("\3\2\u00b4\u00b5\5\2\u00b6\u00b6\u00bf\u00c2\u0106\u0107")
        buf.write("\5\2\u00b7\u00ba\u00bd\u00be\u0104\u0104\4\2\u0085\u0085")
        buf.write("\u00c7\u00c7\3\2\u0270\u0276\4\2\u00bd\u00bd\u019b\u019b")
        buf.write("\4\2\u00b6\u00b7\u00b9\u00b9\4\2\u009e\u009e\u01e5\u01e5")
        buf.write("\4\2\u00e5\u00e6\u00ec\u00ec\4\2!!\u00e3\u00e6\3\2\u00ef")
        buf.write("\u00f0\5\2\20\20RR\u0097\u0097\4\2\u00bb\u00bb\u00bd\u00bd")
        buf.write("\5\2\r\r))\u032a\u032a\5\2\u00d3\u00d3\u00d9\u00da\u00df")
        buf.write("\u00df\5\2\u00d4\u00d6\u00db\u00de\u00e0\u00e2\4\2\u01a4")
        buf.write("\u01a4\u01b2\u01b2\4\2cc\u03ad\u03ad\5\2\67\67\u0099\u0099")
        buf.write("\u0211\u0211\4\2ww\u0081\u0081\5\2\b\b\u00fb\u00fb\u01eb")
        buf.write("\u01eb\6\2cc\u03a5\u03a5\u03a7\u03a7\u03ad\u03ae\3\2\u03a2")
        buf.write("\u03a9\3\2\u0239\u0260\3\2\u026c\u026f\3\2\u0230\u0238")
        buf.write("\3\2\u0228\u022f\5\2\u00b6\u00ba\u00c4\u00c4\u00c7\u00c7")
        buf.write("!\2\u00f6\u0108\u010a\u010b\u010d\u0110\u0112\u0129\u012b")
        buf.write("\u0134\u0136\u0142\u0145\u0145\u0147\u014c\u014e\u014e")
        buf.write("\u0150\u0151\u0153\u0155\u0157\u0157\u0159\u0159\u015b")
        buf.write("\u0161\u0163\u0169\u016b\u018f\u0191\u0194\u0196\u019c")
        buf.write("\u019e\u01a7\u01a9\u01b3\u01b5\u01c5\u01c7\u01d4\u01d6")
        buf.write("\u01e7\u01e9\u01eb\u01ed\u0208\u020a\u020a\u020c\u020f")
        buf.write("\u0211\u0211\u0213\u0214\u0217\u0222\u0266\u0266\n\2T")
        buf.write("T\u0080\u0080\u00b6\u00b8\u00ba\u00ba\u00d7\u00d7\u00ee")
        buf.write("\u00ee\u0228\u022f\u0270\u0398\2\u065b\2\u00b0\3\2\2\2")
        buf.write("\4\u00e1\3\2\2\2\6\u00e3\3\2\2\2\b\u00ed\3\2\2\2\n\u00f1")
        buf.write("\3\2\2\2\f\u010a\3\2\2\2\16\u0123\3\2\2\2\20\u0125\3\2")
        buf.write("\2\2\22\u0134\3\2\2\2\24\u0162\3\2\2\2\26\u016c\3\2\2")
        buf.write("\2\30\u016e\3\2\2\2\32\u017f\3\2\2\2\34\u0185\3\2\2\2")
        buf.write("\36\u018d\3\2\2\2 \u0191\3\2\2\2\"\u01b7\3\2\2\2$\u01b9")
        buf.write("\3\2\2\2&\u01d3\3\2\2\2(\u01d7\3\2\2\2*\u01e4\3\2\2\2")
        buf.write(",\u01ea\3\2\2\2.\u01ec\3\2\2\2\60\u01f3\3\2\2\2\62\u01fd")
        buf.write("\3\2\2\2\64\u01ff\3\2\2\2\66\u0205\3\2\2\28\u0209\3\2")
        buf.write("\2\2:\u020b\3\2\2\2<\u020d\3\2\2\2>\u021f\3\2\2\2@\u022f")
        buf.write("\3\2\2\2B\u0233\3\2\2\2D\u0238\3\2\2\2F\u0243\3\2\2\2")
        buf.write("H\u0248\3\2\2\2J\u024a\3\2\2\2L\u024e\3\2\2\2N\u0267\3")
        buf.write("\2\2\2P\u0269\3\2\2\2R\u026c\3\2\2\2T\u0271\3\2\2\2V\u027f")
        buf.write("\3\2\2\2X\u028e\3\2\2\2Z\u02db\3\2\2\2\\\u02f3\3\2\2\2")
        buf.write("^\u02f5\3\2\2\2`\u02f9\3\2\2\2b\u02ff\3\2\2\2d\u0307\3")
        buf.write("\2\2\2f\u030f\3\2\2\2h\u0317\3\2\2\2j\u0322\3\2\2\2l\u032a")
        buf.write("\3\2\2\2n\u0332\3\2\2\2p\u033a\3\2\2\2r\u0342\3\2\2\2")
        buf.write("t\u0352\3\2\2\2v\u0362\3\2\2\2x\u0366\3\2\2\2z\u0368\3")
        buf.write("\2\2\2|\u036b\3\2\2\2~\u0380\3\2\2\2\u0080\u041f\3\2\2")
        buf.write("\2\u0082\u0421\3\2\2\2\u0084\u0434\3\2\2\2\u0086\u0436")
        buf.write("\3\2\2\2\u0088\u0472\3\2\2\2\u008a\u048b\3\2\2\2\u008c")
        buf.write("\u048d\3\2\2\2\u008e\u0496\3\2\2\2\u0090\u04a8\3\2\2\2")
        buf.write("\u0092\u04b5\3\2\2\2\u0094\u04c0\3\2\2\2\u0096\u0530\3")
        buf.write("\2\2\2\u0098\u0542\3\2\2\2\u009a\u0554\3\2\2\2\u009c\u055d")
        buf.write("\3\2\2\2\u009e\u0566\3\2\2\2\u00a0\u0568\3\2\2\2\u00a2")
        buf.write("\u056a\3\2\2\2\u00a4\u056c\3\2\2\2\u00a6\u056e\3\2\2\2")
        buf.write("\u00a8\u0570\3\2\2\2\u00aa\u0572\3\2\2\2\u00ac\u0574\3")
        buf.write("\2\2\2\u00ae\u0576\3\2\2\2\u00b0\u00b2\5\4\3\2\u00b1\u00b3")
        buf.write("\7\u03b6\2\2\u00b2\u00b1\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3")
        buf.write("\u00b4\3\2\2\2\u00b4\u00b5\7\2\2\3\u00b5\3\3\2\2\2\u00b6")
        buf.write("\u00e2\5\30\r\2\u00b7\u00e2\5\26\f\2\u00b8\u00ba\5\30")
        buf.write("\r\2\u00b9\u00bb\5\34\17\2\u00ba\u00b9\3\2\2\2\u00bb\u00bc")
        buf.write("\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd")
        buf.write("\u00c6\3\2\2\2\u00be\u00c0\7\u009b\2\2\u00bf\u00c1\t\2")
        buf.write("\2\2\u00c0\u00bf\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c4")
        buf.write("\3\2\2\2\u00c2\u00c5\5\30\r\2\u00c3\u00c5\5\26\f\2\u00c4")
        buf.write("\u00c2\3\2\2\2\u00c4\u00c3\3\2\2\2\u00c5\u00c7\3\2\2\2")
        buf.write("\u00c6\u00be\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c9\3")
        buf.write("\2\2\2\u00c8\u00ca\5\6\4\2\u00c9\u00c8\3\2\2\2\u00c9\u00ca")
        buf.write("\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00cd\5(\25\2\u00cc")
        buf.write("\u00cb\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00e2\3\2\2\2")
        buf.write("\u00ce\u00d0\5\26\f\2\u00cf\u00d1\5\32\16\2\u00d0\u00cf")
        buf.write("\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d9\3\2\2\2\u00d4\u00d6\7\u009b")
        buf.write("\2\2\u00d5\u00d7\t\2\2\2\u00d6\u00d5\3\2\2\2\u00d6\u00d7")
        buf.write("\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00da\5\26\f\2\u00d9")
        buf.write("\u00d4\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00dc\3\2\2\2")
        buf.write("\u00db\u00dd\5\6\4\2\u00dc\u00db\3\2\2\2\u00dc\u00dd\3")
        buf.write("\2\2\2\u00dd\u00df\3\2\2\2\u00de\u00e0\5(\25\2\u00df\u00de")
        buf.write("\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e2\3\2\2\2\u00e1")
        buf.write("\u00b6\3\2\2\2\u00e1\u00b7\3\2\2\2\u00e1\u00b8\3\2\2\2")
        buf.write("\u00e1\u00ce\3\2\2\2\u00e2\5\3\2\2\2\u00e3\u00e4\7k\2")
        buf.write("\2\u00e4\u00e5\7\21\2\2\u00e5\u00ea\5\b\5\2\u00e6\u00e7")
        buf.write("\7\u03b5\2\2\u00e7\u00e9\5\b\5\2\u00e8\u00e6\3\2\2\2\u00e9")
        buf.write("\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2")
        buf.write("\u00eb\7\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed\u00ef\5\u0092")
        buf.write("J\2\u00ee\u00f0\t\3\2\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0")
        buf.write("\3\2\2\2\u00f0\t\3\2\2\2\u00f1\u00f6\5\f\7\2\u00f2\u00f3")
        buf.write("\7\u03b5\2\2\u00f3\u00f5\5\f\7\2\u00f4\u00f2\3\2\2\2\u00f5")
        buf.write("\u00f8\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2")
        buf.write("\u00f7\13\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\u00fd\5\16")
        buf.write("\b\2\u00fa\u00fc\5\24\13\2\u00fb\u00fa\3\2\2\2\u00fc\u00ff")
        buf.write("\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe")
        buf.write("\u010b\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100\u0101\7\u03b3")
        buf.write("\2\2\u0101\u0105\5\16\b\2\u0102\u0104\5\24\13\2\u0103")
        buf.write("\u0102\3\2\2\2\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2\2")
        buf.write("\u0105\u0106\3\2\2\2\u0106\u0108\3\2\2\2\u0107\u0105\3")
        buf.write("\2\2\2\u0108\u0109\7\u03b4\2\2\u0109\u010b\3\2\2\2\u010a")
        buf.write("\u00f9\3\2\2\2\u010a\u0100\3\2\2\2\u010b\r\3\2\2\2\u010c")
        buf.write("\u0111\5,\27\2\u010d\u010f\7\f\2\2\u010e\u010d\3\2\2\2")
        buf.write("\u010e\u010f\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0112\5")
        buf.write("D#\2\u0111\u010e\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0124")
        buf.write("\3\2\2\2\u0113\u0119\5\4\3\2\u0114\u0115\7\u03b3\2\2\u0115")
        buf.write("\u0116\5\4\3\2\u0116\u0117\7\u03b4\2\2\u0117\u0119\3\2")
        buf.write("\2\2\u0118\u0113\3\2\2\2\u0118\u0114\3\2\2\2\u0119\u011b")
        buf.write("\3\2\2\2\u011a\u011c\7\f\2\2\u011b\u011a\3\2\2\2\u011b")
        buf.write("\u011c\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e\5D#\2\u011e")
        buf.write("\u0124\3\2\2\2\u011f\u0120\7\u03b3\2\2\u0120\u0121\5\n")
        buf.write("\6\2\u0121\u0122\7\u03b4\2\2\u0122\u0124\3\2\2\2\u0123")
        buf.write("\u010c\3\2\2\2\u0123\u0118\3\2\2\2\u0123\u011f\3\2\2\2")
        buf.write("\u0124\17\3\2\2\2\u0125\u0126\t\4\2\2\u0126\u0129\t\5")
        buf.write("\2\2\u0127\u0128\79\2\2\u0128\u012a\5\22\n\2\u0129\u0127")
        buf.write("\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\u012c\7\u03b3\2\2\u012c\u012d\5d\63\2\u012d\u012e\7\u03b4")
        buf.write("\2\2\u012e\21\3\2\2\2\u012f\u0135\7N\2\2\u0130\u0131\7")
        buf.write("k\2\2\u0131\u0135\7\21\2\2\u0132\u0133\7?\2\2\u0133\u0135")
        buf.write("\7\21\2\2\u0134\u012f\3\2\2\2\u0134\u0130\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0135\23\3\2\2\2\u0136\u0138\t\6\2\2\u0137")
        buf.write("\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\3\2\2\2")
        buf.write("\u0139\u013a\7N\2\2\u013a\u0142\5\16\b\2\u013b\u013c\7")
        buf.write("f\2\2\u013c\u0143\5\u0092J\2\u013d\u013e\7\u00a2\2\2\u013e")
        buf.write("\u013f\7\u03b3\2\2\u013f\u0140\5d\63\2\u0140\u0141\7\u03b4")
        buf.write("\2\2\u0141\u0143\3\2\2\2\u0142\u013b\3\2\2\2\u0142\u013d")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0163\3\2\2\2\u0144")
        buf.write("\u0145\7\u0092\2\2\u0145\u0148\5\16\b\2\u0146\u0147\7")
        buf.write("f\2\2\u0147\u0149\5\u0092J\2\u0148\u0146\3\2\2\2\u0148")
        buf.write("\u0149\3\2\2\2\u0149\u0163\3\2\2\2\u014a\u014c\t\7\2\2")
        buf.write("\u014b\u014d\7m\2\2\u014c\u014b\3\2\2\2\u014c\u014d\3")
        buf.write("\2\2\2\u014d\u014e\3\2\2\2\u014e\u014f\7N\2\2\u014f\u0157")
        buf.write("\5\16\b\2\u0150\u0151\7f\2\2\u0151\u0158\5\u0092J\2\u0152")
        buf.write("\u0153\7\u00a2\2\2\u0153\u0154\7\u03b3\2\2\u0154\u0155")
        buf.write("\5d\63\2\u0155\u0156\7\u03b4\2\2\u0156\u0158\3\2\2\2\u0157")
        buf.write("\u0150\3\2\2\2\u0157\u0152\3\2\2\2\u0158\u0163\3\2\2\2")
        buf.write("\u0159\u015e\7b\2\2\u015a\u015c\t\7\2\2\u015b\u015d\7")
        buf.write("m\2\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015f")
        buf.write("\3\2\2\2\u015e\u015a\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u0161\7N\2\2\u0161\u0163\5\16\b\2")
        buf.write("\u0162\u0137\3\2\2\2\u0162\u0144\3\2\2\2\u0162\u014a\3")
        buf.write("\2\2\2\u0162\u0159\3\2\2\2\u0163\25\3\2\2\2\u0164\u0165")
        buf.write("\7\u03b3\2\2\u0165\u0166\5\30\r\2\u0166\u0167\7\u03b4")
        buf.write("\2\2\u0167\u016d\3\2\2\2\u0168\u0169\7\u03b3\2\2\u0169")
        buf.write("\u016a\5\26\f\2\u016a\u016b\7\u03b4\2\2\u016b\u016d\3")
        buf.write("\2\2\2\u016c\u0164\3\2\2\2\u016c\u0168\3\2\2\2\u016d\27")
        buf.write("\3\2\2\2\u016e\u0172\7\u0084\2\2\u016f\u0171\5\36\20\2")
        buf.write("\u0170\u016f\3\2\2\2\u0171\u0174\3\2\2\2\u0172\u0170\3")
        buf.write("\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175\3\2\2\2\u0174\u0172")
        buf.write("\3\2\2\2\u0175\u0177\5 \21\2\u0176\u0178\5$\23\2\u0177")
        buf.write("\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3\2\2\2")
        buf.write("\u0179\u017b\5\6\4\2\u017a\u0179\3\2\2\2\u017a\u017b\3")
        buf.write("\2\2\2\u017b\u017d\3\2\2\2\u017c\u017e\5(\25\2\u017d\u017c")
        buf.write("\3\2\2\2\u017d\u017e\3\2\2\2\u017e\31\3\2\2\2\u017f\u0181")
        buf.write("\7\u009b\2\2\u0180\u0182\t\2\2\2\u0181\u0180\3\2\2\2\u0181")
        buf.write("\u0182\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0184\5\26\f")
        buf.write("\2\u0184\33\3\2\2\2\u0185\u0187\7\u009b\2\2\u0186\u0188")
        buf.write("\t\2\2\2\u0187\u0186\3\2\2\2\u0187\u0188\3\2\2\2\u0188")
        buf.write("\u018b\3\2\2\2\u0189\u018c\5\30\r\2\u018a\u018c\5\26\f")
        buf.write("\2\u018b\u0189\3\2\2\2\u018b\u018a\3\2\2\2\u018c\35\3")
        buf.write("\2\2\2\u018d\u018e\t\2\2\2\u018e\37\3\2\2\2\u018f\u0192")
        buf.write("\7\u03a2\2\2\u0190\u0192\5\"\22\2\u0191\u018f\3\2\2\2")
        buf.write("\u0191\u0190\3\2\2\2\u0192\u0197\3\2\2\2\u0193\u0194\7")
        buf.write("\u03b5\2\2\u0194\u0196\5\"\22\2\u0195\u0193\3\2\2\2\u0196")
        buf.write("\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198\3\2\2\2")
        buf.write("\u0198!\3\2\2\2\u0199\u0197\3\2\2\2\u019a\u019b\5*\26")
        buf.write("\2\u019b\u019c\7\u03b2\2\2\u019c\u019d\7\u03a2\2\2\u019d")
        buf.write("\u01b8\3\2\2\2\u019e\u01a3\5.\30\2\u019f\u01a1\7\f\2\2")
        buf.write("\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a2\3")
        buf.write("\2\2\2\u01a2\u01a4\5D#\2\u01a3\u01a0\3\2\2\2\u01a3\u01a4")
        buf.write("\3\2\2\2\u01a4\u01b8\3\2\2\2\u01a5\u01aa\5~@\2\u01a6\u01a8")
        buf.write("\7\f\2\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9\u01ab\5D#\2\u01aa\u01a7\3\2\2\2\u01aa")
        buf.write("\u01ab\3\2\2\2\u01ab\u01b8\3\2\2\2\u01ac\u01ad\7\u03cd")
        buf.write("\2\2\u01ad\u01af\7\u0399\2\2\u01ae\u01ac\3\2\2\2\u01ae")
        buf.write("\u01af\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b5\5\u0092")
        buf.write("J\2\u01b1\u01b3\7\f\2\2\u01b2\u01b1\3\2\2\2\u01b2\u01b3")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b6\5D#\2\u01b5\u01b2")
        buf.write("\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b8\3\2\2\2\u01b7")
        buf.write("\u019a\3\2\2\2\u01b7\u019e\3\2\2\2\u01b7\u01a5\3\2\2\2")
        buf.write("\u01b7\u01ae\3\2\2\2\u01b8#\3\2\2\2\u01b9\u01ba\7<\2\2")
        buf.write("\u01ba\u01bd\5\n\6\2\u01bb\u01bc\7\u00a5\2\2\u01bc\u01be")
        buf.write("\5\u0092J\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write("\u01cd\3\2\2\2\u01bf\u01c0\7?\2\2\u01c0\u01c1\7\21\2\2")
        buf.write("\u01c1\u01c6\5&\24\2\u01c2\u01c3\7\u03b5\2\2\u01c3\u01c5")
        buf.write("\5&\24\2\u01c4\u01c2\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6")
        buf.write("\u01c4\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01cb\3\2\2\2")
        buf.write("\u01c8\u01c6\3\2\2\2\u01c9\u01ca\7\u00a7\2\2\u01ca\u01cc")
        buf.write("\7\u01d9\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc")
        buf.write("\u01ce\3\2\2\2\u01cd\u01bf\3\2\2\2\u01cd\u01ce\3\2\2\2")
        buf.write("\u01ce\u01d1\3\2\2\2\u01cf\u01d0\7@\2\2\u01d0\u01d2\5")
        buf.write("\u0092J\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2")
        buf.write("%\3\2\2\2\u01d3\u01d5\5\u0092J\2\u01d4\u01d6\t\3\2\2\u01d5")
        buf.write("\u01d4\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\'\3\2\2\2\u01d7")
        buf.write("\u01e2\7V\2\2\u01d8\u01d9\5J&\2\u01d9\u01da\7\u03b5\2")
        buf.write("\2\u01da\u01dc\3\2\2\2\u01db\u01d8\3\2\2\2\u01db\u01dc")
        buf.write("\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01e3\5J&\2\u01de\u01df")
        buf.write("\5J&\2\u01df\u01e0\7\u01a2\2\2\u01e0\u01e1\5J&\2\u01e1")
        buf.write("\u01e3\3\2\2\2\u01e2\u01db\3\2\2\2\u01e2\u01de\3\2\2\2")
        buf.write("\u01e3)\3\2\2\2\u01e4\u01e8\5D#\2\u01e5\u01e9\7\u03c9")
        buf.write("\2\2\u01e6\u01e7\7\u03b2\2\2\u01e7\u01e9\5D#\2\u01e8\u01e5")
        buf.write("\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9")
        buf.write("+\3\2\2\2\u01ea\u01eb\5*\26\2\u01eb-\3\2\2\2\u01ec\u01f1")
        buf.write("\5D#\2\u01ed\u01ef\5H%\2\u01ee\u01f0\5H%\2\u01ef\u01ee")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f2\3\2\2\2\u01f1")
        buf.write("\u01ed\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2/\3\2\2\2\u01f3")
        buf.write("\u01f8\5D#\2\u01f4\u01f5\7\u03b3\2\2\u01f5\u01f6\5J&\2")
        buf.write("\u01f6\u01f7\7\u03b4\2\2\u01f7\u01f9\3\2\2\2\u01f8\u01f4")
        buf.write("\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fb\3\2\2\2\u01fa")
        buf.write("\u01fc\t\3\2\2\u01fb\u01fa\3\2\2\2\u01fb\u01fc\3\2\2\2")
        buf.write("\u01fc\61\3\2\2\2\u01fd\u01fe\t\b\2\2\u01fe\63\3\2\2\2")
        buf.write("\u01ff\u0200\t\t\2\2\u0200\65\3\2\2\2\u0201\u0206\7\u00bd")
        buf.write("\2\2\u0202\u0206\5\u00a2R\2\u0203\u0206\7\u03c2\2\2\u0204")
        buf.write("\u0206\7\u03bf\2\2\u0205\u0201\3\2\2\2\u0205\u0202\3\2")
        buf.write("\2\2\u0205\u0203\3\2\2\2\u0205\u0204\3\2\2\2\u0206\67")
        buf.write("\3\2\2\2\u0207\u020a\5D#\2\u0208\u020a\7\u03c2\2\2\u0209")
        buf.write("\u0207\3\2\2\2\u0209\u0208\3\2\2\2\u020a9\3\2\2\2\u020b")
        buf.write("\u020c\t\n\2\2\u020c;\3\2\2\2\u020d\u020e\5J&\2\u020e")
        buf.write("\u020f\7\u03a7\2\2\u020f\u0210\5J&\2\u0210\u0211\7\u03a7")
        buf.write("\2\2\u0211\u0212\5J&\2\u0212\u0213\7\u03a7\2\2\u0213\u0214")
        buf.write("\5J&\2\u0214\u0215\7\u03a7\2\2\u0215\u021b\5J&\2\u0216")
        buf.write("\u0217\7\u03be\2\2\u0217\u0218\5J&\2\u0218\u0219\7\u03a7")
        buf.write("\2\2\u0219\u021a\5J&\2\u021a\u021c\3\2\2\2\u021b\u0216")
        buf.write("\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021b\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e=\3\2\2\2\u021f\u0226\5@!\2\u0220")
        buf.write("\u0221\7\u03b5\2\2\u0221\u0224\5@!\2\u0222\u0223\7\u03b5")
        buf.write("\2\2\u0223\u0225\5J&\2\u0224\u0222\3\2\2\2\u0224\u0225")
        buf.write("\3\2\2\2\u0225\u0227\3\2\2\2\u0226\u0220\3\2\2\2\u0226")
        buf.write("\u0227\3\2\2\2\u0227?\3\2\2\2\u0228\u0230\7\u03c2\2\2")
        buf.write("\u0229\u0230\7\u03c7\2\2\u022a\u022c\7\u03c4\2\2\u022b")
        buf.write("\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022b\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2\u022f\u0228\3")
        buf.write("\2\2\2\u022f\u0229\3\2\2\2\u022f\u022b\3\2\2\2\u0230A")
        buf.write("\3\2\2\2\u0231\u0234\5D#\2\u0232\u0234\7\u03c2\2\2\u0233")
        buf.write("\u0231\3\2\2\2\u0233\u0232\3\2\2\2\u0234C\3\2\2\2\u0235")
        buf.write("\u0239\5F$\2\u0236\u0239\7\u03cb\2\2\u0237\u0239\7\u03bf")
        buf.write("\2\2\u0238\u0235\3\2\2\2\u0238\u0236\3\2\2\2\u0238\u0237")
        buf.write("\3\2\2\2\u0239E\3\2\2\2\u023a\u0244\7\u03ca\2\2\u023b")
        buf.write("\u0244\5\u00a2R\2\u023c\u0244\5\u00a4S\2\u023d\u0244\5")
        buf.write(":\36\2\u023e\u0244\5\u00a6T\2\u023f\u0244\5\u00a8U\2\u0240")
        buf.write("\u0244\5\u00aaV\2\u0241\u0244\5\u00acW\2\u0242\u0244\5")
        buf.write("\u00aeX\2\u0243\u023a\3\2\2\2\u0243\u023b\3\2\2\2\u0243")
        buf.write("\u023c\3\2\2\2\u0243\u023d\3\2\2\2\u0243\u023e\3\2\2\2")
        buf.write("\u0243\u023f\3\2\2\2\u0243\u0240\3\2\2\2\u0243\u0241\3")
        buf.write("\2\2\2\u0243\u0242\3\2\2\2\u0244G\3\2\2\2\u0245\u0249")
        buf.write("\7\u03c9\2\2\u0246\u0247\7\u03b2\2\2\u0247\u0249\5D#\2")
        buf.write("\u0248\u0245\3\2\2\2\u0248\u0246\3\2\2\2\u0249I\3\2\2")
        buf.write("\2\u024a\u024b\t\13\2\2\u024bK\3\2\2\2\u024c\u024f\7\u03c0")
        buf.write("\2\2\u024d\u024f\5J&\2\u024e\u024c\3\2\2\2\u024e\u024d")
        buf.write("\3\2\2\2\u024fM\3\2\2\2\u0250\u0252\7\u03c8\2\2\u0251")
        buf.write("\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0253\3\2\2\2")
        buf.write("\u0253\u0256\7\u03c2\2\2\u0254\u0256\7\u03c1\2\2\u0255")
        buf.write("\u0251\3\2\2\2\u0255\u0254\3\2\2\2\u0256\u0258\3\2\2\2")
        buf.write("\u0257\u0259\7\u03c2\2\2\u0258\u0257\3\2\2\2\u0259\u025a")
        buf.write("\3\2\2\2\u025a\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025b")
        buf.write("\u0268\3\2\2\2\u025c\u025e\7\u03c8\2\2\u025d\u025c\3\2")
        buf.write("\2\2\u025d\u025e\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0262")
        buf.write("\7\u03c2\2\2\u0260\u0262\7\u03c1\2\2\u0261\u025d\3\2\2")
        buf.write("\2\u0261\u0260\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0264")
        buf.write("\7\31\2\2\u0264\u0266\58\35\2\u0265\u0263\3\2\2\2\u0265")
        buf.write("\u0266\3\2\2\2\u0266\u0268\3\2\2\2\u0267\u0255\3\2\2\2")
        buf.write("\u0267\u0261\3\2\2\2\u0268O\3\2\2\2\u0269\u026a\t\f\2")
        buf.write("\2\u026aQ\3\2\2\2\u026b\u026d\7\u03c8\2\2\u026c\u026b")
        buf.write("\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u026e\3\2\2\2\u026e")
        buf.write("\u026f\7\u03c4\2\2\u026fS\3\2\2\2\u0270\u0272\7c\2\2\u0271")
        buf.write("\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273\u0274\t\r\2\2\u0274U\3\2\2\2\u0275\u0280\5N(\2")
        buf.write("\u0276\u0280\5J&\2\u0277\u0280\5R*\2\u0278\u0280\5P)\2")
        buf.write("\u0279\u0280\7\u03c5\2\2\u027a\u0280\7\u03c7\2\2\u027b")
        buf.write("\u027d\7c\2\2\u027c\u027b\3\2\2\2\u027c\u027d\3\2\2\2")
        buf.write("\u027d\u027e\3\2\2\2\u027e\u0280\t\r\2\2\u027f\u0275\3")
        buf.write("\2\2\2\u027f\u0276\3\2\2\2\u027f\u0277\3\2\2\2\u027f\u0278")
        buf.write("\3\2\2\2\u027f\u0279\3\2\2\2\u027f\u027a\3\2\2\2\u027f")
        buf.write("\u027c\3\2\2\2\u0280W\3\2\2\2\u0281\u028f\5\u00a8U\2\u0282")
        buf.write("\u028f\7\u00ba\2\2\u0283\u028f\7\u00c8\2\2\u0284\u028f")
        buf.write("\7\u00c9\2\2\u0285\u028f\7\u00ca\2\2\u0286\u028f\7\u00cb")
        buf.write("\2\2\u0287\u028f\7\u00cc\2\2\u0288\u028f\7\u00cd\2\2\u0289")
        buf.write("\u028f\7\u00ce\2\2\u028a\u028f\7\u00cf\2\2\u028b\u028f")
        buf.write("\7\u00d0\2\2\u028c\u028f\7\u00d1\2\2\u028d\u028f\7\u00d2")
        buf.write("\2\2\u028e\u0281\3\2\2\2\u028e\u0282\3\2\2\2\u028e\u0283")
        buf.write("\3\2\2\2\u028e\u0284\3\2\2\2\u028e\u0285\3\2\2\2\u028e")
        buf.write("\u0286\3\2\2\2\u028e\u0287\3\2\2\2\u028e\u0288\3\2\2\2")
        buf.write("\u028e\u0289\3\2\2\2\u028e\u028a\3\2\2\2\u028e\u028b\3")
        buf.write("\2\2\2\u028e\u028c\3\2\2\2\u028e\u028d\3\2\2\2\u028fY")
        buf.write("\3\2\2\2\u0290\u0292\t\16\2\2\u0291\u0293\5^\60\2\u0292")
        buf.write("\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0295\3\2\2\2")
        buf.write("\u0294\u0296\7\u00bd\2\2\u0295\u0294\3\2\2\2\u0295\u0296")
        buf.write("\3\2\2\2\u0296\u029a\3\2\2\2\u0297\u0298\7\27\2\2\u0298")
        buf.write("\u0299\7\u0085\2\2\u0299\u029b\5\66\34\2\u029a\u0297\3")
        buf.write("\2\2\2\u029a\u029b\3\2\2\2\u029b\u029e\3\2\2\2\u029c\u029d")
        buf.write("\7\31\2\2\u029d\u029f\58\35\2\u029e\u029c\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u02dc\3\2\2\2\u02a0\u02a2\t\17\2")
        buf.write("\2\u02a1\u02a3\5^\60\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3")
        buf.write("\3\2\2\2\u02a3\u02a5\3\2\2\2\u02a4\u02a6\7\u009e\2\2\u02a5")
        buf.write("\u02a4\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8\3\2\2\2")
        buf.write("\u02a7\u02a9\7\u00aa\2\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9")
        buf.write("\3\2\2\2\u02a9\u02dc\3\2\2\2\u02aa\u02ac\t\20\2\2\u02ab")
        buf.write("\u02ad\5`\61\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad\3\2\2\2")
        buf.write("\u02ad\u02af\3\2\2\2\u02ae\u02b0\7\u009e\2\2\u02af\u02ae")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\3\2\2\2\u02b1")
        buf.write("\u02b3\7\u00aa\2\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3\3\2")
        buf.write("\2\2\u02b3\u02dc\3\2\2\2\u02b4\u02b6\t\21\2\2\u02b5\u02b7")
        buf.write("\5b\62\2\u02b6\u02b5\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7")
        buf.write("\u02b9\3\2\2\2\u02b8\u02ba\7\u009e\2\2\u02b9\u02b8\3\2")
        buf.write("\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bc\3\2\2\2\u02bb\u02bd")
        buf.write("\7\u00aa\2\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd")
        buf.write("\u02dc\3\2\2\2\u02be\u02dc\t\22\2\2\u02bf\u02c1\t\23\2")
        buf.write("\2\u02c0\u02c2\5^\60\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02dc\3\2\2\2\u02c3\u02c4\t\24\2\2\u02c4")
        buf.write("\u02c5\7\u03b3\2\2\u02c5\u02ca\7\u03c2\2\2\u02c6\u02c7")
        buf.write("\7\u03b5\2\2\u02c7\u02c9\7\u03c2\2\2\u02c8\u02c6\3\2\2")
        buf.write("\2\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb")
        buf.write("\3\2\2\2\u02cb\u02cd\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cd")
        buf.write("\u02cf\7\u03b4\2\2\u02ce\u02d0\7\u00bd\2\2\u02cf\u02ce")
        buf.write("\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d4\3\2\2\2\u02d1")
        buf.write("\u02d2\7\27\2\2\u02d2\u02d3\7\u0085\2\2\u02d3\u02d5\5")
        buf.write("\66\34\2\u02d4\u02d1\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5")
        buf.write("\u02d8\3\2\2\2\u02d6\u02d7\7\31\2\2\u02d7\u02d9\58\35")
        buf.write("\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02dc")
        buf.write("\3\2\2\2\u02da\u02dc\t\25\2\2\u02db\u0290\3\2\2\2\u02db")
        buf.write("\u02a0\3\2\2\2\u02db\u02aa\3\2\2\2\u02db\u02b4\3\2\2\2")
        buf.write("\u02db\u02be\3\2\2\2\u02db\u02bf\3\2\2\2\u02db\u02c3\3")
        buf.write("\2\2\2\u02db\u02da\3\2\2\2\u02dc[\3\2\2\2\u02dd\u02df")
        buf.write("\t\26\2\2\u02de\u02e0\5^\60\2\u02df\u02de\3\2\2\2\u02df")
        buf.write("\u02e0\3\2\2\2\u02e0\u02f4\3\2\2\2\u02e1\u02e3\7\u00bb")
        buf.write("\2\2\u02e2\u02e4\5^\60\2\u02e3\u02e2\3\2\2\2\u02e3\u02e4")
        buf.write("\3\2\2\2\u02e4\u02e8\3\2\2\2\u02e5\u02e6\7\27\2\2\u02e6")
        buf.write("\u02e7\7\u0085\2\2\u02e7\u02e9\5\66\34\2\u02e8\u02e5\3")
        buf.write("\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02f4\3\2\2\2\u02ea\u02f4")
        buf.write("\t\27\2\2\u02eb\u02ed\7\u00b4\2\2\u02ec\u02ee\5`\61\2")
        buf.write("\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f4\3")
        buf.write("\2\2\2\u02ef\u02f1\t\30\2\2\u02f0\u02f2\7\u00af\2\2\u02f1")
        buf.write("\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f4\3\2\2\2")
        buf.write("\u02f3\u02dd\3\2\2\2\u02f3\u02e1\3\2\2\2\u02f3\u02ea\3")
        buf.write("\2\2\2\u02f3\u02eb\3\2\2\2\u02f3\u02ef\3\2\2\2\u02f4]")
        buf.write("\3\2\2\2\u02f5\u02f6\7\u03b3\2\2\u02f6\u02f7\5J&\2\u02f7")
        buf.write("\u02f8\7\u03b4\2\2\u02f8_\3\2\2\2\u02f9\u02fa\7\u03b3")
        buf.write("\2\2\u02fa\u02fb\5J&\2\u02fb\u02fc\7\u03b5\2\2\u02fc\u02fd")
        buf.write("\5J&\2\u02fd\u02fe\7\u03b4\2\2\u02fea\3\2\2\2\u02ff\u0300")
        buf.write("\7\u03b3\2\2\u0300\u0303\5J&\2\u0301\u0302\7\u03b5\2\2")
        buf.write("\u0302\u0304\5J&\2\u0303\u0301\3\2\2\2\u0303\u0304\3\2")
        buf.write("\2\2\u0304\u0305\3\2\2\2\u0305\u0306\7\u03b4\2\2\u0306")
        buf.write("c\3\2\2\2\u0307\u030c\5D#\2\u0308\u0309\7\u03b5\2\2\u0309")
        buf.write("\u030b\5D#\2\u030a\u0308\3\2\2\2\u030b\u030e\3\2\2\2\u030c")
        buf.write("\u030a\3\2\2\2\u030c\u030d\3\2\2\2\u030de\3\2\2\2\u030e")
        buf.write("\u030c\3\2\2\2\u030f\u0314\5,\27\2\u0310\u0311\7\u03b5")
        buf.write("\2\2\u0311\u0313\5,\27\2\u0312\u0310\3\2\2\2\u0313\u0316")
        buf.write("\3\2\2\2\u0314\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315")
        buf.write("g\3\2\2\2\u0316\u0314\3\2\2\2\u0317\u0318\7\u03b3\2\2")
        buf.write("\u0318\u031d\5\60\31\2\u0319\u031a\7\u03b5\2\2\u031a\u031c")
        buf.write("\5\60\31\2\u031b\u0319\3\2\2\2\u031c\u031f\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0320\3\2\2\2")
        buf.write("\u031f\u031d\3\2\2\2\u0320\u0321\7\u03b4\2\2\u0321i\3")
        buf.write("\2\2\2\u0322\u0327\5\u0092J\2\u0323\u0324\7\u03b5\2\2")
        buf.write("\u0324\u0326\5\u0092J\2\u0325\u0323\3\2\2\2\u0326\u0329")
        buf.write("\3\2\2\2\u0327\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328")
        buf.write("k\3\2\2\2\u0329\u0327\3\2\2\2\u032a\u032f\5x=\2\u032b")
        buf.write("\u032c\7\u03b5\2\2\u032c\u032e\5x=\2\u032d\u032b\3\2\2")
        buf.write("\2\u032e\u0331\3\2\2\2\u032f\u032d\3\2\2\2\u032f\u0330")
        buf.write("\3\2\2\2\u0330m\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u0337")
        buf.write("\5V,\2\u0333\u0334\7\u03b5\2\2\u0334\u0336\5V,\2\u0335")
        buf.write("\u0333\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2")
        buf.write("\u0337\u0338\3\2\2\2\u0338o\3\2\2\2\u0339\u0337\3\2\2")
        buf.write("\2\u033a\u033f\7\u03c2\2\2\u033b\u033c\7\u03b5\2\2\u033c")
        buf.write("\u033e\7\u03c2\2\2\u033d\u033b\3\2\2\2\u033e\u0341\3\2")
        buf.write("\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340q\3")
        buf.write("\2\2\2\u0341\u033f\3\2\2\2\u0342\u0347\7\u03cd\2\2\u0343")
        buf.write("\u0344\7\u03b5\2\2\u0344\u0346\7\u03cd\2\2\u0345\u0343")
        buf.write("\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347")
        buf.write("\u0348\3\2\2\2\u0348s\3\2\2\2\u0349\u0347\3\2\2\2\u034a")
        buf.write("\u0353\7e\2\2\u034b\u0353\5V,\2\u034c\u0350\5v<\2\u034d")
        buf.write("\u034e\7f\2\2\u034e\u034f\7\u009f\2\2\u034f\u0351\5v<")
        buf.write("\2\u0350\u034d\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0353")
        buf.write("\3\2\2\2\u0352\u034a\3\2\2\2\u0352\u034b\3\2\2\2\u0352")
        buf.write("\u034c\3\2\2\2\u0353u\3\2\2\2\u0354\u035a\t\31\2\2\u0355")
        buf.write("\u0357\7\u03b3\2\2\u0356\u0358\5J&\2\u0357\u0356\3\2\2")
        buf.write("\2\u0357\u0358\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b")
        buf.write("\7\u03b4\2\2\u035a\u0355\3\2\2\2\u035a\u035b\3\2\2\2\u035b")
        buf.write("\u0363\3\2\2\2\u035c\u035d\7\u00ed\2\2\u035d\u035f\7\u03b3")
        buf.write("\2\2\u035e\u0360\5J&\2\u035f\u035e\3\2\2\2\u035f\u0360")
        buf.write("\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0363\7\u03b4\2\2\u0362")
        buf.write("\u0354\3\2\2\2\u0362\u035c\3\2\2\2\u0363w\3\2\2\2\u0364")
        buf.write("\u0367\5\u0092J\2\u0365\u0367\7&\2\2\u0366\u0364\3\2\2")
        buf.write("\2\u0366\u0365\3\2\2\2\u0367y\3\2\2\2\u0368\u0369\7B\2")
        buf.write("\2\u0369\u036a\7\64\2\2\u036a{\3\2\2\2\u036b\u036c\7B")
        buf.write("\2\2\u036c\u036d\7c\2\2\u036d\u036e\7\64\2\2\u036e}\3")
        buf.write("\2\2\2\u036f\u0381\5\u0080A\2\u0370\u0381\5\u0088E\2\u0371")
        buf.write("\u0372\5\u008aF\2\u0372\u0374\7\u03b3\2\2\u0373\u0375")
        buf.write("\5\u008eH\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0377\7\u03b4\2\2\u0377\u0381\3\2")
        buf.write("\2\2\u0378\u0379\5*\26\2\u0379\u037b\7\u03b3\2\2\u037a")
        buf.write("\u037c\5\u008eH\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2")
        buf.write("\2\2\u037c\u037d\3\2\2\2\u037d\u037e\7\u03b4\2\2\u037e")
        buf.write("\u0381\3\2\2\2\u037f\u0381\5\u008cG\2\u0380\u036f\3\2")
        buf.write("\2\2\u0380\u0370\3\2\2\2\u0380\u0371\3\2\2\2\u0380\u0378")
        buf.write("\3\2\2\2\u0380\u037f\3\2\2\2\u0381\177\3\2\2\2\u0382\u0420")
        buf.write("\t\32\2\2\u0383\u0384\7\36\2\2\u0384\u0385\7\u03b3\2\2")
        buf.write("\u0385\u0386\5\u0092J\2\u0386\u0387\7\u03b5\2\2\u0387")
        buf.write("\u0388\5\\/\2\u0388\u0389\7\u03b4\2\2\u0389\u0420\3\2")
        buf.write("\2\2\u038a\u038b\7\36\2\2\u038b\u038c\7\u03b3\2\2\u038c")
        buf.write("\u038d\5\u0092J\2\u038d\u038e\7\u00a2\2\2\u038e\u038f")
        buf.write("\5\66\34\2\u038f\u0390\7\u03b4\2\2\u0390\u0420\3\2\2\2")
        buf.write("\u0391\u0392\7\25\2\2\u0392\u0393\7\u03b3\2\2\u0393\u0394")
        buf.write("\5\u0092J\2\u0394\u0395\7\f\2\2\u0395\u0396\5\\/\2\u0396")
        buf.write("\u0397\7\u03b4\2\2\u0397\u0420\3\2\2\2\u0398\u0399\7\u00a3")
        buf.write("\2\2\u0399\u039a\7\u03b3\2\2\u039a\u039b\5.\30\2\u039b")
        buf.write("\u039c\7\u03b4\2\2\u039c\u0420\3\2\2\2\u039d\u039e\7\24")
        buf.write("\2\2\u039e\u03a0\5\u0092J\2\u039f\u03a1\5\u0082B\2\u03a0")
        buf.write("\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a0\3\2\2\2")
        buf.write("\u03a2\u03a3\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4\u03a5\7")
        buf.write("\60\2\2\u03a5\u03a7\5\u0090I\2\u03a6\u03a4\3\2\2\2\u03a6")
        buf.write("\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\7\u0135")
        buf.write("\2\2\u03a9\u0420\3\2\2\2\u03aa\u03ac\7\24\2\2\u03ab\u03ad")
        buf.write("\5\u0082B\2\u03ac\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae")
        buf.write("\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b2\3\2\2\2")
        buf.write("\u03b0\u03b1\7\60\2\2\u03b1\u03b3\5\u0090I\2\u03b2\u03b0")
        buf.write("\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u03b5\7\u0135\2\2\u03b5\u0420\3\2\2\2\u03b6\u03b7\7\u00bb")
        buf.write("\2\2\u03b7\u03b8\7\u03b3\2\2\u03b8\u03bb\5\u008eH\2\u03b9")
        buf.write("\u03ba\7\u00a2\2\2\u03ba\u03bc\5\66\34\2\u03bb\u03b9\3")
        buf.write("\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03be")
        buf.write("\7\u03b4\2\2\u03be\u0420\3\2\2\2\u03bf\u03c0\7\u00ee\2")
        buf.write("\2\u03c0\u03c3\7\u03b3\2\2\u03c1\u03c4\5N(\2\u03c2\u03c4")
        buf.write("\5\u0092J\2\u03c3\u03c1\3\2\2\2\u03c3\u03c2\3\2\2\2\u03c4")
        buf.write("\u03c5\3\2\2\2\u03c5\u03c8\7D\2\2\u03c6\u03c9\5N(\2\u03c7")
        buf.write("\u03c9\5\u0092J\2\u03c8\u03c6\3\2\2\2\u03c8\u03c7\3\2")
        buf.write("\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\7\u03b4\2\2\u03cb")
        buf.write("\u0420\3\2\2\2\u03cc\u03cd\t\33\2\2\u03cd\u03d0\7\u03b3")
        buf.write("\2\2\u03ce\u03d1\5N(\2\u03cf\u03d1\5\u0092J\2\u03d0\u03ce")
        buf.write("\3\2\2\2\u03d0\u03cf\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2")
        buf.write("\u03d5\7<\2\2\u03d3\u03d6\5J&\2\u03d4\u03d6\5\u0092J\2")
        buf.write("\u03d5\u03d3\3\2\2\2\u03d5\u03d4\3\2\2\2\u03d6\u03dc\3")
        buf.write("\2\2\2\u03d7\u03da\79\2\2\u03d8\u03db\5J&\2\u03d9\u03db")
        buf.write("\5\u0092J\2\u03da\u03d8\3\2\2\2\u03da\u03d9\3\2\2\2\u03db")
        buf.write("\u03dd\3\2\2\2\u03dc\u03d7\3\2\2\2\u03dc\u03dd\3\2\2\2")
        buf.write("\u03dd\u03de\3\2\2\2\u03de\u03df\7\u03b4\2\2\u03df\u0420")
        buf.write("\3\2\2\2\u03e0\u03e1\7\u00f2\2\2\u03e1\u03e2\7\u03b3\2")
        buf.write("\2\u03e2\u03e5\t\34\2\2\u03e3\u03e6\5N(\2\u03e4\u03e6")
        buf.write("\5\u0092J\2\u03e5\u03e3\3\2\2\2\u03e5\u03e4\3\2\2\2\u03e5")
        buf.write("\u03e6\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03ea\7<\2\2")
        buf.write("\u03e8\u03eb\5N(\2\u03e9\u03eb\5\u0092J\2\u03ea\u03e8")
        buf.write("\3\2\2\2\u03ea\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec")
        buf.write("\u03ed\7\u03b4\2\2\u03ed\u0420\3\2\2\2\u03ee\u03ef\7\u00f2")
        buf.write("\2\2\u03ef\u03f2\7\u03b3\2\2\u03f0\u03f3\5N(\2\u03f1\u03f3")
        buf.write("\5\u0092J\2\u03f2\u03f0\3\2\2\2\u03f2\u03f1\3\2\2\2\u03f3")
        buf.write("\u03f4\3\2\2\2\u03f4\u03f7\7<\2\2\u03f5\u03f8\5N(\2\u03f6")
        buf.write("\u03f8\5\u0092J\2\u03f7\u03f5\3\2\2\2\u03f7\u03f6\3\2")
        buf.write("\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa\7\u03b4\2\2\u03fa")
        buf.write("\u0420\3\2\2\2\u03fb\u03fc\7\u0394\2\2\u03fc\u03ff\7\u03b3")
        buf.write("\2\2\u03fd\u0400\5N(\2\u03fe\u0400\5\u0092J\2\u03ff\u03fd")
        buf.write("\3\2\2\2\u03ff\u03fe\3\2\2\2\u0400\u0407\3\2\2\2\u0401")
        buf.write("\u0402\7\f\2\2\u0402\u0403\t\35\2\2\u0403\u0404\7\u03b3")
        buf.write("\2\2\u0404\u0405\5J&\2\u0405\u0406\7\u03b4\2\2\u0406\u0408")
        buf.write("\3\2\2\2\u0407\u0401\3\2\2\2\u0407\u0408\3\2\2\2\u0408")
        buf.write("\u040a\3\2\2\2\u0409\u040b\5\u0084C\2\u040a\u0409\3\2")
        buf.write("\2\2\u040a\u040b\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040d")
        buf.write("\7\u03b4\2\2\u040d\u0420\3\2\2\2\u040e\u040f\7\u00eb\2")
        buf.write("\2\u040f\u0410\7\u03b3\2\2\u0410\u0411\5X-\2\u0411\u0414")
        buf.write("\7<\2\2\u0412\u0415\5N(\2\u0413\u0415\5\u0092J\2\u0414")
        buf.write("\u0412\3\2\2\2\u0414\u0413\3\2\2\2\u0415\u0416\3\2\2\2")
        buf.write("\u0416\u0417\7\u03b4\2\2\u0417\u0420\3\2\2\2\u0418\u0419")
        buf.write("\7\u02cd\2\2\u0419\u041a\7\u03b3\2\2\u041a\u041b\t\27")
        buf.write("\2\2\u041b\u041c\7\u03b5\2\2\u041c\u041d\5N(\2\u041d\u041e")
        buf.write("\7\u03b4\2\2\u041e\u0420\3\2\2\2\u041f\u0382\3\2\2\2\u041f")
        buf.write("\u0383\3\2\2\2\u041f\u038a\3\2\2\2\u041f\u0391\3\2\2\2")
        buf.write("\u041f\u0398\3\2\2\2\u041f\u039d\3\2\2\2\u041f\u03aa\3")
        buf.write("\2\2\2\u041f\u03b6\3\2\2\2\u041f\u03bf\3\2\2\2\u041f\u03cc")
        buf.write("\3\2\2\2\u041f\u03e0\3\2\2\2\u041f\u03ee\3\2\2\2\u041f")
        buf.write("\u03fb\3\2\2\2\u041f\u040e\3\2\2\2\u041f\u0418\3\2\2\2")
        buf.write("\u0420\u0081\3\2\2\2\u0421\u0422\7\u00a4\2\2\u0422\u0423")
        buf.write("\5\u0090I\2\u0423\u0424\7\u0095\2\2\u0424\u0425\5\u0090")
        buf.write("I\2\u0425\u0083\3\2\2\2\u0426\u0427\7\u0170\2\2\u0427")
        buf.write("\u042c\5\u0086D\2\u0428\u0429\7\u03b5\2\2\u0429\u042b")
        buf.write("\5\u0086D\2\u042a\u0428\3\2\2\2\u042b\u042e\3\2\2\2\u042c")
        buf.write("\u042a\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u0435\3\2\2\2")
        buf.write("\u042e\u042c\3\2\2\2\u042f\u0430\7\u0170\2\2\u0430\u0431")
        buf.write("\5J&\2\u0431\u0432\7\u03a7\2\2\u0432\u0433\5J&\2\u0433")
        buf.write("\u0435\3\2\2\2\u0434\u0426\3\2\2\2\u0434\u042f\3\2\2\2")
        buf.write("\u0435\u0085\3\2\2\2\u0436\u0438\5J&\2\u0437\u0439\t\36")
        buf.write("\2\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u0087")
        buf.write("\3\2\2\2\u043a\u043b\t\37\2\2\u043b\u043d\7\u03b3\2\2")
        buf.write("\u043c\u043e\t\2\2\2\u043d\u043c\3\2\2\2\u043d\u043e\3")
        buf.write("\2\2\2\u043e\u043f\3\2\2\2\u043f\u0440\5\u0090I\2\u0440")
        buf.write("\u0441\7\u03b4\2\2\u0441\u0473\3\2\2\2\u0442\u0443\7\u00d7")
        buf.write("\2\2\u0443\u0449\7\u03b3\2\2\u0444\u044a\7\u03a2\2\2\u0445")
        buf.write("\u0447\7\b\2\2\u0446\u0445\3\2\2\2\u0446\u0447\3\2\2\2")
        buf.write("\u0447\u0448\3\2\2\2\u0448\u044a\5\u0090I\2\u0449\u0444")
        buf.write("\3\2\2\2\u0449\u0446\3\2\2\2\u044a\u044b\3\2\2\2\u044b")
        buf.write("\u0473\7\u03b4\2\2\u044c\u044d\7\u00d7\2\2\u044d\u044e")
        buf.write("\7\u03b3\2\2\u044e\u044f\7,\2\2\u044f\u0450\5\u008eH\2")
        buf.write("\u0450\u0451\7\u03b4\2\2\u0451\u0473\3\2\2\2\u0452\u0453")
        buf.write("\t \2\2\u0453\u0455\7\u03b3\2\2\u0454\u0456\7\b\2\2\u0455")
        buf.write("\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457\3\2\2\2")
        buf.write("\u0457\u0458\5\u0090I\2\u0458\u0459\7\u03b4\2\2\u0459")
        buf.write("\u0473\3\2\2\2\u045a\u045b\7\u00d8\2\2\u045b\u045d\7\u03b3")
        buf.write("\2\2\u045c\u045e\7,\2\2\u045d\u045c\3\2\2\2\u045d\u045e")
        buf.write("\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u046a\5\u008eH\2\u0460")
        buf.write("\u0461\7k\2\2\u0461\u0462\7\21\2\2\u0462\u0467\5\b\5\2")
        buf.write("\u0463\u0464\7\u03b5\2\2\u0464\u0466\5\b\5\2\u0465\u0463")
        buf.write("\3\2\2\2\u0466\u0469\3\2\2\2\u0467\u0465\3\2\2\2\u0467")
        buf.write("\u0468\3\2\2\2\u0468\u046b\3\2\2\2\u0469\u0467\3\2\2\2")
        buf.write("\u046a\u0460\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046e\3")
        buf.write("\2\2\2\u046c\u046d\7\u0086\2\2\u046d\u046f\7\u03c2\2\2")
        buf.write("\u046e\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0470\3")
        buf.write("\2\2\2\u0470\u0471\7\u03b4\2\2\u0471\u0473\3\2\2\2\u0472")
        buf.write("\u043a\3\2\2\2\u0472\u0442\3\2\2\2\u0472\u044c\3\2\2\2")
        buf.write("\u0472\u0452\3\2\2\2\u0472\u045a\3\2\2\2\u0473\u0089\3")
        buf.write("\2\2\2\u0474\u048c\5\u00aeX\2\u0475\u048c\7\u023a\2\2")
        buf.write("\u0476\u048c\7\u00e7\2\2\u0477\u048c\7\u00e3\2\2\u0478")
        buf.write("\u048c\7\u00e4\2\2\u0479\u048c\7\u00e5\2\2\u047a\u048c")
        buf.write("\7\u00e8\2\2\u047b\u048c\7\u00e9\2\2\u047c\u048c\7\u00ea")
        buf.write("\2\2\u047d\u048c\7B\2\2\u047e\u048c\7I\2\2\u047f\u048c")
        buf.write("\7\u00e6\2\2\u0480\u048c\7\u00ec\2\2\u0481\u048c\7\u0192")
        buf.write("\2\2\u0482\u048c\7\u00ed\2\2\u0483\u048c\7{\2\2\u0484")
        buf.write("\u048c\7\u00ef\2\2\u0485\u048c\7\u00f0\2\2\u0486\u048c")
        buf.write("\7\u00f1\2\2\u0487\u048c\7\u00f2\2\2\u0488\u048c\7\u00f3")
        buf.write("\2\2\u0489\u048c\7\u00f4\2\2\u048a\u048c\7\u00f5\2\2\u048b")
        buf.write("\u0474\3\2\2\2\u048b\u0475\3\2\2\2\u048b\u0476\3\2\2\2")
        buf.write("\u048b\u0477\3\2\2\2\u048b\u0478\3\2\2\2\u048b\u0479\3")
        buf.write("\2\2\2\u048b\u047a\3\2\2\2\u048b\u047b\3\2\2\2\u048b\u047c")
        buf.write("\3\2\2\2\u048b\u047d\3\2\2\2\u048b\u047e\3\2\2\2\u048b")
        buf.write("\u047f\3\2\2\2\u048b\u0480\3\2\2\2\u048b\u0481\3\2\2\2")
        buf.write("\u048b\u0482\3\2\2\2\u048b\u0483\3\2\2\2\u048b\u0484\3")
        buf.write("\2\2\2\u048b\u0485\3\2\2\2\u048b\u0486\3\2\2\2\u048b\u0487")
        buf.write("\3\2\2\2\u048b\u0488\3\2\2\2\u048b\u0489\3\2\2\2\u048b")
        buf.write("\u048a\3\2\2\2\u048c\u008b\3\2\2\2\u048d\u048e\t!\2\2")
        buf.write("\u048e\u048f\7\u03b3\2\2\u048f\u0490\5\u0090I\2\u0490")
        buf.write("\u0491\7\u03b4\2\2\u0491\u008d\3\2\2\2\u0492\u0497\5V")
        buf.write(",\2\u0493\u0497\5.\30\2\u0494\u0497\5~@\2\u0495\u0497")
        buf.write("\5\u0092J\2\u0496\u0492\3\2\2\2\u0496\u0493\3\2\2\2\u0496")
        buf.write("\u0494\3\2\2\2\u0496\u0495\3\2\2\2\u0497\u04a1\3\2\2\2")
        buf.write("\u0498\u049d\7\u03b5\2\2\u0499\u049e\5V,\2\u049a\u049e")
        buf.write("\5.\30\2\u049b\u049e\5~@\2\u049c\u049e\5\u0092J\2\u049d")
        buf.write("\u0499\3\2\2\2\u049d\u049a\3\2\2\2\u049d\u049b\3\2\2\2")
        buf.write("\u049d\u049c\3\2\2\2\u049e\u04a0\3\2\2\2\u049f\u0498\3")
        buf.write("\2\2\2\u04a0\u04a3\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2")
        buf.write("\3\2\2\2\u04a2\u008f\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a4")
        buf.write("\u04a9\5V,\2\u04a5\u04a9\5.\30\2\u04a6\u04a9\5~@\2\u04a7")
        buf.write("\u04a9\5\u0092J\2\u04a8\u04a4\3\2\2\2\u04a8\u04a5\3\2")
        buf.write("\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a7\3\2\2\2\u04a9\u0091")
        buf.write("\3\2\2\2\u04aa\u04ab\bJ\1\2\u04ab\u04ac\t\"\2\2\u04ac")
        buf.write("\u04b6\5\u0092J\6\u04ad\u04ae\5\u0094K\2\u04ae\u04b0\7")
        buf.write("L\2\2\u04af\u04b1\7c\2\2\u04b0\u04af\3\2\2\2\u04b0\u04b1")
        buf.write("\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b3\t#\2\2\u04b3")
        buf.write("\u04b6\3\2\2\2\u04b4\u04b6\5\u0094K\2\u04b5\u04aa\3\2")
        buf.write("\2\2\u04b5\u04ad\3\2\2\2\u04b5\u04b4\3\2\2\2\u04b6\u04bd")
        buf.write("\3\2\2\2\u04b7\u04b8\f\5\2\2\u04b8\u04b9\5\u009cO\2\u04b9")
        buf.write("\u04ba\5\u0092J\6\u04ba\u04bc\3\2\2\2\u04bb\u04b7\3\2")
        buf.write("\2\2\u04bc\u04bf\3\2\2\2\u04bd\u04bb\3\2\2\2\u04bd\u04be")
        buf.write("\3\2\2\2\u04be\u0093\3\2\2\2\u04bf\u04bd\3\2\2\2\u04c0")
        buf.write("\u04c3\bK\1\2\u04c1\u04c2\7\u03cd\2\2\u04c2\u04c4\7\u0399")
        buf.write("\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c5")
        buf.write("\3\2\2\2\u04c5\u04c6\5\u0096L\2\u04c6\u0500\3\2\2\2\u04c7")
        buf.write("\u04c8\f\t\2\2\u04c8\u04c9\5\u009aN\2\u04c9\u04ca\5\u0094")
        buf.write("K\n\u04ca\u04ff\3\2\2\2\u04cb\u04cd\f\7\2\2\u04cc\u04ce")
        buf.write("\7c\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce")
        buf.write("\u04cf\3\2\2\2\u04cf\u04d0\7\17\2\2\u04d0\u04d1\5\u0094")
        buf.write("K\2\u04d1\u04d2\7\13\2\2\u04d2\u04d3\5\u0094K\b\u04d3")
        buf.write("\u04ff\3\2\2\2\u04d4\u04d5\f\6\2\2\u04d5\u04d6\7\u01ed")
        buf.write("\2\2\u04d6\u04d7\7U\2\2\u04d7\u04ff\5\u0094K\7\u04d8\u04da")
        buf.write("\f\4\2\2\u04d9\u04db\7c\2\2\u04da\u04d9\3\2\2\2\u04da")
        buf.write("\u04db\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd\t$\2\2")
        buf.write("\u04dd\u04ff\5\u0094K\5\u04de\u04e0\f\13\2\2\u04df\u04e1")
        buf.write("\7c\2\2\u04e0\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1")
        buf.write("\u04e2\3\2\2\2\u04e2\u04e3\7D\2\2\u04e3\u04e6\7\u03b3")
        buf.write("\2\2\u04e4\u04e7\5\4\3\2\u04e5\u04e7\5j\66\2\u04e6\u04e4")
        buf.write("\3\2\2\2\u04e6\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8")
        buf.write("\u04e9\7\u03b4\2\2\u04e9\u04ff\3\2\2\2\u04ea\u04eb\f\n")
        buf.write("\2\2\u04eb\u04ec\7L\2\2\u04ec\u04ff\5T+\2\u04ed\u04ee")
        buf.write("\f\b\2\2\u04ee\u04ef\5\u009aN\2\u04ef\u04f0\t%\2\2\u04f0")
        buf.write("\u04f1\7\u03b3\2\2\u04f1\u04f2\5\4\3\2\u04f2\u04f3\7\u03b4")
        buf.write("\2\2\u04f3\u04ff\3\2\2\2\u04f4\u04f6\f\5\2\2\u04f5\u04f7")
        buf.write("\7c\2\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7")
        buf.write("\u04f8\3\2\2\2\u04f8\u04f9\7U\2\2\u04f9\u04fc\5\u0094")
        buf.write("K\2\u04fa\u04fb\7\u013b\2\2\u04fb\u04fd\7\u03c2\2\2\u04fc")
        buf.write("\u04fa\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff\3\2\2\2")
        buf.write("\u04fe\u04c7\3\2\2\2\u04fe\u04cb\3\2\2\2\u04fe\u04d4\3")
        buf.write("\2\2\2\u04fe\u04d8\3\2\2\2\u04fe\u04de\3\2\2\2\u04fe\u04ea")
        buf.write("\3\2\2\2\u04fe\u04ed\3\2\2\2\u04fe\u04f4\3\2\2\2\u04ff")
        buf.write("\u0502\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501\3\2\2\2")
        buf.write("\u0501\u0095\3\2\2\2\u0502\u0500\3\2\2\2\u0503\u0504\b")
        buf.write("L\1\2\u0504\u0531\5V,\2\u0505\u0531\5.\30\2\u0506\u0531")
        buf.write("\5~@\2\u0507\u0531\5\64\33\2\u0508\u0509\5\u0098M\2\u0509")
        buf.write("\u050a\5\u0096L\13\u050a\u0531\3\2\2\2\u050b\u050c\7\u00bd")
        buf.write("\2\2\u050c\u0531\5\u0096L\n\u050d\u050e\7\u03b3\2\2\u050e")
        buf.write("\u0513\5\u0092J\2\u050f\u0510\7\u03b5\2\2\u0510\u0512")
        buf.write("\5\u0092J\2\u0511\u050f\3\2\2\2\u0512\u0515\3\2\2\2\u0513")
        buf.write("\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\3\2\2\2")
        buf.write("\u0515\u0513\3\2\2\2\u0516\u0517\7\u03b4\2\2\u0517\u0531")
        buf.write("\3\2\2\2\u0518\u0519\7\u01db\2\2\u0519\u051a\7\u03b3\2")
        buf.write("\2\u051a\u051d\5\u0092J\2\u051b\u051c\7\u03b5\2\2\u051c")
        buf.write("\u051e\5\u0092J\2\u051d\u051b\3\2\2\2\u051e\u051f\3\2")
        buf.write("\2\2\u051f\u051d\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0521")
        buf.write("\3\2\2\2\u0521\u0522\7\u03b4\2\2\u0522\u0531\3\2\2\2\u0523")
        buf.write("\u0524\7\64\2\2\u0524\u0525\7\u03b3\2\2\u0525\u0526\5")
        buf.write("\4\3\2\u0526\u0527\7\u03b4\2\2\u0527\u0531\3\2\2\2\u0528")
        buf.write("\u0529\7\u03b3\2\2\u0529\u052a\5\4\3\2\u052a\u052b\7\u03b4")
        buf.write("\2\2\u052b\u0531\3\2\2\2\u052c\u052d\7J\2\2\u052d\u052e")
        buf.write("\5\u0092J\2\u052e\u052f\5X-\2\u052f\u0531\3\2\2\2\u0530")
        buf.write("\u0503\3\2\2\2\u0530\u0505\3\2\2\2\u0530\u0506\3\2\2\2")
        buf.write("\u0530\u0507\3\2\2\2\u0530\u0508\3\2\2\2\u0530\u050b\3")
        buf.write("\2\2\2\u0530\u050d\3\2\2\2\u0530\u0518\3\2\2\2\u0530\u0523")
        buf.write("\3\2\2\2\u0530\u0528\3\2\2\2\u0530\u052c\3\2\2\2\u0531")
        buf.write("\u053f\3\2\2\2\u0532\u0533\f\4\2\2\u0533\u0534\5\u009e")
        buf.write("P\2\u0534\u0535\5\u0096L\5\u0535\u053e\3\2\2\2\u0536\u0537")
        buf.write("\f\3\2\2\u0537\u0538\5\u00a0Q\2\u0538\u0539\5\u0096L\4")
        buf.write("\u0539\u053e\3\2\2\2\u053a\u053b\f\r\2\2\u053b\u053c\7")
        buf.write("\31\2\2\u053c\u053e\58\35\2\u053d\u0532\3\2\2\2\u053d")
        buf.write("\u0536\3\2\2\2\u053d\u053a\3\2\2\2\u053e\u0541\3\2\2\2")
        buf.write("\u053f\u053d\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0097\3")
        buf.write("\2\2\2\u0541\u053f\3\2\2\2\u0542\u0543\t&\2\2\u0543\u0099")
        buf.write("\3\2\2\2\u0544\u0555\7\u03aa\2\2\u0545\u0555\7\u03ab\2")
        buf.write("\2\u0546\u0555\7\u03ac\2\2\u0547\u0548\7\u03ac\2\2\u0548")
        buf.write("\u0555\7\u03aa\2\2\u0549\u054a\7\u03ab\2\2\u054a\u0555")
        buf.write("\7\u03aa\2\2\u054b\u054c\7\u03aa\2\2\u054c\u0555\7\u03aa")
        buf.write("\2\2\u054d\u054e\7\u03ac\2\2\u054e\u0555\7\u03ab\2\2\u054f")
        buf.write("\u0550\7\u03ad\2\2\u0550\u0555\7\u03aa\2\2\u0551\u0552")
        buf.write("\7\u03ac\2\2\u0552\u0553\7\u03aa\2\2\u0553\u0555\7\u03ab")
        buf.write("\2\2\u0554\u0544\3\2\2\2\u0554\u0545\3\2\2\2\u0554\u0546")
        buf.write("\3\2\2\2\u0554\u0547\3\2\2\2\u0554\u0549\3\2\2\2\u0554")
        buf.write("\u054b\3\2\2\2\u0554\u054d\3\2\2\2\u0554\u054f\3\2\2\2")
        buf.write("\u0554\u0551\3\2\2\2\u0555\u009b\3\2\2\2\u0556\u055e\7")
        buf.write("\13\2\2\u0557\u0558\7\u03b0\2\2\u0558\u055e\7\u03b0\2")
        buf.write("\2\u0559\u055e\7\u00a9\2\2\u055a\u055e\7j\2\2\u055b\u055c")
        buf.write("\7\u03af\2\2\u055c\u055e\7\u03af\2\2\u055d\u0556\3\2\2")
        buf.write("\2\u055d\u0557\3\2\2\2\u055d\u0559\3\2\2\2\u055d\u055a")
        buf.write("\3\2\2\2\u055d\u055b\3\2\2\2\u055e\u009d\3\2\2\2\u055f")
        buf.write("\u0560\7\u03ac\2\2\u0560\u0567\7\u03ac\2\2\u0561\u0562")
        buf.write("\7\u03ab\2\2\u0562\u0567\7\u03ab\2\2\u0563\u0567\7\u03b0")
        buf.write("\2\2\u0564\u0567\7\u03b1\2\2\u0565\u0567\7\u03af\2\2\u0566")
        buf.write("\u055f\3\2\2\2\u0566\u0561\3\2\2\2\u0566\u0563\3\2\2\2")
        buf.write("\u0566\u0564\3\2\2\2\u0566\u0565\3\2\2\2\u0567\u009f\3")
        buf.write("\2\2\2\u0568\u0569\t\'\2\2\u0569\u00a1\3\2\2\2\u056a\u056b")
        buf.write("\t(\2\2\u056b\u00a3\3\2\2\2\u056c\u056d\t)\2\2\u056d\u00a5")
        buf.write("\3\2\2\2\u056e\u056f\t*\2\2\u056f\u00a7\3\2\2\2\u0570")
        buf.write("\u0571\t+\2\2\u0571\u00a9\3\2\2\2\u0572\u0573\t,\2\2\u0573")
        buf.write("\u00ab\3\2\2\2\u0574\u0575\t-\2\2\u0575\u00ad\3\2\2\2")
        buf.write("\u0576\u0577\t.\2\2\u0577\u00af\3\2\2\2\u00c0\u00b2\u00bc")
        buf.write("\u00c0\u00c4\u00c6\u00c9\u00cc\u00d2\u00d6\u00d9\u00dc")
        buf.write("\u00df\u00e1\u00ea\u00ef\u00f6\u00fd\u0105\u010a\u010e")
        buf.write("\u0111\u0118\u011b\u0123\u0129\u0134\u0137\u0142\u0148")
        buf.write("\u014c\u0157\u015c\u015e\u0162\u016c\u0172\u0177\u017a")
        buf.write("\u017d\u0181\u0187\u018b\u0191\u0197\u01a0\u01a3\u01a7")
        buf.write("\u01aa\u01ae\u01b2\u01b5\u01b7\u01bd\u01c6\u01cb\u01cd")
        buf.write("\u01d1\u01d5\u01db\u01e2\u01e8\u01ef\u01f1\u01f8\u01fb")
        buf.write("\u0205\u0209\u021d\u0224\u0226\u022d\u022f\u0233\u0238")
        buf.write("\u0243\u0248\u024e\u0251\u0255\u025a\u025d\u0261\u0265")
        buf.write("\u0267\u026c\u0271\u027c\u027f\u028e\u0292\u0295\u029a")
        buf.write("\u029e\u02a2\u02a5\u02a8\u02ac\u02af\u02b2\u02b6\u02b9")
        buf.write("\u02bc\u02c1\u02ca\u02cf\u02d4\u02d8\u02db\u02df\u02e3")
        buf.write("\u02e8\u02ed\u02f1\u02f3\u0303\u030c\u0314\u031d\u0327")
        buf.write("\u032f\u0337\u033f\u0347\u0350\u0352\u0357\u035a\u035f")
        buf.write("\u0362\u0366\u0374\u037b\u0380\u03a2\u03a6\u03ae\u03b2")
        buf.write("\u03bb\u03c3\u03c8\u03d0\u03d5\u03da\u03dc\u03e5\u03ea")
        buf.write("\u03f2\u03f7\u03ff\u0407\u040a\u0414\u041f\u042c\u0434")
        buf.write("\u0438\u043d\u0446\u0449\u0455\u045d\u0467\u046a\u046e")
        buf.write("\u0472\u048b\u0496\u049d\u04a1\u04a8\u04b0\u04b5\u04bd")
        buf.write("\u04c3\u04cd\u04da\u04e0\u04e6\u04f6\u04fc\u04fe\u0500")
        buf.write("\u0513\u051f\u0530\u053d\u053f\u0554\u055d\u0566")
        return buf.getvalue()


class SelectSQLParser ( Parser ):

    grammarFileName = "SelectSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ALTER'", "'ANALYZE'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CALL'", "'CASCADE'", 
                     "<INVALID>", "<INVALID>", "'CHANGE'", "'CHARACTER'", 
                     "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
                     "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
                     "<INVALID>", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
                     "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", 
                     "'DELETE'", "<INVALID>", "'DESCRIBE'", "'DETERMINISTIC'", 
                     "<INVALID>", "'DISTINCTROW'", "'DROP'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ENCLOSED'", "'ESCAPED'", 
                     "<INVALID>", "'EXIT'", "'EXPLAIN'", "<INVALID>", "'FETCH'", 
                     "<INVALID>", "'FORCE'", "'FOREIGN'", "<INVALID>", "'FULLTEXT'", 
                     "'GRANT'", "<INVALID>", "<INVALID>", "'HIGH_PRIORITY'", 
                     "<INVALID>", "'IGNORE'", "<INVALID>", "<INVALID>", 
                     "'INFILE'", "<INVALID>", "'INOUT'", "'INSERT'", "'INTERVAL'", 
                     "<INVALID>", "<INVALID>", "'ITERATE'", "<INVALID>", 
                     "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'LINEAR'", 
                     "'LINES'", "'LOAD'", "'LOCK'", "<INVALID>", "'LOW_PRIORITY'", 
                     "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                     "<INVALID>", "<INVALID>", "'MODIFIES'", "<INVALID>", 
                     "<INVALID>", "'NO_WRITE_TO_BINLOG'", "<INVALID>", "<INVALID>", 
                     "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'OUTFILE'", 
                     "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
                     "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "<INVALID>", 
                     "'RELEASE'", "'RENAME'", "'REPEAT'", "<INVALID>", "'REQUIRE'", 
                     "'RESTRICT'", "'RETURN'", "'REVOKE'", "<INVALID>", 
                     "'RLIKE'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
                     "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", 
                     "'STARTING'", "'STRAIGHT_JOIN'", "<INVALID>", "'TERMINATED'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'TRIGGER'", 
                     "<INVALID>", "'UNDO'", "<INVALID>", "'UNIQUE'", "'UNLOCK'", 
                     "<INVALID>", "'UPDATE'", "'USAGE'", "'USE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'WRITE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", 
                     "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
                     "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
                     "'DAY_MICROSECOND'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'VAR_POP'", "'VAR_SAMP'", 
                     "'VARIANCE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'LOCALTIME'", "<INVALID>", "'CURTIME'", "'DATE_ADD'", 
                     "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "<INVALID>", 
                     "'POSITION'", "<INVALID>", "<INVALID>", "'SYSDATE'", 
                     "<INVALID>", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
                     "'ACCOUNT'", "'ACTION'", "<INVALID>", "'AGGREGATE'", 
                     "'ALGORITHM'", "<INVALID>", "<INVALID>", "'AUTHORS'", 
                     "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
                     "'AVG_ROW_LENGTH'", "<INVALID>", "'BINLOG'", "'BIT'", 
                     "'BLOCK'", "<INVALID>", "<INVALID>", "'BTREE'", "'CACHE'", 
                     "<INVALID>", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "<INVALID>", 
                     "'CIPHER'", "'CLIENT'", "'CLOSE'", "<INVALID>", "'CODE'", 
                     "'COLUMNS'", "'COLUMN_FORMAT'", "<INVALID>", "'COMMIT'", 
                     "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
                     "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", "<INVALID>", 
                     "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'DATA'", 
                     "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
                     "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", 
                     "'DISABLE'", "'DISCARD'", "'DISK'", "<INVALID>", "'DUMPFILE'", 
                     "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
                     "<INVALID>", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
                     "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", 
                     "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
                     "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", 
                     "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "<INVALID>", 
                     "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", 
                     "<INVALID>", "<INVALID>", "'GENERAL'", "'GLOBAL'", 
                     "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "<INVALID>", 
                     "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
                     "'IMPORT'", "<INVALID>", "'INITIAL_SIZE'", "'INPLACE'", 
                     "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVOKER'", 
                     "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
                     "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", 
                     "'LEAVES'", "<INVALID>", "'LEVEL'", "'LIST'", "'LOCAL'", 
                     "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
                     "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
                     "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
                     "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
                     "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", 
                     "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
                     "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                     "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
                     "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
                     "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", 
                     "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
                     "'MYSQL'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", 
                     "<INVALID>", "<INVALID>", "'NODEGROUP'", "<INVALID>", 
                     "'OFFLINE'", "<INVALID>", "'OJ'", "'OLD_PASSWORD'", 
                     "<INVALID>", "'ONLINE'", "<INVALID>", "'OPEN'", "'OPTIMIZER_COSTS'", 
                     "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", 
                     "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", 
                     "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
                     "'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", 
                     "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
                     "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
                     "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                     "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
                     "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
                     "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
                     "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
                     "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", 
                     "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", 
                     "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", 
                     "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", 
                     "'SHARE'", "'SHARED'", "<INVALID>", "'SIMPLE'", "'SLAVE'", 
                     "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", 
                     "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
                     "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", 
                     "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", 
                     "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
                     "'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", 
                     "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
                     "'SWITCHES'", "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", 
                     "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRIGGERS'", 
                     "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
                     "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
                     "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
                     "'VALUE'", "'VARIABLES'", "'VIEW'", "'WAIT'", "'WARNINGS'", 
                     "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", 
                     "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
                     "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
                     "'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", 
                     "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
                     "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'ARMSCII8'", 
                     "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
                     "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", 
                     "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", 
                     "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", 
                     "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
                     "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
                     "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", 
                     "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", 
                     "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", 
                     "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
                     "'PERFOMANCE_SCHEMA'", "'REPEATABLE'", "'COMMITTED'", 
                     "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
                     "'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", 
                     "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "<INVALID>", 
                     "'ACOS'", "<INVALID>", "<INVALID>", "'AES_DECRYPT'", 
                     "'AES_ENCRYPT'", "'AREA'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ASYMMETRIC_DECRYPT'", 
                     "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", 
                     "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BUFFER'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'COERCIBILITY'", "'COLLATION'", 
                     "'COMPRESS'", "<INVALID>", "<INVALID>", "'CONNECTION_ID'", 
                     "'CONV'", "'CONVERT_TZ'", "<INVALID>", "<INVALID>", 
                     "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
                     "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'DEGREES'", 
                     "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", "'DISJOINT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ENDPOINT'", 
                     "'ENVELOPE'", "<INVALID>", "<INVALID>", "'EXPORT_SET'", 
                     "'EXTERIORRING'", "'EXTRACTVALUE'", "'FIELD'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'FOUND_ROWS'", "'FROM_BASE64'", 
                     "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
                     "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
                     "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
                     "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", 
                     "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
                     "'GTID_SUBTRACT'", "<INVALID>", "<INVALID>", "'INET6_ATON'", 
                     "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "<INVALID>", 
                     "'INTERIORRINGN'", "'INTERSECTS'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IS_FREE_LOCK'", "'IS_IPV4'", 
                     "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
                     "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'LINEFROMTEXT'", "'LINEFROMWKB'", 
                     "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
                     "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", 
                     "<INVALID>", "'LPAD'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", 
                     "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
                     "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", 
                     "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
                     "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", 
                     "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
                     "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
                     "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "<INVALID>", 
                     "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", 
                     "'OCT'", "'OCTET_LENGTH'", "'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", 
                     "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", "'POINTFROMWKB'", 
                     "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
                     "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", 
                     "'RADIANS'", "<INVALID>", "'RANDOM_BYTES'", "'RELEASE_LOCK'", 
                     "<INVALID>", "<INVALID>", "'ROW_COUNT'", "'RPAD'", 
                     "<INVALID>", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", 
                     "'SHA1'", "'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
                     "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", 
                     "'STARTPOINT'", "<INVALID>", "<INVALID>", "'ST_AREA'", 
                     "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", 
                     "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
                     "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
                     "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", 
                     "'ST_EQUALS'", "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", 
                     "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'", 
                     "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
                     "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", 
                     "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'", 
                     "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
                     "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                     "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
                     "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
                     "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", 
                     "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
                     "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
                     "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", 
                     "'ST_Y'", "<INVALID>", "<INVALID>", "<INVALID>", "'SYSTEM_USER'", 
                     "'TAN'", "<INVALID>", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", 
                     "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", "'TO_BASE64'", 
                     "'TO_DAYS'", "'TO_SECONDS'", "<INVALID>", "'UNCOMPRESS'", 
                     "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", 
                     "'UPDATEXML'", "<INVALID>", "'UUID'", "'UUID_SHORT'", 
                     "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     "<INVALID>", "<INVALID>", "'WEIGHT_STRING'", "<INVALID>", 
                     "<INVALID>", "'Y'", "'X'", "':='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
                     "'/'", "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
                     "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", 
                     "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ADD", "ALL", "ALTER", "ANALYZE", 
                      "AND", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH", "BY", 
                      "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
                      "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_USER", 
                      "CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", 
                      "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
                      "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", 
                      "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", 
                      "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
                      "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
                      "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
                      "INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", 
                      "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
                      "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", 
                      "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
                      "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", 
                      "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON", "OPTIMIZE", 
                      "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
                      "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
                      "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
                      "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", 
                      "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
                      "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
                      "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
                      "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", 
                      "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
                      "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", 
                      "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
                      "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", 
                      "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", 
                      "BIGINT", "REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", 
                      "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", 
                      "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", 
                      "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", 
                      "LONGTEXT", "ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                      "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
                      "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
                      "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
                      "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", 
                      "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
                      "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
                      "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                      "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
                      "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
                      "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
                      "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                      "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                      "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", 
                      "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", 
                      "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
                      "CONCURRENT", "CONNECTION", "CONSISTENT", "CONTAINS", 
                      "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
                      "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", 
                      "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
                      "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
                      "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", 
                      "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
                      "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
                      "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", 
                      "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", 
                      "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
                      "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
                      "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
                      "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
                      "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", 
                      "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
                      "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
                      "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
                      "LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", 
                      "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
                      "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
                      "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
                      "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", 
                      "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
                      "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", 
                      "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
                      "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
                      "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
                      "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", 
                      "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", 
                      "OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
                      "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", 
                      "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
                      "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                      "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
                      "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
                      "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
                      "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
                      "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
                      "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                      "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                      "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", 
                      "RESUME", "RETURNS", "ROLLBACK", "ROLLUP", "ROTATE", 
                      "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", 
                      "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", 
                      "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
                      "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
                      "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", 
                      "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
                      "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
                      "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
                      "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
                      "SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", 
                      "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
                      "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", 
                      "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", 
                      "VARIABLES", "VIEW", "WAIT", "WARNINGS", "WITHOUT", 
                      "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", 
                      "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
                      "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
                      "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", 
                      "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "ARMSCII8", 
                      "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
                      "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
                      "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", 
                      "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", 
                      "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", 
                      "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
                      "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
                      "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
                      "MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", 
                      "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", 
                      "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", 
                      "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                      "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                      "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
                      "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
                      "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
                      "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
                      "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
                      "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
                      "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                      "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", 
                      "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
                      "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", 
                      "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
                      "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SESSION_USER", "SHA", "SHA1", "SHA2", "SIGN", "SIN", 
                      "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
                      "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                      "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                      "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                      "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", 
                      "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", 
                      "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                      "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                      "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                      "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                      "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                      "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                      "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
                      "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                      "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", 
                      "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
                      "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", 
                      "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
                      "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
                      "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
                      "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
                      "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
                      "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                      "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                      "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                      "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_selectStatement = 1
    RULE_orderByClause = 2
    RULE_orderByExpression = 3
    RULE_tableSources = 4
    RULE_tableSource = 5
    RULE_tableSourceItem = 6
    RULE_indexHint = 7
    RULE_indexHintType = 8
    RULE_joinPart = 9
    RULE_queryExpression = 10
    RULE_querySpecification = 11
    RULE_unionParenthesis = 12
    RULE_unionStatement = 13
    RULE_selectSpec = 14
    RULE_selectElements = 15
    RULE_selectElement = 16
    RULE_fromClause = 17
    RULE_groupByItem = 18
    RULE_limitClause = 19
    RULE_fullId = 20
    RULE_tableName = 21
    RULE_fullColumnName = 22
    RULE_indexColumnName = 23
    RULE_userName = 24
    RULE_variable = 25
    RULE_charsetName = 26
    RULE_collationName = 27
    RULE_engineName = 28
    RULE_uuidSet = 29
    RULE_xid = 30
    RULE_xuidStringId = 31
    RULE_authPlugin = 32
    RULE_uid = 33
    RULE_simpleId = 34
    RULE_dottedId = 35
    RULE_decimalLiteral = 36
    RULE_fileSizeLiteral = 37
    RULE_stringLiteral = 38
    RULE_booleanLiteral = 39
    RULE_hexadecimalLiteral = 40
    RULE_nullNotnull = 41
    RULE_constant = 42
    RULE_intervalType = 43
    RULE_dataType = 44
    RULE_convertedDataType = 45
    RULE_lengthOneDimension = 46
    RULE_lengthTwoDimension = 47
    RULE_lengthTwoOptionalDimension = 48
    RULE_uidList = 49
    RULE_tables = 50
    RULE_indexColumnNames = 51
    RULE_expressions = 52
    RULE_expressionsWithDefaults = 53
    RULE_constants = 54
    RULE_simpleStrings = 55
    RULE_userVariables = 56
    RULE_defaultValue = 57
    RULE_currentTimestamp = 58
    RULE_expressionOrDefault = 59
    RULE_ifExists = 60
    RULE_ifNotExists = 61
    RULE_functionCall = 62
    RULE_specificFunction = 63
    RULE_caseFuncAlternative = 64
    RULE_levelsInWeightString = 65
    RULE_levelInWeightListElement = 66
    RULE_aggregateWindowedFunction = 67
    RULE_scalarFunctionName = 68
    RULE_passwordFunctionClause = 69
    RULE_functionArgs = 70
    RULE_functionArg = 71
    RULE_expression = 72
    RULE_predicate = 73
    RULE_expressionAtom = 74
    RULE_unaryOperator = 75
    RULE_comparisonOperator = 76
    RULE_logicalOperator = 77
    RULE_bitOperator = 78
    RULE_mathOperator = 79
    RULE_charsetNameBase = 80
    RULE_transactionLevelBase = 81
    RULE_privilegesBase = 82
    RULE_intervalTypeBase = 83
    RULE_dataTypeBase = 84
    RULE_keywordsCanBeId = 85
    RULE_functionNameBase = 86

    ruleNames =  [ "root", "selectStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "queryExpression", "querySpecification", 
                   "unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
                   "selectElement", "fromClause", "groupByItem", "limitClause", 
                   "fullId", "tableName", "fullColumnName", "indexColumnName", 
                   "userName", "variable", "charsetName", "collationName", 
                   "engineName", "uuidSet", "xid", "xuidStringId", "authPlugin", 
                   "uid", "simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", 
                   "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
                   "nullNotnull", "constant", "intervalType", "dataType", 
                   "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthTwoOptionalDimension", "uidList", "tables", "indexColumnNames", 
                   "expressions", "expressionsWithDefaults", "constants", 
                   "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", 
                   "specificFunction", "caseFuncAlternative", "levelsInWeightString", 
                   "levelInWeightListElement", "aggregateWindowedFunction", 
                   "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
                   "functionArg", "expression", "predicate", "expressionAtom", 
                   "unaryOperator", "comparisonOperator", "logicalOperator", 
                   "bitOperator", "mathOperator", "charsetNameBase", "transactionLevelBase", 
                   "privilegesBase", "intervalTypeBase", "dataTypeBase", 
                   "keywordsCanBeId", "functionNameBase" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ADD=5
    ALL=6
    ALTER=7
    ANALYZE=8
    AND=9
    AS=10
    ASC=11
    BEFORE=12
    BETWEEN=13
    BOTH=14
    BY=15
    CALL=16
    CASCADE=17
    CASE=18
    CAST=19
    CHANGE=20
    CHARACTER=21
    CHECK=22
    COLLATE=23
    COLUMN=24
    CONDITION=25
    CONSTRAINT=26
    CONTINUE=27
    CONVERT=28
    CREATE=29
    CROSS=30
    CURRENT_USER=31
    CURSOR=32
    DATABASE=33
    DATABASES=34
    DECLARE=35
    DEFAULT=36
    DELAYED=37
    DELETE=38
    DESC=39
    DESCRIBE=40
    DETERMINISTIC=41
    DISTINCT=42
    DISTINCTROW=43
    DROP=44
    EACH=45
    ELSE=46
    ELSEIF=47
    ENCLOSED=48
    ESCAPED=49
    EXISTS=50
    EXIT=51
    EXPLAIN=52
    FALSE=53
    FETCH=54
    FOR=55
    FORCE=56
    FOREIGN=57
    FROM=58
    FULLTEXT=59
    GRANT=60
    GROUP=61
    HAVING=62
    HIGH_PRIORITY=63
    IF=64
    IGNORE=65
    IN=66
    INDEX=67
    INFILE=68
    INNER=69
    INOUT=70
    INSERT=71
    INTERVAL=72
    INTO=73
    IS=74
    ITERATE=75
    JOIN=76
    KEY=77
    KEYS=78
    KILL=79
    LEADING=80
    LEAVE=81
    LEFT=82
    LIKE=83
    LIMIT=84
    LINEAR=85
    LINES=86
    LOAD=87
    LOCK=88
    LOOP=89
    LOW_PRIORITY=90
    MASTER_BIND=91
    MASTER_SSL_VERIFY_SERVER_CERT=92
    MATCH=93
    MAXVALUE=94
    MODIFIES=95
    NATURAL=96
    NOT=97
    NO_WRITE_TO_BINLOG=98
    NULL_LITERAL=99
    ON=100
    OPTIMIZE=101
    OPTION=102
    OPTIONALLY=103
    OR=104
    ORDER=105
    OUT=106
    OUTER=107
    OUTFILE=108
    PARTITION=109
    PRIMARY=110
    PROCEDURE=111
    PURGE=112
    RANGE=113
    READ=114
    READS=115
    REFERENCES=116
    REGEXP=117
    RELEASE=118
    RENAME=119
    REPEAT=120
    REPLACE=121
    REQUIRE=122
    RESTRICT=123
    RETURN=124
    REVOKE=125
    RIGHT=126
    RLIKE=127
    SCHEMA=128
    SCHEMAS=129
    SELECT=130
    SET=131
    SEPARATOR=132
    SHOW=133
    SPATIAL=134
    SQL=135
    SQLEXCEPTION=136
    SQLSTATE=137
    SQLWARNING=138
    SQL_BIG_RESULT=139
    SQL_CALC_FOUND_ROWS=140
    SQL_SMALL_RESULT=141
    SSL=142
    STARTING=143
    STRAIGHT_JOIN=144
    TABLE=145
    TERMINATED=146
    THEN=147
    TO=148
    TRAILING=149
    TRIGGER=150
    TRUE=151
    UNDO=152
    UNION=153
    UNIQUE=154
    UNLOCK=155
    UNSIGNED=156
    UPDATE=157
    USAGE=158
    USE=159
    USING=160
    VALUES=161
    WHEN=162
    WHERE=163
    WHILE=164
    WITH=165
    WRITE=166
    XOR=167
    ZEROFILL=168
    TINYINT=169
    SMALLINT=170
    MEDIUMINT=171
    INT=172
    INTEGER=173
    BIGINT=174
    REAL=175
    DOUBLE=176
    FLOAT=177
    DECIMAL=178
    NUMERIC=179
    DATE=180
    TIME=181
    TIMESTAMP=182
    DATETIME=183
    YEAR=184
    CHAR=185
    VARCHAR=186
    BINARY=187
    VARBINARY=188
    TINYBLOB=189
    BLOB=190
    MEDIUMBLOB=191
    LONGBLOB=192
    TINYTEXT=193
    TEXT=194
    MEDIUMTEXT=195
    LONGTEXT=196
    ENUM=197
    YEAR_MONTH=198
    DAY_HOUR=199
    DAY_MINUTE=200
    DAY_SECOND=201
    HOUR_MINUTE=202
    HOUR_SECOND=203
    MINUTE_SECOND=204
    SECOND_MICROSECOND=205
    MINUTE_MICROSECOND=206
    HOUR_MICROSECOND=207
    DAY_MICROSECOND=208
    AVG=209
    BIT_AND=210
    BIT_OR=211
    BIT_XOR=212
    COUNT=213
    GROUP_CONCAT=214
    MAX=215
    MIN=216
    STD=217
    STDDEV=218
    STDDEV_POP=219
    STDDEV_SAMP=220
    SUM=221
    VAR_POP=222
    VAR_SAMP=223
    VARIANCE=224
    CURRENT_DATE=225
    CURRENT_TIME=226
    CURRENT_TIMESTAMP=227
    LOCALTIME=228
    CURDATE=229
    CURTIME=230
    DATE_ADD=231
    DATE_SUB=232
    EXTRACT=233
    LOCALTIMESTAMP=234
    NOW=235
    POSITION=236
    SUBSTR=237
    SUBSTRING=238
    SYSDATE=239
    TRIM=240
    UTC_DATE=241
    UTC_TIME=242
    UTC_TIMESTAMP=243
    ACCOUNT=244
    ACTION=245
    AFTER=246
    AGGREGATE=247
    ALGORITHM=248
    ANY=249
    AT=250
    AUTHORS=251
    AUTOCOMMIT=252
    AUTOEXTEND_SIZE=253
    AUTO_INCREMENT=254
    AVG_ROW_LENGTH=255
    BEGIN=256
    BINLOG=257
    BIT=258
    BLOCK=259
    BOOL=260
    BOOLEAN=261
    BTREE=262
    CACHE=263
    CASCADED=264
    CHAIN=265
    CHANGED=266
    CHANNEL=267
    CHECKSUM=268
    CIPHER=269
    CLIENT=270
    CLOSE=271
    COALESCE=272
    CODE=273
    COLUMNS=274
    COLUMN_FORMAT=275
    COMMENT=276
    COMMIT=277
    COMPACT=278
    COMPLETION=279
    COMPRESSED=280
    COMPRESSION=281
    CONCURRENT=282
    CONNECTION=283
    CONSISTENT=284
    CONTAINS=285
    CONTEXT=286
    CONTRIBUTORS=287
    COPY=288
    CPU=289
    DATA=290
    DATAFILE=291
    DEALLOCATE=292
    DEFAULT_AUTH=293
    DEFINER=294
    DELAY_KEY_WRITE=295
    DES_KEY_FILE=296
    DIRECTORY=297
    DISABLE=298
    DISCARD=299
    DISK=300
    DO=301
    DUMPFILE=302
    DUPLICATE=303
    DYNAMIC=304
    ENABLE=305
    ENCRYPTION=306
    END=307
    ENDS=308
    ENGINE=309
    ENGINES=310
    ERROR=311
    ERRORS=312
    ESCAPE=313
    EVEN=314
    EVENT=315
    EVENTS=316
    EVERY=317
    EXCHANGE=318
    EXCLUSIVE=319
    EXPIRE=320
    EXPORT=321
    EXTENDED=322
    EXTENT_SIZE=323
    FAST=324
    FAULTS=325
    FIELDS=326
    FILE_BLOCK_SIZE=327
    FILTER=328
    FIRST=329
    FIXED=330
    FLUSH=331
    FOLLOWS=332
    FOUND=333
    FULL=334
    FUNCTION=335
    GENERAL=336
    GLOBAL=337
    GRANTS=338
    GROUP_REPLICATION=339
    HANDLER=340
    HASH=341
    HELP=342
    HOST=343
    HOSTS=344
    IDENTIFIED=345
    IGNORE_SERVER_IDS=346
    IMPORT=347
    INDEXES=348
    INITIAL_SIZE=349
    INPLACE=350
    INSERT_METHOD=351
    INSTALL=352
    INSTANCE=353
    INVOKER=354
    IO=355
    IO_THREAD=356
    IPC=357
    ISOLATION=358
    ISSUER=359
    JSON=360
    KEY_BLOCK_SIZE=361
    LANGUAGE=362
    LAST=363
    LEAVES=364
    LESS=365
    LEVEL=366
    LIST=367
    LOCAL=368
    LOGFILE=369
    LOGS=370
    MASTER=371
    MASTER_AUTO_POSITION=372
    MASTER_CONNECT_RETRY=373
    MASTER_DELAY=374
    MASTER_HEARTBEAT_PERIOD=375
    MASTER_HOST=376
    MASTER_LOG_FILE=377
    MASTER_LOG_POS=378
    MASTER_PASSWORD=379
    MASTER_PORT=380
    MASTER_RETRY_COUNT=381
    MASTER_SSL=382
    MASTER_SSL_CA=383
    MASTER_SSL_CAPATH=384
    MASTER_SSL_CERT=385
    MASTER_SSL_CIPHER=386
    MASTER_SSL_CRL=387
    MASTER_SSL_CRLPATH=388
    MASTER_SSL_KEY=389
    MASTER_TLS_VERSION=390
    MASTER_USER=391
    MAX_CONNECTIONS_PER_HOUR=392
    MAX_QUERIES_PER_HOUR=393
    MAX_ROWS=394
    MAX_SIZE=395
    MAX_UPDATES_PER_HOUR=396
    MAX_USER_CONNECTIONS=397
    MEDIUM=398
    MERGE=399
    MID=400
    MIGRATE=401
    MIN_ROWS=402
    MODE=403
    MODIFY=404
    MUTEX=405
    MYSQL=406
    NAME=407
    NAMES=408
    NCHAR=409
    NEVER=410
    NEXT=411
    NO=412
    NODEGROUP=413
    NONE=414
    OFFLINE=415
    OFFSET=416
    OJ=417
    OLD_PASSWORD=418
    ONE=419
    ONLINE=420
    ONLY=421
    OPEN=422
    OPTIMIZER_COSTS=423
    OPTIONS=424
    OWNER=425
    PACK_KEYS=426
    PAGE=427
    PARSER=428
    PARTIAL=429
    PARTITIONING=430
    PARTITIONS=431
    PASSWORD=432
    PHASE=433
    PLUGIN=434
    PLUGIN_DIR=435
    PLUGINS=436
    PORT=437
    PRECEDES=438
    PREPARE=439
    PRESERVE=440
    PREV=441
    PROCESSLIST=442
    PROFILE=443
    PROFILES=444
    PROXY=445
    QUERY=446
    QUICK=447
    REBUILD=448
    RECOVER=449
    REDO_BUFFER_SIZE=450
    REDUNDANT=451
    RELAY=452
    RELAY_LOG_FILE=453
    RELAY_LOG_POS=454
    RELAYLOG=455
    REMOVE=456
    REORGANIZE=457
    REPAIR=458
    REPLICATE_DO_DB=459
    REPLICATE_DO_TABLE=460
    REPLICATE_IGNORE_DB=461
    REPLICATE_IGNORE_TABLE=462
    REPLICATE_REWRITE_DB=463
    REPLICATE_WILD_DO_TABLE=464
    REPLICATE_WILD_IGNORE_TABLE=465
    REPLICATION=466
    RESET=467
    RESUME=468
    RETURNS=469
    ROLLBACK=470
    ROLLUP=471
    ROTATE=472
    ROW=473
    ROWS=474
    ROW_FORMAT=475
    SAVEPOINT=476
    SCHEDULE=477
    SECURITY=478
    SERVER=479
    SESSION=480
    SHARE=481
    SHARED=482
    SIGNED=483
    SIMPLE=484
    SLAVE=485
    SLOW=486
    SNAPSHOT=487
    SOCKET=488
    SOME=489
    SONAME=490
    SOUNDS=491
    SOURCE=492
    SQL_AFTER_GTIDS=493
    SQL_AFTER_MTS_GAPS=494
    SQL_BEFORE_GTIDS=495
    SQL_BUFFER_RESULT=496
    SQL_CACHE=497
    SQL_NO_CACHE=498
    SQL_THREAD=499
    START=500
    STARTS=501
    STATS_AUTO_RECALC=502
    STATS_PERSISTENT=503
    STATS_SAMPLE_PAGES=504
    STATUS=505
    STOP=506
    STORAGE=507
    STRING=508
    SUBJECT=509
    SUBPARTITION=510
    SUBPARTITIONS=511
    SUSPEND=512
    SWAPS=513
    SWITCHES=514
    TABLESPACE=515
    TEMPORARY=516
    TEMPTABLE=517
    THAN=518
    TRADITIONAL=519
    TRANSACTION=520
    TRIGGERS=521
    TRUNCATE=522
    UNDEFINED=523
    UNDOFILE=524
    UNDO_BUFFER_SIZE=525
    UNINSTALL=526
    UNKNOWN=527
    UNTIL=528
    UPGRADE=529
    USER=530
    USE_FRM=531
    USER_RESOURCES=532
    VALIDATION=533
    VALUE=534
    VARIABLES=535
    VIEW=536
    WAIT=537
    WARNINGS=538
    WITHOUT=539
    WORK=540
    WRAPPER=541
    X509=542
    XA=543
    XML=544
    EUR=545
    USA=546
    JIS=547
    ISO=548
    INTERNAL=549
    QUARTER=550
    MONTH=551
    DAY=552
    HOUR=553
    MINUTE=554
    WEEK=555
    SECOND=556
    MICROSECOND=557
    TABLES=558
    ROUTINE=559
    EXECUTE=560
    FILE=561
    PROCESS=562
    RELOAD=563
    SHUTDOWN=564
    SUPER=565
    PRIVILEGES=566
    ARMSCII8=567
    ASCII=568
    BIG5=569
    CP1250=570
    CP1251=571
    CP1256=572
    CP1257=573
    CP850=574
    CP852=575
    CP866=576
    CP932=577
    DEC8=578
    EUCJPMS=579
    EUCKR=580
    GB2312=581
    GBK=582
    GEOSTD8=583
    GREEK=584
    HEBREW=585
    HP8=586
    KEYBCS2=587
    KOI8R=588
    KOI8U=589
    LATIN1=590
    LATIN2=591
    LATIN5=592
    LATIN7=593
    MACCE=594
    MACROMAN=595
    SJIS=596
    SWE7=597
    TIS620=598
    UCS2=599
    UJIS=600
    UTF16=601
    UTF16LE=602
    UTF32=603
    UTF8=604
    UTF8MB3=605
    UTF8MB4=606
    ARCHIVE=607
    BLACKHOLE=608
    CSV=609
    FEDERATED=610
    INNODB=611
    MEMORY=612
    MRG_MYISAM=613
    MYISAM=614
    NDB=615
    NDBCLUSTER=616
    PERFOMANCE_SCHEMA=617
    REPEATABLE=618
    COMMITTED=619
    UNCOMMITTED=620
    SERIALIZABLE=621
    GEOMETRYCOLLECTION=622
    LINESTRING=623
    MULTILINESTRING=624
    MULTIPOINT=625
    MULTIPOLYGON=626
    POINT=627
    POLYGON=628
    ABS=629
    ACOS=630
    ADDDATE=631
    ADDTIME=632
    AES_DECRYPT=633
    AES_ENCRYPT=634
    AREA=635
    ASBINARY=636
    ASIN=637
    ASTEXT=638
    ASWKB=639
    ASWKT=640
    ASYMMETRIC_DECRYPT=641
    ASYMMETRIC_DERIVE=642
    ASYMMETRIC_ENCRYPT=643
    ASYMMETRIC_SIGN=644
    ASYMMETRIC_VERIFY=645
    ATAN=646
    ATAN2=647
    BENCHMARK=648
    BIN=649
    BIT_COUNT=650
    BIT_LENGTH=651
    BUFFER=652
    CEIL=653
    CEILING=654
    CENTROID=655
    CHARACTER_LENGTH=656
    CHARSET=657
    CHAR_LENGTH=658
    COERCIBILITY=659
    COLLATION=660
    COMPRESS=661
    CONCAT=662
    CONCAT_WS=663
    CONNECTION_ID=664
    CONV=665
    CONVERT_TZ=666
    COS=667
    COT=668
    CRC32=669
    CREATE_ASYMMETRIC_PRIV_KEY=670
    CREATE_ASYMMETRIC_PUB_KEY=671
    CREATE_DH_PARAMETERS=672
    CREATE_DIGEST=673
    CROSSES=674
    DATEDIFF=675
    DATE_FORMAT=676
    DAYNAME=677
    DAYOFMONTH=678
    DAYOFWEEK=679
    DAYOFYEAR=680
    DECODE=681
    DEGREES=682
    DES_DECRYPT=683
    DES_ENCRYPT=684
    DIMENSION=685
    DISJOINT=686
    ELT=687
    ENCODE=688
    ENCRYPT=689
    ENDPOINT=690
    ENVELOPE=691
    EQUALS=692
    EXP=693
    EXPORT_SET=694
    EXTERIORRING=695
    EXTRACTVALUE=696
    FIELD=697
    FIND_IN_SET=698
    FLOOR=699
    FORMAT=700
    FOUND_ROWS=701
    FROM_BASE64=702
    FROM_DAYS=703
    FROM_UNIXTIME=704
    GEOMCOLLFROMTEXT=705
    GEOMCOLLFROMWKB=706
    GEOMETRYCOLLECTIONFROMTEXT=707
    GEOMETRYCOLLECTIONFROMWKB=708
    GEOMETRYFROMTEXT=709
    GEOMETRYFROMWKB=710
    GEOMETRYN=711
    GEOMETRYTYPE=712
    GEOMFROMTEXT=713
    GEOMFROMWKB=714
    GET_FORMAT=715
    GET_LOCK=716
    GLENGTH=717
    GREATEST=718
    GTID_SUBSET=719
    GTID_SUBTRACT=720
    HEX=721
    IFNULL=722
    INET6_ATON=723
    INET6_NTOA=724
    INET_ATON=725
    INET_NTOA=726
    INSTR=727
    INTERIORRINGN=728
    INTERSECTS=729
    ISCLOSED=730
    ISEMPTY=731
    ISNULL=732
    ISSIMPLE=733
    IS_FREE_LOCK=734
    IS_IPV4=735
    IS_IPV4_COMPAT=736
    IS_IPV4_MAPPED=737
    IS_IPV6=738
    IS_USED_LOCK=739
    LAST_INSERT_ID=740
    LCASE=741
    LEAST=742
    LENGTH=743
    LINEFROMTEXT=744
    LINEFROMWKB=745
    LINESTRINGFROMTEXT=746
    LINESTRINGFROMWKB=747
    LN=748
    LOAD_FILE=749
    LOCATE=750
    LOG=751
    LOG10=752
    LOG2=753
    LOWER=754
    LPAD=755
    LTRIM=756
    MAKEDATE=757
    MAKETIME=758
    MAKE_SET=759
    MASTER_POS_WAIT=760
    MBRCONTAINS=761
    MBRDISJOINT=762
    MBREQUAL=763
    MBRINTERSECTS=764
    MBROVERLAPS=765
    MBRTOUCHES=766
    MBRWITHIN=767
    MD5=768
    MLINEFROMTEXT=769
    MLINEFROMWKB=770
    MONTHNAME=771
    MPOINTFROMTEXT=772
    MPOINTFROMWKB=773
    MPOLYFROMTEXT=774
    MPOLYFROMWKB=775
    MULTILINESTRINGFROMTEXT=776
    MULTILINESTRINGFROMWKB=777
    MULTIPOINTFROMTEXT=778
    MULTIPOINTFROMWKB=779
    MULTIPOLYGONFROMTEXT=780
    MULTIPOLYGONFROMWKB=781
    NAME_CONST=782
    NULLIF=783
    NUMGEOMETRIES=784
    NUMINTERIORRINGS=785
    NUMPOINTS=786
    OCT=787
    OCTET_LENGTH=788
    ORD=789
    OVERLAPS=790
    PERIOD_ADD=791
    PERIOD_DIFF=792
    PI=793
    POINTFROMTEXT=794
    POINTFROMWKB=795
    POINTN=796
    POLYFROMTEXT=797
    POLYFROMWKB=798
    POLYGONFROMTEXT=799
    POLYGONFROMWKB=800
    POW=801
    POWER=802
    QUOTE=803
    RADIANS=804
    RAND=805
    RANDOM_BYTES=806
    RELEASE_LOCK=807
    REVERSE=808
    ROUND=809
    ROW_COUNT=810
    RPAD=811
    RTRIM=812
    SEC_TO_TIME=813
    SESSION_USER=814
    SHA=815
    SHA1=816
    SHA2=817
    SIGN=818
    SIN=819
    SLEEP=820
    SOUNDEX=821
    SQL_THREAD_WAIT_AFTER_GTIDS=822
    SQRT=823
    SRID=824
    STARTPOINT=825
    STRCMP=826
    STR_TO_DATE=827
    ST_AREA=828
    ST_ASBINARY=829
    ST_ASTEXT=830
    ST_ASWKB=831
    ST_ASWKT=832
    ST_BUFFER=833
    ST_CENTROID=834
    ST_CONTAINS=835
    ST_CROSSES=836
    ST_DIFFERENCE=837
    ST_DIMENSION=838
    ST_DISJOINT=839
    ST_DISTANCE=840
    ST_ENDPOINT=841
    ST_ENVELOPE=842
    ST_EQUALS=843
    ST_EXTERIORRING=844
    ST_GEOMCOLLFROMTEXT=845
    ST_GEOMCOLLFROMTXT=846
    ST_GEOMCOLLFROMWKB=847
    ST_GEOMETRYCOLLECTIONFROMTEXT=848
    ST_GEOMETRYCOLLECTIONFROMWKB=849
    ST_GEOMETRYFROMTEXT=850
    ST_GEOMETRYFROMWKB=851
    ST_GEOMETRYN=852
    ST_GEOMETRYTYPE=853
    ST_GEOMFROMTEXT=854
    ST_GEOMFROMWKB=855
    ST_INTERIORRINGN=856
    ST_INTERSECTION=857
    ST_INTERSECTS=858
    ST_ISCLOSED=859
    ST_ISEMPTY=860
    ST_ISSIMPLE=861
    ST_LINEFROMTEXT=862
    ST_LINEFROMWKB=863
    ST_LINESTRINGFROMTEXT=864
    ST_LINESTRINGFROMWKB=865
    ST_NUMGEOMETRIES=866
    ST_NUMINTERIORRING=867
    ST_NUMINTERIORRINGS=868
    ST_NUMPOINTS=869
    ST_OVERLAPS=870
    ST_POINTFROMTEXT=871
    ST_POINTFROMWKB=872
    ST_POINTN=873
    ST_POLYFROMTEXT=874
    ST_POLYFROMWKB=875
    ST_POLYGONFROMTEXT=876
    ST_POLYGONFROMWKB=877
    ST_SRID=878
    ST_STARTPOINT=879
    ST_SYMDIFFERENCE=880
    ST_TOUCHES=881
    ST_UNION=882
    ST_WITHIN=883
    ST_X=884
    ST_Y=885
    SUBDATE=886
    SUBSTRING_INDEX=887
    SUBTIME=888
    SYSTEM_USER=889
    TAN=890
    TIMEDIFF=891
    TIMESTAMPADD=892
    TIMESTAMPDIFF=893
    TIME_FORMAT=894
    TIME_TO_SEC=895
    TOUCHES=896
    TO_BASE64=897
    TO_DAYS=898
    TO_SECONDS=899
    UCASE=900
    UNCOMPRESS=901
    UNCOMPRESSED_LENGTH=902
    UNHEX=903
    UNIX_TIMESTAMP=904
    UPDATEXML=905
    UPPER=906
    UUID=907
    UUID_SHORT=908
    VALIDATE_PASSWORD_STRENGTH=909
    VERSION=910
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=911
    WEEKDAY=912
    WEEKOFYEAR=913
    WEIGHT_STRING=914
    WITHIN=915
    YEARWEEK=916
    Y_FUNCTION=917
    X_FUNCTION=918
    VAR_ASSIGN=919
    PLUS_ASSIGN=920
    MINUS_ASSIGN=921
    MULT_ASSIGN=922
    DIV_ASSIGN=923
    MOD_ASSIGN=924
    AND_ASSIGN=925
    XOR_ASSIGN=926
    OR_ASSIGN=927
    STAR=928
    DIVIDE=929
    MODULE=930
    PLUS=931
    MINUSMINUS=932
    MINUS=933
    DIV=934
    MOD=935
    EQUAL_SYMBOL=936
    GREATER_SYMBOL=937
    LESS_SYMBOL=938
    EXCLAMATION_SYMBOL=939
    BIT_NOT_OP=940
    BIT_OR_OP=941
    BIT_AND_OP=942
    BIT_XOR_OP=943
    DOT=944
    LR_BRACKET=945
    RR_BRACKET=946
    COMMA=947
    SEMI=948
    AT_SIGN=949
    ZERO_DECIMAL=950
    ONE_DECIMAL=951
    TWO_DECIMAL=952
    SINGLE_QUOTE_SYMB=953
    DOUBLE_QUOTE_SYMB=954
    REVERSE_QUOTE_SYMB=955
    COLON_SYMB=956
    CHARSET_REVERSE_QOUTE_STRING=957
    FILESIZE_LITERAL=958
    START_NATIONAL_STRING_LITERAL=959
    STRING_LITERAL=960
    DECIMAL_LITERAL=961
    HEXADECIMAL_LITERAL=962
    REAL_LITERAL=963
    NULL_SPEC_LITERAL=964
    BIT_STRING=965
    STRING_CHARSET_NAME=966
    DOT_ID=967
    ID=968
    REVERSE_QUOTE_ID=969
    STRING_USER_NAME=970
    LOCAL_ID=971
    GLOBAL_ID=972
    ERROR_RECONGNIGION=973

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(SelectSQLParser.SelectStatementContext,0)


        def EOF(self):
            return self.getToken(SelectSQLParser.EOF, 0)

        def SEMI(self):
            return self.getToken(SelectSQLParser.SEMI, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = SelectSQLParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.selectStatement()
            self.state = 176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.SEMI:
                self.state = 175
                self.match(SelectSQLParser.SEMI)


            self.state = 178
            self.match(SelectSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.QuerySpecificationContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.QuerySpecificationContext,i)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(SelectSQLParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(SelectSQLParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SelectSQLParser.LimitClauseContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(SelectSQLParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(SelectSQLParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SelectSQLParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.QueryExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.QueryExpressionContext,i)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(SelectSQLParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(SelectSQLParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(SelectSQLParser.LimitClauseContext,0)

        def ALL(self):
            return self.getToken(SelectSQLParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(SelectSQLParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SelectSQLParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(SelectSQLParser.QueryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)



    def selectStatement(self):

        localctx = SelectSQLParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 180
                self.querySpecification()
                pass

            elif la_ == 2:
                localctx = SelectSQLParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 181
                self.queryExpression()
                pass

            elif la_ == 3:
                localctx = SelectSQLParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 182
                self.querySpecification()
                self.state = 184 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 183
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 186 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.UNION:
                    self.state = 188
                    self.match(SelectSQLParser.UNION)
                    self.state = 190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT:
                        self.state = 189
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 194
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SelectSQLParser.SELECT]:
                        self.state = 192
                        self.querySpecification()
                        pass
                    elif token in [SelectSQLParser.LR_BRACKET]:
                        self.state = 193
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ORDER:
                    self.state = 198
                    self.orderByClause()


                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LIMIT:
                    self.state = 201
                    self.limitClause()


                pass

            elif la_ == 4:
                localctx = SelectSQLParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 204
                self.queryExpression()
                self.state = 206 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 205
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 208 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.UNION:
                    self.state = 210
                    self.match(SelectSQLParser.UNION)
                    self.state = 212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT:
                        self.state = 211
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 214
                    self.queryExpression()


                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ORDER:
                    self.state = 217
                    self.orderByClause()


                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LIMIT:
                    self.state = 220
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SelectSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(SelectSQLParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.OrderByExpressionContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = SelectSQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(SelectSQLParser.ORDER)
            self.state = 226
            self.match(SelectSQLParser.BY)
            self.state = 227
            self.orderByExpression()
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 228
                self.match(SelectSQLParser.COMMA)
                self.state = 229
                self.orderByExpression()
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SelectSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(SelectSQLParser.DESC, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = SelectSQLParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.expression(0)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC:
                self.state = 236
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.TableSourceContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = SelectSQLParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.tableSource()
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 240
                self.match(SelectSQLParser.COMMA)
                self.state = 241
                self.tableSource()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = SelectSQLParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self.tableSourceItem()
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 248
                        self.joinPart() 
                    self.state = 253
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                pass

            elif la_ == 2:
                localctx = SelectSQLParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 255
                self.tableSourceItem()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (SelectSQLParser.CROSS - 30)) | (1 << (SelectSQLParser.INNER - 30)) | (1 << (SelectSQLParser.JOIN - 30)) | (1 << (SelectSQLParser.LEFT - 30)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (SelectSQLParser.NATURAL - 96)) | (1 << (SelectSQLParser.RIGHT - 96)) | (1 << (SelectSQLParser.STRAIGHT_JOIN - 96)))) != 0):
                    self.state = 256
                    self.joinPart()
                    self.state = 261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 262
                self.match(SelectSQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SelectSQLParser.SelectStatementContext,0)

        def AS(self):
            return self.getToken(SelectSQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(SelectSQLParser.TableNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)

        def AS(self):
            return self.getToken(SelectSQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSources(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourcesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = SelectSQLParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.tableName()
                self.state = 271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.AS:
                        self.state = 267
                        self.match(SelectSQLParser.AS)


                    self.state = 270
                    localctx.alias = self.uid()


                pass

            elif la_ == 2:
                localctx = SelectSQLParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 273
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 274
                    self.match(SelectSQLParser.LR_BRACKET)
                    self.state = 275
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 276
                    self.match(SelectSQLParser.RR_BRACKET)
                    pass


                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.AS:
                    self.state = 280
                    self.match(SelectSQLParser.AS)


                self.state = 283
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = SelectSQLParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 285
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 286
                self.tableSources()
                self.state = 287
                self.match(SelectSQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def uidList(self):
            return self.getTypedRuleContext(SelectSQLParser.UidListContext,0)


        def USE(self):
            return self.getToken(SelectSQLParser.USE, 0)

        def IGNORE(self):
            return self.getToken(SelectSQLParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(SelectSQLParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(SelectSQLParser.INDEX, 0)

        def KEY(self):
            return self.getToken(SelectSQLParser.KEY, 0)

        def FOR(self):
            return self.getToken(SelectSQLParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(SelectSQLParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = SelectSQLParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.FORCE or _la==SelectSQLParser.IGNORE or _la==SelectSQLParser.USE):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 292
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.INDEX or _la==SelectSQLParser.KEY):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.FOR:
                self.state = 293
                self.match(SelectSQLParser.FOR)
                self.state = 294
                self.indexHintType()


            self.state = 297
            self.match(SelectSQLParser.LR_BRACKET)
            self.state = 298
            self.uidList()
            self.state = 299
            self.match(SelectSQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexHintTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(SelectSQLParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(SelectSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(SelectSQLParser.BY, 0)

        def GROUP(self):
            return self.getToken(SelectSQLParser.GROUP, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = SelectSQLParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_indexHintType)
        try:
            self.state = 306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.match(SelectSQLParser.JOIN)
                pass
            elif token in [SelectSQLParser.ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.match(SelectSQLParser.ORDER)
                self.state = 303
                self.match(SelectSQLParser.BY)
                pass
            elif token in [SelectSQLParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 304
                self.match(SelectSQLParser.GROUP)
                self.state = 305
                self.match(SelectSQLParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(SelectSQLParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(SelectSQLParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SelectSQLParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(SelectSQLParser.UidListContext,0)

        def INNER(self):
            return self.getToken(SelectSQLParser.INNER, 0)
        def CROSS(self):
            return self.getToken(SelectSQLParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(SelectSQLParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(SelectSQLParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SelectSQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SelectSQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(SelectSQLParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(SelectSQLParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(SelectSQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(SelectSQLParser.RIGHT, 0)
        def ON(self):
            return self.getToken(SelectSQLParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(SelectSQLParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(SelectSQLParser.UidListContext,0)

        def OUTER(self):
            return self.getToken(SelectSQLParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(SelectSQLParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(SelectSQLParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightJoin" ):
                listener.enterStraightJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightJoin" ):
                listener.exitStraightJoin(self)



    def joinPart(self):

        localctx = SelectSQLParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.CROSS, SelectSQLParser.INNER, SelectSQLParser.JOIN]:
                localctx = SelectSQLParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.CROSS or _la==SelectSQLParser.INNER:
                    self.state = 308
                    _la = self._input.LA(1)
                    if not(_la==SelectSQLParser.CROSS or _la==SelectSQLParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 311
                self.match(SelectSQLParser.JOIN)
                self.state = 312
                self.tableSourceItem()
                self.state = 320
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SelectSQLParser.ON]:
                    self.state = 313
                    self.match(SelectSQLParser.ON)
                    self.state = 314
                    self.expression(0)
                    pass
                elif token in [SelectSQLParser.USING]:
                    self.state = 315
                    self.match(SelectSQLParser.USING)
                    self.state = 316
                    self.match(SelectSQLParser.LR_BRACKET)
                    self.state = 317
                    self.uidList()
                    self.state = 318
                    self.match(SelectSQLParser.RR_BRACKET)
                    pass
                elif token in [SelectSQLParser.EOF, SelectSQLParser.AS, SelectSQLParser.CROSS, SelectSQLParser.GROUP, SelectSQLParser.HAVING, SelectSQLParser.INNER, SelectSQLParser.JOIN, SelectSQLParser.LEFT, SelectSQLParser.LIMIT, SelectSQLParser.NATURAL, SelectSQLParser.ORDER, SelectSQLParser.RIGHT, SelectSQLParser.STRAIGHT_JOIN, SelectSQLParser.UNION, SelectSQLParser.WHERE, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.TEXT, SelectSQLParser.ENUM, SelectSQLParser.COUNT, SelectSQLParser.POSITION, SelectSQLParser.ACCOUNT, SelectSQLParser.ACTION, SelectSQLParser.AFTER, SelectSQLParser.AGGREGATE, SelectSQLParser.ALGORITHM, SelectSQLParser.ANY, SelectSQLParser.AT, SelectSQLParser.AUTHORS, SelectSQLParser.AUTOCOMMIT, SelectSQLParser.AUTOEXTEND_SIZE, SelectSQLParser.AUTO_INCREMENT, SelectSQLParser.AVG_ROW_LENGTH, SelectSQLParser.BEGIN, SelectSQLParser.BINLOG, SelectSQLParser.BIT, SelectSQLParser.BLOCK, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN, SelectSQLParser.BTREE, SelectSQLParser.CASCADED, SelectSQLParser.CHAIN, SelectSQLParser.CHANNEL, SelectSQLParser.CHECKSUM, SelectSQLParser.CIPHER, SelectSQLParser.CLIENT, SelectSQLParser.COALESCE, SelectSQLParser.CODE, SelectSQLParser.COLUMNS, SelectSQLParser.COLUMN_FORMAT, SelectSQLParser.COMMENT, SelectSQLParser.COMMIT, SelectSQLParser.COMPACT, SelectSQLParser.COMPLETION, SelectSQLParser.COMPRESSED, SelectSQLParser.COMPRESSION, SelectSQLParser.CONCURRENT, SelectSQLParser.CONNECTION, SelectSQLParser.CONSISTENT, SelectSQLParser.CONTAINS, SelectSQLParser.CONTEXT, SelectSQLParser.CONTRIBUTORS, SelectSQLParser.COPY, SelectSQLParser.CPU, SelectSQLParser.DATA, SelectSQLParser.DATAFILE, SelectSQLParser.DEALLOCATE, SelectSQLParser.DEFAULT_AUTH, SelectSQLParser.DEFINER, SelectSQLParser.DELAY_KEY_WRITE, SelectSQLParser.DIRECTORY, SelectSQLParser.DISABLE, SelectSQLParser.DISCARD, SelectSQLParser.DISK, SelectSQLParser.DO, SelectSQLParser.DUMPFILE, SelectSQLParser.DUPLICATE, SelectSQLParser.DYNAMIC, SelectSQLParser.ENABLE, SelectSQLParser.ENCRYPTION, SelectSQLParser.ENDS, SelectSQLParser.ENGINE, SelectSQLParser.ENGINES, SelectSQLParser.ERROR, SelectSQLParser.ERRORS, SelectSQLParser.ESCAPE, SelectSQLParser.EVEN, SelectSQLParser.EVENT, SelectSQLParser.EVENTS, SelectSQLParser.EVERY, SelectSQLParser.EXCHANGE, SelectSQLParser.EXCLUSIVE, SelectSQLParser.EXPIRE, SelectSQLParser.EXTENT_SIZE, SelectSQLParser.FAULTS, SelectSQLParser.FIELDS, SelectSQLParser.FILE_BLOCK_SIZE, SelectSQLParser.FILTER, SelectSQLParser.FIRST, SelectSQLParser.FIXED, SelectSQLParser.FOLLOWS, SelectSQLParser.FULL, SelectSQLParser.FUNCTION, SelectSQLParser.GLOBAL, SelectSQLParser.GRANTS, SelectSQLParser.GROUP_REPLICATION, SelectSQLParser.HASH, SelectSQLParser.HOST, SelectSQLParser.IDENTIFIED, SelectSQLParser.IGNORE_SERVER_IDS, SelectSQLParser.IMPORT, SelectSQLParser.INDEXES, SelectSQLParser.INITIAL_SIZE, SelectSQLParser.INPLACE, SelectSQLParser.INSERT_METHOD, SelectSQLParser.INSTANCE, SelectSQLParser.INVOKER, SelectSQLParser.IO, SelectSQLParser.IO_THREAD, SelectSQLParser.IPC, SelectSQLParser.ISOLATION, SelectSQLParser.ISSUER, SelectSQLParser.KEY_BLOCK_SIZE, SelectSQLParser.LANGUAGE, SelectSQLParser.LAST, SelectSQLParser.LEAVES, SelectSQLParser.LESS, SelectSQLParser.LEVEL, SelectSQLParser.LIST, SelectSQLParser.LOCAL, SelectSQLParser.LOGFILE, SelectSQLParser.LOGS, SelectSQLParser.MASTER, SelectSQLParser.MASTER_AUTO_POSITION, SelectSQLParser.MASTER_CONNECT_RETRY, SelectSQLParser.MASTER_DELAY, SelectSQLParser.MASTER_HEARTBEAT_PERIOD, SelectSQLParser.MASTER_HOST, SelectSQLParser.MASTER_LOG_FILE, SelectSQLParser.MASTER_LOG_POS, SelectSQLParser.MASTER_PASSWORD, SelectSQLParser.MASTER_PORT, SelectSQLParser.MASTER_RETRY_COUNT, SelectSQLParser.MASTER_SSL, SelectSQLParser.MASTER_SSL_CA, SelectSQLParser.MASTER_SSL_CAPATH, SelectSQLParser.MASTER_SSL_CERT, SelectSQLParser.MASTER_SSL_CIPHER, SelectSQLParser.MASTER_SSL_CRL, SelectSQLParser.MASTER_SSL_CRLPATH, SelectSQLParser.MASTER_SSL_KEY, SelectSQLParser.MASTER_TLS_VERSION, SelectSQLParser.MASTER_USER, SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, SelectSQLParser.MAX_QUERIES_PER_HOUR, SelectSQLParser.MAX_ROWS, SelectSQLParser.MAX_SIZE, SelectSQLParser.MAX_UPDATES_PER_HOUR, SelectSQLParser.MAX_USER_CONNECTIONS, SelectSQLParser.MERGE, SelectSQLParser.MID, SelectSQLParser.MIGRATE, SelectSQLParser.MIN_ROWS, SelectSQLParser.MODIFY, SelectSQLParser.MUTEX, SelectSQLParser.MYSQL, SelectSQLParser.NAME, SelectSQLParser.NAMES, SelectSQLParser.NCHAR, SelectSQLParser.NEVER, SelectSQLParser.NO, SelectSQLParser.NODEGROUP, SelectSQLParser.NONE, SelectSQLParser.OFFLINE, SelectSQLParser.OFFSET, SelectSQLParser.OJ, SelectSQLParser.OLD_PASSWORD, SelectSQLParser.ONE, SelectSQLParser.ONLINE, SelectSQLParser.ONLY, SelectSQLParser.OPTIMIZER_COSTS, SelectSQLParser.OPTIONS, SelectSQLParser.OWNER, SelectSQLParser.PACK_KEYS, SelectSQLParser.PAGE, SelectSQLParser.PARSER, SelectSQLParser.PARTIAL, SelectSQLParser.PARTITIONING, SelectSQLParser.PARTITIONS, SelectSQLParser.PASSWORD, SelectSQLParser.PHASE, SelectSQLParser.PLUGIN_DIR, SelectSQLParser.PLUGINS, SelectSQLParser.PORT, SelectSQLParser.PRECEDES, SelectSQLParser.PREPARE, SelectSQLParser.PRESERVE, SelectSQLParser.PREV, SelectSQLParser.PROCESSLIST, SelectSQLParser.PROFILE, SelectSQLParser.PROFILES, SelectSQLParser.PROXY, SelectSQLParser.QUERY, SelectSQLParser.QUICK, SelectSQLParser.REBUILD, SelectSQLParser.RECOVER, SelectSQLParser.REDO_BUFFER_SIZE, SelectSQLParser.REDUNDANT, SelectSQLParser.RELAY_LOG_FILE, SelectSQLParser.RELAY_LOG_POS, SelectSQLParser.RELAYLOG, SelectSQLParser.REMOVE, SelectSQLParser.REORGANIZE, SelectSQLParser.REPAIR, SelectSQLParser.REPLICATE_DO_DB, SelectSQLParser.REPLICATE_DO_TABLE, SelectSQLParser.REPLICATE_IGNORE_DB, SelectSQLParser.REPLICATE_IGNORE_TABLE, SelectSQLParser.REPLICATE_REWRITE_DB, SelectSQLParser.REPLICATE_WILD_DO_TABLE, SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, SelectSQLParser.REPLICATION, SelectSQLParser.RESUME, SelectSQLParser.RETURNS, SelectSQLParser.ROLLBACK, SelectSQLParser.ROLLUP, SelectSQLParser.ROTATE, SelectSQLParser.ROW, SelectSQLParser.ROWS, SelectSQLParser.ROW_FORMAT, SelectSQLParser.SAVEPOINT, SelectSQLParser.SCHEDULE, SelectSQLParser.SECURITY, SelectSQLParser.SERVER, SelectSQLParser.SESSION, SelectSQLParser.SHARE, SelectSQLParser.SHARED, SelectSQLParser.SIGNED, SelectSQLParser.SIMPLE, SelectSQLParser.SLAVE, SelectSQLParser.SNAPSHOT, SelectSQLParser.SOCKET, SelectSQLParser.SOME, SelectSQLParser.SOUNDS, SelectSQLParser.SOURCE, SelectSQLParser.SQL_AFTER_GTIDS, SelectSQLParser.SQL_AFTER_MTS_GAPS, SelectSQLParser.SQL_BEFORE_GTIDS, SelectSQLParser.SQL_BUFFER_RESULT, SelectSQLParser.SQL_CACHE, SelectSQLParser.SQL_NO_CACHE, SelectSQLParser.SQL_THREAD, SelectSQLParser.START, SelectSQLParser.STARTS, SelectSQLParser.STATS_AUTO_RECALC, SelectSQLParser.STATS_PERSISTENT, SelectSQLParser.STATS_SAMPLE_PAGES, SelectSQLParser.STATUS, SelectSQLParser.STOP, SelectSQLParser.STORAGE, SelectSQLParser.STRING, SelectSQLParser.SUBJECT, SelectSQLParser.SUBPARTITION, SelectSQLParser.SUBPARTITIONS, SelectSQLParser.SUSPEND, SelectSQLParser.SWAPS, SelectSQLParser.SWITCHES, SelectSQLParser.TABLESPACE, SelectSQLParser.TEMPORARY, SelectSQLParser.TEMPTABLE, SelectSQLParser.THAN, SelectSQLParser.TRANSACTION, SelectSQLParser.TRUNCATE, SelectSQLParser.UNDEFINED, SelectSQLParser.UNDOFILE, SelectSQLParser.UNDO_BUFFER_SIZE, SelectSQLParser.UNKNOWN, SelectSQLParser.UPGRADE, SelectSQLParser.USER, SelectSQLParser.VALIDATION, SelectSQLParser.VALUE, SelectSQLParser.VARIABLES, SelectSQLParser.VIEW, SelectSQLParser.WAIT, SelectSQLParser.WARNINGS, SelectSQLParser.WITHOUT, SelectSQLParser.WORK, SelectSQLParser.WRAPPER, SelectSQLParser.X509, SelectSQLParser.XA, SelectSQLParser.XML, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.TABLES, SelectSQLParser.ROUTINE, SelectSQLParser.EXECUTE, SelectSQLParser.FILE, SelectSQLParser.PROCESS, SelectSQLParser.RELOAD, SelectSQLParser.SHUTDOWN, SelectSQLParser.SUPER, SelectSQLParser.PRIVILEGES, SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4, SelectSQLParser.ARCHIVE, SelectSQLParser.BLACKHOLE, SelectSQLParser.CSV, SelectSQLParser.FEDERATED, SelectSQLParser.INNODB, SelectSQLParser.MEMORY, SelectSQLParser.MRG_MYISAM, SelectSQLParser.MYISAM, SelectSQLParser.NDB, SelectSQLParser.NDBCLUSTER, SelectSQLParser.PERFOMANCE_SCHEMA, SelectSQLParser.REPEATABLE, SelectSQLParser.COMMITTED, SelectSQLParser.UNCOMMITTED, SelectSQLParser.SERIALIZABLE, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION, SelectSQLParser.RR_BRACKET, SelectSQLParser.COMMA, SelectSQLParser.SEMI, SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, SelectSQLParser.ID, SelectSQLParser.REVERSE_QUOTE_ID]:
                    pass
                else:
                    pass
                pass
            elif token in [SelectSQLParser.STRAIGHT_JOIN]:
                localctx = SelectSQLParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.match(SelectSQLParser.STRAIGHT_JOIN)
                self.state = 323
                self.tableSourceItem()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ON:
                    self.state = 324
                    self.match(SelectSQLParser.ON)
                    self.state = 325
                    self.expression(0)


                pass
            elif token in [SelectSQLParser.LEFT, SelectSQLParser.RIGHT]:
                localctx = SelectSQLParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.LEFT or _la==SelectSQLParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.OUTER:
                    self.state = 329
                    self.match(SelectSQLParser.OUTER)


                self.state = 332
                self.match(SelectSQLParser.JOIN)
                self.state = 333
                self.tableSourceItem()
                self.state = 341
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SelectSQLParser.ON]:
                    self.state = 334
                    self.match(SelectSQLParser.ON)
                    self.state = 335
                    self.expression(0)
                    pass
                elif token in [SelectSQLParser.USING]:
                    self.state = 336
                    self.match(SelectSQLParser.USING)
                    self.state = 337
                    self.match(SelectSQLParser.LR_BRACKET)
                    self.state = 338
                    self.uidList()
                    self.state = 339
                    self.match(SelectSQLParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [SelectSQLParser.NATURAL]:
                localctx = SelectSQLParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 343
                self.match(SelectSQLParser.NATURAL)
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LEFT or _la==SelectSQLParser.RIGHT:
                    self.state = 344
                    _la = self._input.LA(1)
                    if not(_la==SelectSQLParser.LEFT or _la==SelectSQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.OUTER:
                        self.state = 345
                        self.match(SelectSQLParser.OUTER)




                self.state = 350
                self.match(SelectSQLParser.JOIN)
                self.state = 351
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SelectSQLParser.QuerySpecificationContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(SelectSQLParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = SelectSQLParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_queryExpression)
        try:
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 354
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 355
                self.querySpecification()
                self.state = 356
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 358
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 359
                self.queryExpression()
                self.state = 360
                self.match(SelectSQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SelectSQLParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(SelectSQLParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(SelectSQLParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(SelectSQLParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(SelectSQLParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = SelectSQLParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(SelectSQLParser.SELECT)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT:
                self.state = 365
                self.selectSpec()
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 371
            self.selectElements()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.FROM:
                self.state = 372
                self.fromClause()


            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 375
                self.orderByClause()


            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 378
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SelectSQLParser.UNION, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(SelectSQLParser.QueryExpressionContext,0)


        def ALL(self):
            return self.getToken(SelectSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SelectSQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = SelectSQLParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(SelectSQLParser.UNION)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT:
                self.state = 382
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 385
            self.queryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(SelectSQLParser.UNION, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(SelectSQLParser.QuerySpecificationContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(SelectSQLParser.QueryExpressionContext,0)


        def ALL(self):
            return self.getToken(SelectSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SelectSQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = SelectSQLParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(SelectSQLParser.UNION)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT:
                self.state = 388
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.SELECT]:
                self.state = 391
                self.querySpecification()
                pass
            elif token in [SelectSQLParser.LR_BRACKET]:
                self.state = 392
                self.queryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SelectSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SelectSQLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = SelectSQLParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.SelectElementContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = SelectSQLParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.STAR]:
                self.state = 397
                localctx.star = self.match(SelectSQLParser.STAR)
                pass
            elif token in [SelectSQLParser.CASE, SelectSQLParser.CAST, SelectSQLParser.CONVERT, SelectSQLParser.CURRENT_USER, SelectSQLParser.EXISTS, SelectSQLParser.FALSE, SelectSQLParser.IF, SelectSQLParser.INSERT, SelectSQLParser.INTERVAL, SelectSQLParser.LEFT, SelectSQLParser.NOT, SelectSQLParser.NULL_LITERAL, SelectSQLParser.REPLACE, SelectSQLParser.RIGHT, SelectSQLParser.TRUE, SelectSQLParser.VALUES, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.CHAR, SelectSQLParser.BINARY, SelectSQLParser.TEXT, SelectSQLParser.ENUM, SelectSQLParser.AVG, SelectSQLParser.BIT_AND, SelectSQLParser.BIT_OR, SelectSQLParser.BIT_XOR, SelectSQLParser.COUNT, SelectSQLParser.GROUP_CONCAT, SelectSQLParser.MAX, SelectSQLParser.MIN, SelectSQLParser.STD, SelectSQLParser.STDDEV, SelectSQLParser.STDDEV_POP, SelectSQLParser.STDDEV_SAMP, SelectSQLParser.SUM, SelectSQLParser.VAR_POP, SelectSQLParser.VAR_SAMP, SelectSQLParser.VARIANCE, SelectSQLParser.CURRENT_DATE, SelectSQLParser.CURRENT_TIME, SelectSQLParser.CURRENT_TIMESTAMP, SelectSQLParser.LOCALTIME, SelectSQLParser.CURDATE, SelectSQLParser.CURTIME, SelectSQLParser.DATE_ADD, SelectSQLParser.DATE_SUB, SelectSQLParser.EXTRACT, SelectSQLParser.LOCALTIMESTAMP, SelectSQLParser.NOW, SelectSQLParser.POSITION, SelectSQLParser.SUBSTR, SelectSQLParser.SUBSTRING, SelectSQLParser.SYSDATE, SelectSQLParser.TRIM, SelectSQLParser.UTC_DATE, SelectSQLParser.UTC_TIME, SelectSQLParser.UTC_TIMESTAMP, SelectSQLParser.ACCOUNT, SelectSQLParser.ACTION, SelectSQLParser.AFTER, SelectSQLParser.AGGREGATE, SelectSQLParser.ALGORITHM, SelectSQLParser.ANY, SelectSQLParser.AT, SelectSQLParser.AUTHORS, SelectSQLParser.AUTOCOMMIT, SelectSQLParser.AUTOEXTEND_SIZE, SelectSQLParser.AUTO_INCREMENT, SelectSQLParser.AVG_ROW_LENGTH, SelectSQLParser.BEGIN, SelectSQLParser.BINLOG, SelectSQLParser.BIT, SelectSQLParser.BLOCK, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN, SelectSQLParser.BTREE, SelectSQLParser.CASCADED, SelectSQLParser.CHAIN, SelectSQLParser.CHANNEL, SelectSQLParser.CHECKSUM, SelectSQLParser.CIPHER, SelectSQLParser.CLIENT, SelectSQLParser.COALESCE, SelectSQLParser.CODE, SelectSQLParser.COLUMNS, SelectSQLParser.COLUMN_FORMAT, SelectSQLParser.COMMENT, SelectSQLParser.COMMIT, SelectSQLParser.COMPACT, SelectSQLParser.COMPLETION, SelectSQLParser.COMPRESSED, SelectSQLParser.COMPRESSION, SelectSQLParser.CONCURRENT, SelectSQLParser.CONNECTION, SelectSQLParser.CONSISTENT, SelectSQLParser.CONTAINS, SelectSQLParser.CONTEXT, SelectSQLParser.CONTRIBUTORS, SelectSQLParser.COPY, SelectSQLParser.CPU, SelectSQLParser.DATA, SelectSQLParser.DATAFILE, SelectSQLParser.DEALLOCATE, SelectSQLParser.DEFAULT_AUTH, SelectSQLParser.DEFINER, SelectSQLParser.DELAY_KEY_WRITE, SelectSQLParser.DIRECTORY, SelectSQLParser.DISABLE, SelectSQLParser.DISCARD, SelectSQLParser.DISK, SelectSQLParser.DO, SelectSQLParser.DUMPFILE, SelectSQLParser.DUPLICATE, SelectSQLParser.DYNAMIC, SelectSQLParser.ENABLE, SelectSQLParser.ENCRYPTION, SelectSQLParser.ENDS, SelectSQLParser.ENGINE, SelectSQLParser.ENGINES, SelectSQLParser.ERROR, SelectSQLParser.ERRORS, SelectSQLParser.ESCAPE, SelectSQLParser.EVEN, SelectSQLParser.EVENT, SelectSQLParser.EVENTS, SelectSQLParser.EVERY, SelectSQLParser.EXCHANGE, SelectSQLParser.EXCLUSIVE, SelectSQLParser.EXPIRE, SelectSQLParser.EXTENT_SIZE, SelectSQLParser.FAULTS, SelectSQLParser.FIELDS, SelectSQLParser.FILE_BLOCK_SIZE, SelectSQLParser.FILTER, SelectSQLParser.FIRST, SelectSQLParser.FIXED, SelectSQLParser.FOLLOWS, SelectSQLParser.FULL, SelectSQLParser.FUNCTION, SelectSQLParser.GLOBAL, SelectSQLParser.GRANTS, SelectSQLParser.GROUP_REPLICATION, SelectSQLParser.HASH, SelectSQLParser.HOST, SelectSQLParser.IDENTIFIED, SelectSQLParser.IGNORE_SERVER_IDS, SelectSQLParser.IMPORT, SelectSQLParser.INDEXES, SelectSQLParser.INITIAL_SIZE, SelectSQLParser.INPLACE, SelectSQLParser.INSERT_METHOD, SelectSQLParser.INSTANCE, SelectSQLParser.INVOKER, SelectSQLParser.IO, SelectSQLParser.IO_THREAD, SelectSQLParser.IPC, SelectSQLParser.ISOLATION, SelectSQLParser.ISSUER, SelectSQLParser.KEY_BLOCK_SIZE, SelectSQLParser.LANGUAGE, SelectSQLParser.LAST, SelectSQLParser.LEAVES, SelectSQLParser.LESS, SelectSQLParser.LEVEL, SelectSQLParser.LIST, SelectSQLParser.LOCAL, SelectSQLParser.LOGFILE, SelectSQLParser.LOGS, SelectSQLParser.MASTER, SelectSQLParser.MASTER_AUTO_POSITION, SelectSQLParser.MASTER_CONNECT_RETRY, SelectSQLParser.MASTER_DELAY, SelectSQLParser.MASTER_HEARTBEAT_PERIOD, SelectSQLParser.MASTER_HOST, SelectSQLParser.MASTER_LOG_FILE, SelectSQLParser.MASTER_LOG_POS, SelectSQLParser.MASTER_PASSWORD, SelectSQLParser.MASTER_PORT, SelectSQLParser.MASTER_RETRY_COUNT, SelectSQLParser.MASTER_SSL, SelectSQLParser.MASTER_SSL_CA, SelectSQLParser.MASTER_SSL_CAPATH, SelectSQLParser.MASTER_SSL_CERT, SelectSQLParser.MASTER_SSL_CIPHER, SelectSQLParser.MASTER_SSL_CRL, SelectSQLParser.MASTER_SSL_CRLPATH, SelectSQLParser.MASTER_SSL_KEY, SelectSQLParser.MASTER_TLS_VERSION, SelectSQLParser.MASTER_USER, SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, SelectSQLParser.MAX_QUERIES_PER_HOUR, SelectSQLParser.MAX_ROWS, SelectSQLParser.MAX_SIZE, SelectSQLParser.MAX_UPDATES_PER_HOUR, SelectSQLParser.MAX_USER_CONNECTIONS, SelectSQLParser.MERGE, SelectSQLParser.MID, SelectSQLParser.MIGRATE, SelectSQLParser.MIN_ROWS, SelectSQLParser.MODIFY, SelectSQLParser.MUTEX, SelectSQLParser.MYSQL, SelectSQLParser.NAME, SelectSQLParser.NAMES, SelectSQLParser.NCHAR, SelectSQLParser.NEVER, SelectSQLParser.NO, SelectSQLParser.NODEGROUP, SelectSQLParser.NONE, SelectSQLParser.OFFLINE, SelectSQLParser.OFFSET, SelectSQLParser.OJ, SelectSQLParser.OLD_PASSWORD, SelectSQLParser.ONE, SelectSQLParser.ONLINE, SelectSQLParser.ONLY, SelectSQLParser.OPTIMIZER_COSTS, SelectSQLParser.OPTIONS, SelectSQLParser.OWNER, SelectSQLParser.PACK_KEYS, SelectSQLParser.PAGE, SelectSQLParser.PARSER, SelectSQLParser.PARTIAL, SelectSQLParser.PARTITIONING, SelectSQLParser.PARTITIONS, SelectSQLParser.PASSWORD, SelectSQLParser.PHASE, SelectSQLParser.PLUGIN_DIR, SelectSQLParser.PLUGINS, SelectSQLParser.PORT, SelectSQLParser.PRECEDES, SelectSQLParser.PREPARE, SelectSQLParser.PRESERVE, SelectSQLParser.PREV, SelectSQLParser.PROCESSLIST, SelectSQLParser.PROFILE, SelectSQLParser.PROFILES, SelectSQLParser.PROXY, SelectSQLParser.QUERY, SelectSQLParser.QUICK, SelectSQLParser.REBUILD, SelectSQLParser.RECOVER, SelectSQLParser.REDO_BUFFER_SIZE, SelectSQLParser.REDUNDANT, SelectSQLParser.RELAY_LOG_FILE, SelectSQLParser.RELAY_LOG_POS, SelectSQLParser.RELAYLOG, SelectSQLParser.REMOVE, SelectSQLParser.REORGANIZE, SelectSQLParser.REPAIR, SelectSQLParser.REPLICATE_DO_DB, SelectSQLParser.REPLICATE_DO_TABLE, SelectSQLParser.REPLICATE_IGNORE_DB, SelectSQLParser.REPLICATE_IGNORE_TABLE, SelectSQLParser.REPLICATE_REWRITE_DB, SelectSQLParser.REPLICATE_WILD_DO_TABLE, SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, SelectSQLParser.REPLICATION, SelectSQLParser.RESUME, SelectSQLParser.RETURNS, SelectSQLParser.ROLLBACK, SelectSQLParser.ROLLUP, SelectSQLParser.ROTATE, SelectSQLParser.ROW, SelectSQLParser.ROWS, SelectSQLParser.ROW_FORMAT, SelectSQLParser.SAVEPOINT, SelectSQLParser.SCHEDULE, SelectSQLParser.SECURITY, SelectSQLParser.SERVER, SelectSQLParser.SESSION, SelectSQLParser.SHARE, SelectSQLParser.SHARED, SelectSQLParser.SIGNED, SelectSQLParser.SIMPLE, SelectSQLParser.SLAVE, SelectSQLParser.SNAPSHOT, SelectSQLParser.SOCKET, SelectSQLParser.SOME, SelectSQLParser.SOUNDS, SelectSQLParser.SOURCE, SelectSQLParser.SQL_AFTER_GTIDS, SelectSQLParser.SQL_AFTER_MTS_GAPS, SelectSQLParser.SQL_BEFORE_GTIDS, SelectSQLParser.SQL_BUFFER_RESULT, SelectSQLParser.SQL_CACHE, SelectSQLParser.SQL_NO_CACHE, SelectSQLParser.SQL_THREAD, SelectSQLParser.START, SelectSQLParser.STARTS, SelectSQLParser.STATS_AUTO_RECALC, SelectSQLParser.STATS_PERSISTENT, SelectSQLParser.STATS_SAMPLE_PAGES, SelectSQLParser.STATUS, SelectSQLParser.STOP, SelectSQLParser.STORAGE, SelectSQLParser.STRING, SelectSQLParser.SUBJECT, SelectSQLParser.SUBPARTITION, SelectSQLParser.SUBPARTITIONS, SelectSQLParser.SUSPEND, SelectSQLParser.SWAPS, SelectSQLParser.SWITCHES, SelectSQLParser.TABLESPACE, SelectSQLParser.TEMPORARY, SelectSQLParser.TEMPTABLE, SelectSQLParser.THAN, SelectSQLParser.TRANSACTION, SelectSQLParser.TRUNCATE, SelectSQLParser.UNDEFINED, SelectSQLParser.UNDOFILE, SelectSQLParser.UNDO_BUFFER_SIZE, SelectSQLParser.UNKNOWN, SelectSQLParser.UPGRADE, SelectSQLParser.USER, SelectSQLParser.VALIDATION, SelectSQLParser.VALUE, SelectSQLParser.VARIABLES, SelectSQLParser.VIEW, SelectSQLParser.WAIT, SelectSQLParser.WARNINGS, SelectSQLParser.WITHOUT, SelectSQLParser.WORK, SelectSQLParser.WRAPPER, SelectSQLParser.X509, SelectSQLParser.XA, SelectSQLParser.XML, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.TABLES, SelectSQLParser.ROUTINE, SelectSQLParser.EXECUTE, SelectSQLParser.FILE, SelectSQLParser.PROCESS, SelectSQLParser.RELOAD, SelectSQLParser.SHUTDOWN, SelectSQLParser.SUPER, SelectSQLParser.PRIVILEGES, SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4, SelectSQLParser.ARCHIVE, SelectSQLParser.BLACKHOLE, SelectSQLParser.CSV, SelectSQLParser.FEDERATED, SelectSQLParser.INNODB, SelectSQLParser.MEMORY, SelectSQLParser.MRG_MYISAM, SelectSQLParser.MYISAM, SelectSQLParser.NDB, SelectSQLParser.NDBCLUSTER, SelectSQLParser.PERFOMANCE_SCHEMA, SelectSQLParser.REPEATABLE, SelectSQLParser.COMMITTED, SelectSQLParser.UNCOMMITTED, SelectSQLParser.SERIALIZABLE, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION, SelectSQLParser.PLUS, SelectSQLParser.MINUS, SelectSQLParser.EXCLAMATION_SYMBOL, SelectSQLParser.BIT_NOT_OP, SelectSQLParser.LR_BRACKET, SelectSQLParser.ZERO_DECIMAL, SelectSQLParser.ONE_DECIMAL, SelectSQLParser.TWO_DECIMAL, SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, SelectSQLParser.START_NATIONAL_STRING_LITERAL, SelectSQLParser.STRING_LITERAL, SelectSQLParser.DECIMAL_LITERAL, SelectSQLParser.HEXADECIMAL_LITERAL, SelectSQLParser.REAL_LITERAL, SelectSQLParser.NULL_SPEC_LITERAL, SelectSQLParser.BIT_STRING, SelectSQLParser.STRING_CHARSET_NAME, SelectSQLParser.ID, SelectSQLParser.REVERSE_QUOTE_ID, SelectSQLParser.LOCAL_ID, SelectSQLParser.GLOBAL_ID]:
                self.state = 398
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 401
                self.match(SelectSQLParser.COMMA)
                self.state = 402
                self.selectElement()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(SelectSQLParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(SelectSQLParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)

        def AS(self):
            return self.getToken(SelectSQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)

        def AS(self):
            return self.getToken(SelectSQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SelectSQLParser.FullIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SelectSQLParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)

        def AS(self):
            return self.getToken(SelectSQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = SelectSQLParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 408
                self.fullId()
                self.state = 409
                self.match(SelectSQLParser.DOT)
                self.state = 410
                self.match(SelectSQLParser.STAR)
                pass

            elif la_ == 2:
                localctx = SelectSQLParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.fullColumnName()
                self.state = 417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.AS:
                        self.state = 413
                        self.match(SelectSQLParser.AS)


                    self.state = 416
                    self.uid()


                pass

            elif la_ == 3:
                localctx = SelectSQLParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.functionCall()
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.AS:
                        self.state = 420
                        self.match(SelectSQLParser.AS)


                    self.state = 423
                    self.uid()


                pass

            elif la_ == 4:
                localctx = SelectSQLParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 426
                    self.match(SelectSQLParser.LOCAL_ID)
                    self.state = 427
                    self.match(SelectSQLParser.VAR_ASSIGN)


                self.state = 430
                self.expression(0)
                self.state = 435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.AS:
                        self.state = 431
                        self.match(SelectSQLParser.AS)


                    self.state = 434
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(SelectSQLParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(SelectSQLParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(SelectSQLParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SelectSQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(SelectSQLParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(SelectSQLParser.HAVING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SelectSQLParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(SelectSQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = SelectSQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(SelectSQLParser.FROM)
            self.state = 440
            self.tableSources()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.WHERE:
                self.state = 441
                self.match(SelectSQLParser.WHERE)
                self.state = 442
                localctx.whereExpr = self.expression(0)


            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.GROUP:
                self.state = 445
                self.match(SelectSQLParser.GROUP)
                self.state = 446
                self.match(SelectSQLParser.BY)
                self.state = 447
                self.groupByItem()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SelectSQLParser.COMMA:
                    self.state = 448
                    self.match(SelectSQLParser.COMMA)
                    self.state = 449
                    self.groupByItem()
                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.WITH:
                    self.state = 455
                    self.match(SelectSQLParser.WITH)
                    self.state = 456
                    self.match(SelectSQLParser.ROLLUP)




            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.HAVING:
                self.state = 461
                self.match(SelectSQLParser.HAVING)
                self.state = 462
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SelectSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(SelectSQLParser.DESC, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = SelectSQLParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.expression(0)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC:
                self.state = 466
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(SelectSQLParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(SelectSQLParser.OFFSET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = SelectSQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(SelectSQLParser.LIMIT)
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 470
                    localctx.offset = self.decimalLiteral()
                    self.state = 471
                    self.match(SelectSQLParser.COMMA)


                self.state = 475
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 476
                localctx.limit = self.decimalLiteral()
                self.state = 477
                self.match(SelectSQLParser.OFFSET)
                self.state = 478
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.UidContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(SelectSQLParser.DOT_ID, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)




    def fullId(self):

        localctx = SelectSQLParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.uid()
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 483
                self.match(SelectSQLParser.DOT_ID)

            elif la_ == 2:
                self.state = 484
                self.match(SelectSQLParser.DOT)
                self.state = 485
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(SelectSQLParser.FullIdContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = SelectSQLParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.DottedIdContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = SelectSQLParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.uid()
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 491
                self.dottedId()
                self.state = 493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 492
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(SelectSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(SelectSQLParser.DESC, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = SelectSQLParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.uid()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.LR_BRACKET:
                self.state = 498
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 499
                self.decimalLiteral()
                self.state = 500
                self.match(SelectSQLParser.RR_BRACKET)


            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC:
                self.state = 504
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(SelectSQLParser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(SelectSQLParser.ID, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = SelectSQLParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.ID or _la==SelectSQLParser.STRING_USER_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(SelectSQLParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(SelectSQLParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = SelectSQLParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.LOCAL_ID or _la==SelectSQLParser.GLOBAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharsetNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(SelectSQLParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(SelectSQLParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SelectSQLParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = SelectSQLParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_charsetName)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.match(SelectSQLParser.BINARY)
                pass
            elif token in [SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.charsetNameBase()
                pass
            elif token in [SelectSQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.match(SelectSQLParser.STRING_LITERAL)
                pass
            elif token in [SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 514
                self.match(SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollationNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SelectSQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = SelectSQLParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_collationName)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.LEFT, SelectSQLParser.RIGHT, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.TEXT, SelectSQLParser.ENUM, SelectSQLParser.COUNT, SelectSQLParser.POSITION, SelectSQLParser.ACCOUNT, SelectSQLParser.ACTION, SelectSQLParser.AFTER, SelectSQLParser.AGGREGATE, SelectSQLParser.ALGORITHM, SelectSQLParser.ANY, SelectSQLParser.AT, SelectSQLParser.AUTHORS, SelectSQLParser.AUTOCOMMIT, SelectSQLParser.AUTOEXTEND_SIZE, SelectSQLParser.AUTO_INCREMENT, SelectSQLParser.AVG_ROW_LENGTH, SelectSQLParser.BEGIN, SelectSQLParser.BINLOG, SelectSQLParser.BIT, SelectSQLParser.BLOCK, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN, SelectSQLParser.BTREE, SelectSQLParser.CASCADED, SelectSQLParser.CHAIN, SelectSQLParser.CHANNEL, SelectSQLParser.CHECKSUM, SelectSQLParser.CIPHER, SelectSQLParser.CLIENT, SelectSQLParser.COALESCE, SelectSQLParser.CODE, SelectSQLParser.COLUMNS, SelectSQLParser.COLUMN_FORMAT, SelectSQLParser.COMMENT, SelectSQLParser.COMMIT, SelectSQLParser.COMPACT, SelectSQLParser.COMPLETION, SelectSQLParser.COMPRESSED, SelectSQLParser.COMPRESSION, SelectSQLParser.CONCURRENT, SelectSQLParser.CONNECTION, SelectSQLParser.CONSISTENT, SelectSQLParser.CONTAINS, SelectSQLParser.CONTEXT, SelectSQLParser.CONTRIBUTORS, SelectSQLParser.COPY, SelectSQLParser.CPU, SelectSQLParser.DATA, SelectSQLParser.DATAFILE, SelectSQLParser.DEALLOCATE, SelectSQLParser.DEFAULT_AUTH, SelectSQLParser.DEFINER, SelectSQLParser.DELAY_KEY_WRITE, SelectSQLParser.DIRECTORY, SelectSQLParser.DISABLE, SelectSQLParser.DISCARD, SelectSQLParser.DISK, SelectSQLParser.DO, SelectSQLParser.DUMPFILE, SelectSQLParser.DUPLICATE, SelectSQLParser.DYNAMIC, SelectSQLParser.ENABLE, SelectSQLParser.ENCRYPTION, SelectSQLParser.ENDS, SelectSQLParser.ENGINE, SelectSQLParser.ENGINES, SelectSQLParser.ERROR, SelectSQLParser.ERRORS, SelectSQLParser.ESCAPE, SelectSQLParser.EVEN, SelectSQLParser.EVENT, SelectSQLParser.EVENTS, SelectSQLParser.EVERY, SelectSQLParser.EXCHANGE, SelectSQLParser.EXCLUSIVE, SelectSQLParser.EXPIRE, SelectSQLParser.EXTENT_SIZE, SelectSQLParser.FAULTS, SelectSQLParser.FIELDS, SelectSQLParser.FILE_BLOCK_SIZE, SelectSQLParser.FILTER, SelectSQLParser.FIRST, SelectSQLParser.FIXED, SelectSQLParser.FOLLOWS, SelectSQLParser.FULL, SelectSQLParser.FUNCTION, SelectSQLParser.GLOBAL, SelectSQLParser.GRANTS, SelectSQLParser.GROUP_REPLICATION, SelectSQLParser.HASH, SelectSQLParser.HOST, SelectSQLParser.IDENTIFIED, SelectSQLParser.IGNORE_SERVER_IDS, SelectSQLParser.IMPORT, SelectSQLParser.INDEXES, SelectSQLParser.INITIAL_SIZE, SelectSQLParser.INPLACE, SelectSQLParser.INSERT_METHOD, SelectSQLParser.INSTANCE, SelectSQLParser.INVOKER, SelectSQLParser.IO, SelectSQLParser.IO_THREAD, SelectSQLParser.IPC, SelectSQLParser.ISOLATION, SelectSQLParser.ISSUER, SelectSQLParser.KEY_BLOCK_SIZE, SelectSQLParser.LANGUAGE, SelectSQLParser.LAST, SelectSQLParser.LEAVES, SelectSQLParser.LESS, SelectSQLParser.LEVEL, SelectSQLParser.LIST, SelectSQLParser.LOCAL, SelectSQLParser.LOGFILE, SelectSQLParser.LOGS, SelectSQLParser.MASTER, SelectSQLParser.MASTER_AUTO_POSITION, SelectSQLParser.MASTER_CONNECT_RETRY, SelectSQLParser.MASTER_DELAY, SelectSQLParser.MASTER_HEARTBEAT_PERIOD, SelectSQLParser.MASTER_HOST, SelectSQLParser.MASTER_LOG_FILE, SelectSQLParser.MASTER_LOG_POS, SelectSQLParser.MASTER_PASSWORD, SelectSQLParser.MASTER_PORT, SelectSQLParser.MASTER_RETRY_COUNT, SelectSQLParser.MASTER_SSL, SelectSQLParser.MASTER_SSL_CA, SelectSQLParser.MASTER_SSL_CAPATH, SelectSQLParser.MASTER_SSL_CERT, SelectSQLParser.MASTER_SSL_CIPHER, SelectSQLParser.MASTER_SSL_CRL, SelectSQLParser.MASTER_SSL_CRLPATH, SelectSQLParser.MASTER_SSL_KEY, SelectSQLParser.MASTER_TLS_VERSION, SelectSQLParser.MASTER_USER, SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, SelectSQLParser.MAX_QUERIES_PER_HOUR, SelectSQLParser.MAX_ROWS, SelectSQLParser.MAX_SIZE, SelectSQLParser.MAX_UPDATES_PER_HOUR, SelectSQLParser.MAX_USER_CONNECTIONS, SelectSQLParser.MERGE, SelectSQLParser.MID, SelectSQLParser.MIGRATE, SelectSQLParser.MIN_ROWS, SelectSQLParser.MODIFY, SelectSQLParser.MUTEX, SelectSQLParser.MYSQL, SelectSQLParser.NAME, SelectSQLParser.NAMES, SelectSQLParser.NCHAR, SelectSQLParser.NEVER, SelectSQLParser.NO, SelectSQLParser.NODEGROUP, SelectSQLParser.NONE, SelectSQLParser.OFFLINE, SelectSQLParser.OFFSET, SelectSQLParser.OJ, SelectSQLParser.OLD_PASSWORD, SelectSQLParser.ONE, SelectSQLParser.ONLINE, SelectSQLParser.ONLY, SelectSQLParser.OPTIMIZER_COSTS, SelectSQLParser.OPTIONS, SelectSQLParser.OWNER, SelectSQLParser.PACK_KEYS, SelectSQLParser.PAGE, SelectSQLParser.PARSER, SelectSQLParser.PARTIAL, SelectSQLParser.PARTITIONING, SelectSQLParser.PARTITIONS, SelectSQLParser.PASSWORD, SelectSQLParser.PHASE, SelectSQLParser.PLUGIN_DIR, SelectSQLParser.PLUGINS, SelectSQLParser.PORT, SelectSQLParser.PRECEDES, SelectSQLParser.PREPARE, SelectSQLParser.PRESERVE, SelectSQLParser.PREV, SelectSQLParser.PROCESSLIST, SelectSQLParser.PROFILE, SelectSQLParser.PROFILES, SelectSQLParser.PROXY, SelectSQLParser.QUERY, SelectSQLParser.QUICK, SelectSQLParser.REBUILD, SelectSQLParser.RECOVER, SelectSQLParser.REDO_BUFFER_SIZE, SelectSQLParser.REDUNDANT, SelectSQLParser.RELAY_LOG_FILE, SelectSQLParser.RELAY_LOG_POS, SelectSQLParser.RELAYLOG, SelectSQLParser.REMOVE, SelectSQLParser.REORGANIZE, SelectSQLParser.REPAIR, SelectSQLParser.REPLICATE_DO_DB, SelectSQLParser.REPLICATE_DO_TABLE, SelectSQLParser.REPLICATE_IGNORE_DB, SelectSQLParser.REPLICATE_IGNORE_TABLE, SelectSQLParser.REPLICATE_REWRITE_DB, SelectSQLParser.REPLICATE_WILD_DO_TABLE, SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, SelectSQLParser.REPLICATION, SelectSQLParser.RESUME, SelectSQLParser.RETURNS, SelectSQLParser.ROLLBACK, SelectSQLParser.ROLLUP, SelectSQLParser.ROTATE, SelectSQLParser.ROW, SelectSQLParser.ROWS, SelectSQLParser.ROW_FORMAT, SelectSQLParser.SAVEPOINT, SelectSQLParser.SCHEDULE, SelectSQLParser.SECURITY, SelectSQLParser.SERVER, SelectSQLParser.SESSION, SelectSQLParser.SHARE, SelectSQLParser.SHARED, SelectSQLParser.SIGNED, SelectSQLParser.SIMPLE, SelectSQLParser.SLAVE, SelectSQLParser.SNAPSHOT, SelectSQLParser.SOCKET, SelectSQLParser.SOME, SelectSQLParser.SOUNDS, SelectSQLParser.SOURCE, SelectSQLParser.SQL_AFTER_GTIDS, SelectSQLParser.SQL_AFTER_MTS_GAPS, SelectSQLParser.SQL_BEFORE_GTIDS, SelectSQLParser.SQL_BUFFER_RESULT, SelectSQLParser.SQL_CACHE, SelectSQLParser.SQL_NO_CACHE, SelectSQLParser.SQL_THREAD, SelectSQLParser.START, SelectSQLParser.STARTS, SelectSQLParser.STATS_AUTO_RECALC, SelectSQLParser.STATS_PERSISTENT, SelectSQLParser.STATS_SAMPLE_PAGES, SelectSQLParser.STATUS, SelectSQLParser.STOP, SelectSQLParser.STORAGE, SelectSQLParser.STRING, SelectSQLParser.SUBJECT, SelectSQLParser.SUBPARTITION, SelectSQLParser.SUBPARTITIONS, SelectSQLParser.SUSPEND, SelectSQLParser.SWAPS, SelectSQLParser.SWITCHES, SelectSQLParser.TABLESPACE, SelectSQLParser.TEMPORARY, SelectSQLParser.TEMPTABLE, SelectSQLParser.THAN, SelectSQLParser.TRANSACTION, SelectSQLParser.TRUNCATE, SelectSQLParser.UNDEFINED, SelectSQLParser.UNDOFILE, SelectSQLParser.UNDO_BUFFER_SIZE, SelectSQLParser.UNKNOWN, SelectSQLParser.UPGRADE, SelectSQLParser.USER, SelectSQLParser.VALIDATION, SelectSQLParser.VALUE, SelectSQLParser.VARIABLES, SelectSQLParser.VIEW, SelectSQLParser.WAIT, SelectSQLParser.WARNINGS, SelectSQLParser.WITHOUT, SelectSQLParser.WORK, SelectSQLParser.WRAPPER, SelectSQLParser.X509, SelectSQLParser.XA, SelectSQLParser.XML, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.TABLES, SelectSQLParser.ROUTINE, SelectSQLParser.EXECUTE, SelectSQLParser.FILE, SelectSQLParser.PROCESS, SelectSQLParser.RELOAD, SelectSQLParser.SHUTDOWN, SelectSQLParser.SUPER, SelectSQLParser.PRIVILEGES, SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4, SelectSQLParser.ARCHIVE, SelectSQLParser.BLACKHOLE, SelectSQLParser.CSV, SelectSQLParser.FEDERATED, SelectSQLParser.INNODB, SelectSQLParser.MEMORY, SelectSQLParser.MRG_MYISAM, SelectSQLParser.MYISAM, SelectSQLParser.NDB, SelectSQLParser.NDBCLUSTER, SelectSQLParser.PERFOMANCE_SCHEMA, SelectSQLParser.REPEATABLE, SelectSQLParser.COMMITTED, SelectSQLParser.UNCOMMITTED, SelectSQLParser.SERIALIZABLE, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION, SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, SelectSQLParser.ID, SelectSQLParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.uid()
                pass
            elif token in [SelectSQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(SelectSQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EngineNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(SelectSQLParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(SelectSQLParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(SelectSQLParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(SelectSQLParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(SelectSQLParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(SelectSQLParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(SelectSQLParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(SelectSQLParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(SelectSQLParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(SelectSQLParser.NDBCLUSTER, 0)

        def PERFOMANCE_SCHEMA(self):
            return self.getToken(SelectSQLParser.PERFOMANCE_SCHEMA, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_engineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineName" ):
                listener.enterEngineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineName" ):
                listener.exitEngineName(self)




    def engineName(self):

        localctx = SelectSQLParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            _la = self._input.LA(1)
            if not(((((_la - 607)) & ~0x3f) == 0 and ((1 << (_la - 607)) & ((1 << (SelectSQLParser.ARCHIVE - 607)) | (1 << (SelectSQLParser.BLACKHOLE - 607)) | (1 << (SelectSQLParser.CSV - 607)) | (1 << (SelectSQLParser.FEDERATED - 607)) | (1 << (SelectSQLParser.INNODB - 607)) | (1 << (SelectSQLParser.MEMORY - 607)) | (1 << (SelectSQLParser.MRG_MYISAM - 607)) | (1 << (SelectSQLParser.MYISAM - 607)) | (1 << (SelectSQLParser.NDB - 607)) | (1 << (SelectSQLParser.NDBCLUSTER - 607)) | (1 << (SelectSQLParser.PERFOMANCE_SCHEMA - 607)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)




    def uuidSet(self):

        localctx = SelectSQLParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.decimalLiteral()
            self.state = 524
            self.match(SelectSQLParser.MINUS)
            self.state = 525
            self.decimalLiteral()
            self.state = 526
            self.match(SelectSQLParser.MINUS)
            self.state = 527
            self.decimalLiteral()
            self.state = 528
            self.match(SelectSQLParser.MINUS)
            self.state = 529
            self.decimalLiteral()
            self.state = 530
            self.match(SelectSQLParser.MINUS)
            self.state = 531
            self.decimalLiteral()
            self.state = 537 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 532
                self.match(SelectSQLParser.COLON_SYMB)
                self.state = 533
                self.decimalLiteral()
                self.state = 534
                self.match(SelectSQLParser.MINUS)
                self.state = 535
                self.decimalLiteral()
                self.state = 539 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SelectSQLParser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.XuidStringIdContext,i)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)




    def xid(self):

        localctx = SelectSQLParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            localctx.globalTableUid = self.xuidStringId()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.COMMA:
                self.state = 542
                self.match(SelectSQLParser.COMMA)
                self.state = 543
                localctx.qualifier = self.xuidStringId()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.COMMA:
                    self.state = 544
                    self.match(SelectSQLParser.COMMA)
                    self.state = 545
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XuidStringIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SelectSQLParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(SelectSQLParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SelectSQLParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(SelectSQLParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_xuidStringId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXuidStringId" ):
                listener.enterXuidStringId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXuidStringId" ):
                listener.exitXuidStringId(self)




    def xuidStringId(self):

        localctx = SelectSQLParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 550
                self.match(SelectSQLParser.STRING_LITERAL)
                pass
            elif token in [SelectSQLParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self.match(SelectSQLParser.BIT_STRING)
                pass
            elif token in [SelectSQLParser.HEXADECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 552
                    self.match(SelectSQLParser.HEXADECIMAL_LITERAL)
                    self.state = 555 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SelectSQLParser.HEXADECIMAL_LITERAL):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AuthPluginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SelectSQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_authPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPlugin" ):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPlugin" ):
                listener.exitAuthPlugin(self)




    def authPlugin(self):

        localctx = SelectSQLParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_authPlugin)
        try:
            self.state = 561
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.LEFT, SelectSQLParser.RIGHT, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.TEXT, SelectSQLParser.ENUM, SelectSQLParser.COUNT, SelectSQLParser.POSITION, SelectSQLParser.ACCOUNT, SelectSQLParser.ACTION, SelectSQLParser.AFTER, SelectSQLParser.AGGREGATE, SelectSQLParser.ALGORITHM, SelectSQLParser.ANY, SelectSQLParser.AT, SelectSQLParser.AUTHORS, SelectSQLParser.AUTOCOMMIT, SelectSQLParser.AUTOEXTEND_SIZE, SelectSQLParser.AUTO_INCREMENT, SelectSQLParser.AVG_ROW_LENGTH, SelectSQLParser.BEGIN, SelectSQLParser.BINLOG, SelectSQLParser.BIT, SelectSQLParser.BLOCK, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN, SelectSQLParser.BTREE, SelectSQLParser.CASCADED, SelectSQLParser.CHAIN, SelectSQLParser.CHANNEL, SelectSQLParser.CHECKSUM, SelectSQLParser.CIPHER, SelectSQLParser.CLIENT, SelectSQLParser.COALESCE, SelectSQLParser.CODE, SelectSQLParser.COLUMNS, SelectSQLParser.COLUMN_FORMAT, SelectSQLParser.COMMENT, SelectSQLParser.COMMIT, SelectSQLParser.COMPACT, SelectSQLParser.COMPLETION, SelectSQLParser.COMPRESSED, SelectSQLParser.COMPRESSION, SelectSQLParser.CONCURRENT, SelectSQLParser.CONNECTION, SelectSQLParser.CONSISTENT, SelectSQLParser.CONTAINS, SelectSQLParser.CONTEXT, SelectSQLParser.CONTRIBUTORS, SelectSQLParser.COPY, SelectSQLParser.CPU, SelectSQLParser.DATA, SelectSQLParser.DATAFILE, SelectSQLParser.DEALLOCATE, SelectSQLParser.DEFAULT_AUTH, SelectSQLParser.DEFINER, SelectSQLParser.DELAY_KEY_WRITE, SelectSQLParser.DIRECTORY, SelectSQLParser.DISABLE, SelectSQLParser.DISCARD, SelectSQLParser.DISK, SelectSQLParser.DO, SelectSQLParser.DUMPFILE, SelectSQLParser.DUPLICATE, SelectSQLParser.DYNAMIC, SelectSQLParser.ENABLE, SelectSQLParser.ENCRYPTION, SelectSQLParser.ENDS, SelectSQLParser.ENGINE, SelectSQLParser.ENGINES, SelectSQLParser.ERROR, SelectSQLParser.ERRORS, SelectSQLParser.ESCAPE, SelectSQLParser.EVEN, SelectSQLParser.EVENT, SelectSQLParser.EVENTS, SelectSQLParser.EVERY, SelectSQLParser.EXCHANGE, SelectSQLParser.EXCLUSIVE, SelectSQLParser.EXPIRE, SelectSQLParser.EXTENT_SIZE, SelectSQLParser.FAULTS, SelectSQLParser.FIELDS, SelectSQLParser.FILE_BLOCK_SIZE, SelectSQLParser.FILTER, SelectSQLParser.FIRST, SelectSQLParser.FIXED, SelectSQLParser.FOLLOWS, SelectSQLParser.FULL, SelectSQLParser.FUNCTION, SelectSQLParser.GLOBAL, SelectSQLParser.GRANTS, SelectSQLParser.GROUP_REPLICATION, SelectSQLParser.HASH, SelectSQLParser.HOST, SelectSQLParser.IDENTIFIED, SelectSQLParser.IGNORE_SERVER_IDS, SelectSQLParser.IMPORT, SelectSQLParser.INDEXES, SelectSQLParser.INITIAL_SIZE, SelectSQLParser.INPLACE, SelectSQLParser.INSERT_METHOD, SelectSQLParser.INSTANCE, SelectSQLParser.INVOKER, SelectSQLParser.IO, SelectSQLParser.IO_THREAD, SelectSQLParser.IPC, SelectSQLParser.ISOLATION, SelectSQLParser.ISSUER, SelectSQLParser.KEY_BLOCK_SIZE, SelectSQLParser.LANGUAGE, SelectSQLParser.LAST, SelectSQLParser.LEAVES, SelectSQLParser.LESS, SelectSQLParser.LEVEL, SelectSQLParser.LIST, SelectSQLParser.LOCAL, SelectSQLParser.LOGFILE, SelectSQLParser.LOGS, SelectSQLParser.MASTER, SelectSQLParser.MASTER_AUTO_POSITION, SelectSQLParser.MASTER_CONNECT_RETRY, SelectSQLParser.MASTER_DELAY, SelectSQLParser.MASTER_HEARTBEAT_PERIOD, SelectSQLParser.MASTER_HOST, SelectSQLParser.MASTER_LOG_FILE, SelectSQLParser.MASTER_LOG_POS, SelectSQLParser.MASTER_PASSWORD, SelectSQLParser.MASTER_PORT, SelectSQLParser.MASTER_RETRY_COUNT, SelectSQLParser.MASTER_SSL, SelectSQLParser.MASTER_SSL_CA, SelectSQLParser.MASTER_SSL_CAPATH, SelectSQLParser.MASTER_SSL_CERT, SelectSQLParser.MASTER_SSL_CIPHER, SelectSQLParser.MASTER_SSL_CRL, SelectSQLParser.MASTER_SSL_CRLPATH, SelectSQLParser.MASTER_SSL_KEY, SelectSQLParser.MASTER_TLS_VERSION, SelectSQLParser.MASTER_USER, SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, SelectSQLParser.MAX_QUERIES_PER_HOUR, SelectSQLParser.MAX_ROWS, SelectSQLParser.MAX_SIZE, SelectSQLParser.MAX_UPDATES_PER_HOUR, SelectSQLParser.MAX_USER_CONNECTIONS, SelectSQLParser.MERGE, SelectSQLParser.MID, SelectSQLParser.MIGRATE, SelectSQLParser.MIN_ROWS, SelectSQLParser.MODIFY, SelectSQLParser.MUTEX, SelectSQLParser.MYSQL, SelectSQLParser.NAME, SelectSQLParser.NAMES, SelectSQLParser.NCHAR, SelectSQLParser.NEVER, SelectSQLParser.NO, SelectSQLParser.NODEGROUP, SelectSQLParser.NONE, SelectSQLParser.OFFLINE, SelectSQLParser.OFFSET, SelectSQLParser.OJ, SelectSQLParser.OLD_PASSWORD, SelectSQLParser.ONE, SelectSQLParser.ONLINE, SelectSQLParser.ONLY, SelectSQLParser.OPTIMIZER_COSTS, SelectSQLParser.OPTIONS, SelectSQLParser.OWNER, SelectSQLParser.PACK_KEYS, SelectSQLParser.PAGE, SelectSQLParser.PARSER, SelectSQLParser.PARTIAL, SelectSQLParser.PARTITIONING, SelectSQLParser.PARTITIONS, SelectSQLParser.PASSWORD, SelectSQLParser.PHASE, SelectSQLParser.PLUGIN_DIR, SelectSQLParser.PLUGINS, SelectSQLParser.PORT, SelectSQLParser.PRECEDES, SelectSQLParser.PREPARE, SelectSQLParser.PRESERVE, SelectSQLParser.PREV, SelectSQLParser.PROCESSLIST, SelectSQLParser.PROFILE, SelectSQLParser.PROFILES, SelectSQLParser.PROXY, SelectSQLParser.QUERY, SelectSQLParser.QUICK, SelectSQLParser.REBUILD, SelectSQLParser.RECOVER, SelectSQLParser.REDO_BUFFER_SIZE, SelectSQLParser.REDUNDANT, SelectSQLParser.RELAY_LOG_FILE, SelectSQLParser.RELAY_LOG_POS, SelectSQLParser.RELAYLOG, SelectSQLParser.REMOVE, SelectSQLParser.REORGANIZE, SelectSQLParser.REPAIR, SelectSQLParser.REPLICATE_DO_DB, SelectSQLParser.REPLICATE_DO_TABLE, SelectSQLParser.REPLICATE_IGNORE_DB, SelectSQLParser.REPLICATE_IGNORE_TABLE, SelectSQLParser.REPLICATE_REWRITE_DB, SelectSQLParser.REPLICATE_WILD_DO_TABLE, SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, SelectSQLParser.REPLICATION, SelectSQLParser.RESUME, SelectSQLParser.RETURNS, SelectSQLParser.ROLLBACK, SelectSQLParser.ROLLUP, SelectSQLParser.ROTATE, SelectSQLParser.ROW, SelectSQLParser.ROWS, SelectSQLParser.ROW_FORMAT, SelectSQLParser.SAVEPOINT, SelectSQLParser.SCHEDULE, SelectSQLParser.SECURITY, SelectSQLParser.SERVER, SelectSQLParser.SESSION, SelectSQLParser.SHARE, SelectSQLParser.SHARED, SelectSQLParser.SIGNED, SelectSQLParser.SIMPLE, SelectSQLParser.SLAVE, SelectSQLParser.SNAPSHOT, SelectSQLParser.SOCKET, SelectSQLParser.SOME, SelectSQLParser.SOUNDS, SelectSQLParser.SOURCE, SelectSQLParser.SQL_AFTER_GTIDS, SelectSQLParser.SQL_AFTER_MTS_GAPS, SelectSQLParser.SQL_BEFORE_GTIDS, SelectSQLParser.SQL_BUFFER_RESULT, SelectSQLParser.SQL_CACHE, SelectSQLParser.SQL_NO_CACHE, SelectSQLParser.SQL_THREAD, SelectSQLParser.START, SelectSQLParser.STARTS, SelectSQLParser.STATS_AUTO_RECALC, SelectSQLParser.STATS_PERSISTENT, SelectSQLParser.STATS_SAMPLE_PAGES, SelectSQLParser.STATUS, SelectSQLParser.STOP, SelectSQLParser.STORAGE, SelectSQLParser.STRING, SelectSQLParser.SUBJECT, SelectSQLParser.SUBPARTITION, SelectSQLParser.SUBPARTITIONS, SelectSQLParser.SUSPEND, SelectSQLParser.SWAPS, SelectSQLParser.SWITCHES, SelectSQLParser.TABLESPACE, SelectSQLParser.TEMPORARY, SelectSQLParser.TEMPTABLE, SelectSQLParser.THAN, SelectSQLParser.TRANSACTION, SelectSQLParser.TRUNCATE, SelectSQLParser.UNDEFINED, SelectSQLParser.UNDOFILE, SelectSQLParser.UNDO_BUFFER_SIZE, SelectSQLParser.UNKNOWN, SelectSQLParser.UPGRADE, SelectSQLParser.USER, SelectSQLParser.VALIDATION, SelectSQLParser.VALUE, SelectSQLParser.VARIABLES, SelectSQLParser.VIEW, SelectSQLParser.WAIT, SelectSQLParser.WARNINGS, SelectSQLParser.WITHOUT, SelectSQLParser.WORK, SelectSQLParser.WRAPPER, SelectSQLParser.X509, SelectSQLParser.XA, SelectSQLParser.XML, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.TABLES, SelectSQLParser.ROUTINE, SelectSQLParser.EXECUTE, SelectSQLParser.FILE, SelectSQLParser.PROCESS, SelectSQLParser.RELOAD, SelectSQLParser.SHUTDOWN, SelectSQLParser.SUPER, SelectSQLParser.PRIVILEGES, SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4, SelectSQLParser.ARCHIVE, SelectSQLParser.BLACKHOLE, SelectSQLParser.CSV, SelectSQLParser.FEDERATED, SelectSQLParser.INNODB, SelectSQLParser.MEMORY, SelectSQLParser.MRG_MYISAM, SelectSQLParser.MYISAM, SelectSQLParser.NDB, SelectSQLParser.NDBCLUSTER, SelectSQLParser.PERFOMANCE_SCHEMA, SelectSQLParser.REPEATABLE, SelectSQLParser.COMMITTED, SelectSQLParser.UNCOMMITTED, SelectSQLParser.SERIALIZABLE, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION, SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, SelectSQLParser.ID, SelectSQLParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self.uid()
                pass
            elif token in [SelectSQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 560
                self.match(SelectSQLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(SelectSQLParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(SelectSQLParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)




    def uid(self):

        localctx = SelectSQLParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_uid)
        try:
            self.state = 566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.LEFT, SelectSQLParser.RIGHT, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.TEXT, SelectSQLParser.ENUM, SelectSQLParser.COUNT, SelectSQLParser.POSITION, SelectSQLParser.ACCOUNT, SelectSQLParser.ACTION, SelectSQLParser.AFTER, SelectSQLParser.AGGREGATE, SelectSQLParser.ALGORITHM, SelectSQLParser.ANY, SelectSQLParser.AT, SelectSQLParser.AUTHORS, SelectSQLParser.AUTOCOMMIT, SelectSQLParser.AUTOEXTEND_SIZE, SelectSQLParser.AUTO_INCREMENT, SelectSQLParser.AVG_ROW_LENGTH, SelectSQLParser.BEGIN, SelectSQLParser.BINLOG, SelectSQLParser.BIT, SelectSQLParser.BLOCK, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN, SelectSQLParser.BTREE, SelectSQLParser.CASCADED, SelectSQLParser.CHAIN, SelectSQLParser.CHANNEL, SelectSQLParser.CHECKSUM, SelectSQLParser.CIPHER, SelectSQLParser.CLIENT, SelectSQLParser.COALESCE, SelectSQLParser.CODE, SelectSQLParser.COLUMNS, SelectSQLParser.COLUMN_FORMAT, SelectSQLParser.COMMENT, SelectSQLParser.COMMIT, SelectSQLParser.COMPACT, SelectSQLParser.COMPLETION, SelectSQLParser.COMPRESSED, SelectSQLParser.COMPRESSION, SelectSQLParser.CONCURRENT, SelectSQLParser.CONNECTION, SelectSQLParser.CONSISTENT, SelectSQLParser.CONTAINS, SelectSQLParser.CONTEXT, SelectSQLParser.CONTRIBUTORS, SelectSQLParser.COPY, SelectSQLParser.CPU, SelectSQLParser.DATA, SelectSQLParser.DATAFILE, SelectSQLParser.DEALLOCATE, SelectSQLParser.DEFAULT_AUTH, SelectSQLParser.DEFINER, SelectSQLParser.DELAY_KEY_WRITE, SelectSQLParser.DIRECTORY, SelectSQLParser.DISABLE, SelectSQLParser.DISCARD, SelectSQLParser.DISK, SelectSQLParser.DO, SelectSQLParser.DUMPFILE, SelectSQLParser.DUPLICATE, SelectSQLParser.DYNAMIC, SelectSQLParser.ENABLE, SelectSQLParser.ENCRYPTION, SelectSQLParser.ENDS, SelectSQLParser.ENGINE, SelectSQLParser.ENGINES, SelectSQLParser.ERROR, SelectSQLParser.ERRORS, SelectSQLParser.ESCAPE, SelectSQLParser.EVEN, SelectSQLParser.EVENT, SelectSQLParser.EVENTS, SelectSQLParser.EVERY, SelectSQLParser.EXCHANGE, SelectSQLParser.EXCLUSIVE, SelectSQLParser.EXPIRE, SelectSQLParser.EXTENT_SIZE, SelectSQLParser.FAULTS, SelectSQLParser.FIELDS, SelectSQLParser.FILE_BLOCK_SIZE, SelectSQLParser.FILTER, SelectSQLParser.FIRST, SelectSQLParser.FIXED, SelectSQLParser.FOLLOWS, SelectSQLParser.FULL, SelectSQLParser.FUNCTION, SelectSQLParser.GLOBAL, SelectSQLParser.GRANTS, SelectSQLParser.GROUP_REPLICATION, SelectSQLParser.HASH, SelectSQLParser.HOST, SelectSQLParser.IDENTIFIED, SelectSQLParser.IGNORE_SERVER_IDS, SelectSQLParser.IMPORT, SelectSQLParser.INDEXES, SelectSQLParser.INITIAL_SIZE, SelectSQLParser.INPLACE, SelectSQLParser.INSERT_METHOD, SelectSQLParser.INSTANCE, SelectSQLParser.INVOKER, SelectSQLParser.IO, SelectSQLParser.IO_THREAD, SelectSQLParser.IPC, SelectSQLParser.ISOLATION, SelectSQLParser.ISSUER, SelectSQLParser.KEY_BLOCK_SIZE, SelectSQLParser.LANGUAGE, SelectSQLParser.LAST, SelectSQLParser.LEAVES, SelectSQLParser.LESS, SelectSQLParser.LEVEL, SelectSQLParser.LIST, SelectSQLParser.LOCAL, SelectSQLParser.LOGFILE, SelectSQLParser.LOGS, SelectSQLParser.MASTER, SelectSQLParser.MASTER_AUTO_POSITION, SelectSQLParser.MASTER_CONNECT_RETRY, SelectSQLParser.MASTER_DELAY, SelectSQLParser.MASTER_HEARTBEAT_PERIOD, SelectSQLParser.MASTER_HOST, SelectSQLParser.MASTER_LOG_FILE, SelectSQLParser.MASTER_LOG_POS, SelectSQLParser.MASTER_PASSWORD, SelectSQLParser.MASTER_PORT, SelectSQLParser.MASTER_RETRY_COUNT, SelectSQLParser.MASTER_SSL, SelectSQLParser.MASTER_SSL_CA, SelectSQLParser.MASTER_SSL_CAPATH, SelectSQLParser.MASTER_SSL_CERT, SelectSQLParser.MASTER_SSL_CIPHER, SelectSQLParser.MASTER_SSL_CRL, SelectSQLParser.MASTER_SSL_CRLPATH, SelectSQLParser.MASTER_SSL_KEY, SelectSQLParser.MASTER_TLS_VERSION, SelectSQLParser.MASTER_USER, SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, SelectSQLParser.MAX_QUERIES_PER_HOUR, SelectSQLParser.MAX_ROWS, SelectSQLParser.MAX_SIZE, SelectSQLParser.MAX_UPDATES_PER_HOUR, SelectSQLParser.MAX_USER_CONNECTIONS, SelectSQLParser.MERGE, SelectSQLParser.MID, SelectSQLParser.MIGRATE, SelectSQLParser.MIN_ROWS, SelectSQLParser.MODIFY, SelectSQLParser.MUTEX, SelectSQLParser.MYSQL, SelectSQLParser.NAME, SelectSQLParser.NAMES, SelectSQLParser.NCHAR, SelectSQLParser.NEVER, SelectSQLParser.NO, SelectSQLParser.NODEGROUP, SelectSQLParser.NONE, SelectSQLParser.OFFLINE, SelectSQLParser.OFFSET, SelectSQLParser.OJ, SelectSQLParser.OLD_PASSWORD, SelectSQLParser.ONE, SelectSQLParser.ONLINE, SelectSQLParser.ONLY, SelectSQLParser.OPTIMIZER_COSTS, SelectSQLParser.OPTIONS, SelectSQLParser.OWNER, SelectSQLParser.PACK_KEYS, SelectSQLParser.PAGE, SelectSQLParser.PARSER, SelectSQLParser.PARTIAL, SelectSQLParser.PARTITIONING, SelectSQLParser.PARTITIONS, SelectSQLParser.PASSWORD, SelectSQLParser.PHASE, SelectSQLParser.PLUGIN_DIR, SelectSQLParser.PLUGINS, SelectSQLParser.PORT, SelectSQLParser.PRECEDES, SelectSQLParser.PREPARE, SelectSQLParser.PRESERVE, SelectSQLParser.PREV, SelectSQLParser.PROCESSLIST, SelectSQLParser.PROFILE, SelectSQLParser.PROFILES, SelectSQLParser.PROXY, SelectSQLParser.QUERY, SelectSQLParser.QUICK, SelectSQLParser.REBUILD, SelectSQLParser.RECOVER, SelectSQLParser.REDO_BUFFER_SIZE, SelectSQLParser.REDUNDANT, SelectSQLParser.RELAY_LOG_FILE, SelectSQLParser.RELAY_LOG_POS, SelectSQLParser.RELAYLOG, SelectSQLParser.REMOVE, SelectSQLParser.REORGANIZE, SelectSQLParser.REPAIR, SelectSQLParser.REPLICATE_DO_DB, SelectSQLParser.REPLICATE_DO_TABLE, SelectSQLParser.REPLICATE_IGNORE_DB, SelectSQLParser.REPLICATE_IGNORE_TABLE, SelectSQLParser.REPLICATE_REWRITE_DB, SelectSQLParser.REPLICATE_WILD_DO_TABLE, SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, SelectSQLParser.REPLICATION, SelectSQLParser.RESUME, SelectSQLParser.RETURNS, SelectSQLParser.ROLLBACK, SelectSQLParser.ROLLUP, SelectSQLParser.ROTATE, SelectSQLParser.ROW, SelectSQLParser.ROWS, SelectSQLParser.ROW_FORMAT, SelectSQLParser.SAVEPOINT, SelectSQLParser.SCHEDULE, SelectSQLParser.SECURITY, SelectSQLParser.SERVER, SelectSQLParser.SESSION, SelectSQLParser.SHARE, SelectSQLParser.SHARED, SelectSQLParser.SIGNED, SelectSQLParser.SIMPLE, SelectSQLParser.SLAVE, SelectSQLParser.SNAPSHOT, SelectSQLParser.SOCKET, SelectSQLParser.SOME, SelectSQLParser.SOUNDS, SelectSQLParser.SOURCE, SelectSQLParser.SQL_AFTER_GTIDS, SelectSQLParser.SQL_AFTER_MTS_GAPS, SelectSQLParser.SQL_BEFORE_GTIDS, SelectSQLParser.SQL_BUFFER_RESULT, SelectSQLParser.SQL_CACHE, SelectSQLParser.SQL_NO_CACHE, SelectSQLParser.SQL_THREAD, SelectSQLParser.START, SelectSQLParser.STARTS, SelectSQLParser.STATS_AUTO_RECALC, SelectSQLParser.STATS_PERSISTENT, SelectSQLParser.STATS_SAMPLE_PAGES, SelectSQLParser.STATUS, SelectSQLParser.STOP, SelectSQLParser.STORAGE, SelectSQLParser.STRING, SelectSQLParser.SUBJECT, SelectSQLParser.SUBPARTITION, SelectSQLParser.SUBPARTITIONS, SelectSQLParser.SUSPEND, SelectSQLParser.SWAPS, SelectSQLParser.SWITCHES, SelectSQLParser.TABLESPACE, SelectSQLParser.TEMPORARY, SelectSQLParser.TEMPTABLE, SelectSQLParser.THAN, SelectSQLParser.TRANSACTION, SelectSQLParser.TRUNCATE, SelectSQLParser.UNDEFINED, SelectSQLParser.UNDOFILE, SelectSQLParser.UNDO_BUFFER_SIZE, SelectSQLParser.UNKNOWN, SelectSQLParser.UPGRADE, SelectSQLParser.USER, SelectSQLParser.VALIDATION, SelectSQLParser.VALUE, SelectSQLParser.VARIABLES, SelectSQLParser.VIEW, SelectSQLParser.WAIT, SelectSQLParser.WARNINGS, SelectSQLParser.WITHOUT, SelectSQLParser.WORK, SelectSQLParser.WRAPPER, SelectSQLParser.X509, SelectSQLParser.XA, SelectSQLParser.XML, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.TABLES, SelectSQLParser.ROUTINE, SelectSQLParser.EXECUTE, SelectSQLParser.FILE, SelectSQLParser.PROCESS, SelectSQLParser.RELOAD, SelectSQLParser.SHUTDOWN, SelectSQLParser.SUPER, SelectSQLParser.PRIVILEGES, SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4, SelectSQLParser.ARCHIVE, SelectSQLParser.BLACKHOLE, SelectSQLParser.CSV, SelectSQLParser.FEDERATED, SelectSQLParser.INNODB, SelectSQLParser.MEMORY, SelectSQLParser.MRG_MYISAM, SelectSQLParser.MYISAM, SelectSQLParser.NDB, SelectSQLParser.NDBCLUSTER, SelectSQLParser.PERFOMANCE_SCHEMA, SelectSQLParser.REPEATABLE, SelectSQLParser.COMMITTED, SelectSQLParser.UNCOMMITTED, SelectSQLParser.SERIALIZABLE, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION, SelectSQLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.simpleId()
                pass
            elif token in [SelectSQLParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.match(SelectSQLParser.REVERSE_QUOTE_ID)
                pass
            elif token in [SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 565
                self.match(SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(SelectSQLParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(SelectSQLParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(SelectSQLParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(SelectSQLParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(SelectSQLParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(SelectSQLParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(SelectSQLParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(SelectSQLParser.KeywordsCanBeIdContext,0)


        def functionNameBase(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionNameBaseContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)




    def simpleId(self):

        localctx = SelectSQLParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_simpleId)
        try:
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.match(SelectSQLParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 570
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 571
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 572
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 573
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 574
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 575
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 576
                self.functionNameBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(SelectSQLParser.DOT_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(SelectSQLParser.UidContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = SelectSQLParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dottedId)
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.match(SelectSQLParser.DOT_ID)
                pass
            elif token in [SelectSQLParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                self.match(SelectSQLParser.DOT)
                self.state = 581
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(SelectSQLParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(SelectSQLParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(SelectSQLParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(SelectSQLParser.TWO_DECIMAL, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = SelectSQLParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            _la = self._input.LA(1)
            if not(((((_la - 950)) & ~0x3f) == 0 and ((1 << (_la - 950)) & ((1 << (SelectSQLParser.ZERO_DECIMAL - 950)) | (1 << (SelectSQLParser.ONE_DECIMAL - 950)) | (1 << (SelectSQLParser.TWO_DECIMAL - 950)) | (1 << (SelectSQLParser.DECIMAL_LITERAL - 950)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileSizeLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(SelectSQLParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_fileSizeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSizeLiteral" ):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSizeLiteral" ):
                listener.exitFileSizeLiteral(self)




    def fileSizeLiteral(self):

        localctx = SelectSQLParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fileSizeLiteral)
        try:
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.FILESIZE_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 586
                self.match(SelectSQLParser.FILESIZE_LITERAL)
                pass
            elif token in [SelectSQLParser.ZERO_DECIMAL, SelectSQLParser.ONE_DECIMAL, SelectSQLParser.TWO_DECIMAL, SelectSQLParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SelectSQLParser.STRING_LITERAL)
            else:
                return self.getToken(SelectSQLParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(SelectSQLParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(SelectSQLParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(SelectSQLParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(SelectSQLParser.CollationNameContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SelectSQLParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SelectSQLParser.STRING_LITERAL, SelectSQLParser.STRING_CHARSET_NAME]:
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.STRING_CHARSET_NAME:
                        self.state = 590
                        self.match(SelectSQLParser.STRING_CHARSET_NAME)


                    self.state = 593
                    self.match(SelectSQLParser.STRING_LITERAL)
                    pass
                elif token in [SelectSQLParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 594
                    self.match(SelectSQLParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 598 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 597
                        self.match(SelectSQLParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 600 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SelectSQLParser.STRING_LITERAL, SelectSQLParser.STRING_CHARSET_NAME]:
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.STRING_CHARSET_NAME:
                        self.state = 602
                        self.match(SelectSQLParser.STRING_CHARSET_NAME)


                    self.state = 605
                    self.match(SelectSQLParser.STRING_LITERAL)
                    pass
                elif token in [SelectSQLParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 606
                    self.match(SelectSQLParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 609
                    self.match(SelectSQLParser.COLLATE)
                    self.state = 610
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SelectSQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SelectSQLParser.FALSE, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = SelectSQLParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.FALSE or _la==SelectSQLParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexadecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(SelectSQLParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(SelectSQLParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)




    def hexadecimalLiteral(self):

        localctx = SelectSQLParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.STRING_CHARSET_NAME:
                self.state = 617
                self.match(SelectSQLParser.STRING_CHARSET_NAME)


            self.state = 620
            self.match(SelectSQLParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(SelectSQLParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SelectSQLParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = SelectSQLParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.NOT:
                self.state = 622
                self.match(SelectSQLParser.NOT)


            self.state = 625
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.NULL_LITERAL or _la==SelectSQLParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)


        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(SelectSQLParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(SelectSQLParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(SelectSQLParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(SelectSQLParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = SelectSQLParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 629
                self.hexadecimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 630
                self.booleanLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 631
                self.match(SelectSQLParser.REAL_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 632
                self.match(SelectSQLParser.BIT_STRING)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.NOT:
                    self.state = 633
                    self.match(SelectSQLParser.NOT)


                self.state = 636
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.NULL_LITERAL or _la==SelectSQLParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(SelectSQLParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(SelectSQLParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(SelectSQLParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(SelectSQLParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(SelectSQLParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(SelectSQLParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(SelectSQLParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(SelectSQLParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(SelectSQLParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(SelectSQLParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(SelectSQLParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(SelectSQLParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(SelectSQLParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_intervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)




    def intervalType(self):

        localctx = SelectSQLParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_intervalType)
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                self.intervalTypeBase()
                pass
            elif token in [SelectSQLParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.match(SelectSQLParser.YEAR)
                pass
            elif token in [SelectSQLParser.YEAR_MONTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 641
                self.match(SelectSQLParser.YEAR_MONTH)
                pass
            elif token in [SelectSQLParser.DAY_HOUR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 642
                self.match(SelectSQLParser.DAY_HOUR)
                pass
            elif token in [SelectSQLParser.DAY_MINUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 643
                self.match(SelectSQLParser.DAY_MINUTE)
                pass
            elif token in [SelectSQLParser.DAY_SECOND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 644
                self.match(SelectSQLParser.DAY_SECOND)
                pass
            elif token in [SelectSQLParser.HOUR_MINUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 645
                self.match(SelectSQLParser.HOUR_MINUTE)
                pass
            elif token in [SelectSQLParser.HOUR_SECOND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 646
                self.match(SelectSQLParser.HOUR_SECOND)
                pass
            elif token in [SelectSQLParser.MINUTE_SECOND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 647
                self.match(SelectSQLParser.MINUTE_SECOND)
                pass
            elif token in [SelectSQLParser.SECOND_MICROSECOND]:
                self.enterOuterAlt(localctx, 10)
                self.state = 648
                self.match(SelectSQLParser.SECOND_MICROSECOND)
                pass
            elif token in [SelectSQLParser.MINUTE_MICROSECOND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 649
                self.match(SelectSQLParser.MINUTE_MICROSECOND)
                pass
            elif token in [SelectSQLParser.HOUR_MICROSECOND]:
                self.enterOuterAlt(localctx, 12)
                self.state = 650
                self.match(SelectSQLParser.HOUR_MICROSECOND)
                pass
            elif token in [SelectSQLParser.DAY_MICROSECOND]:
                self.enterOuterAlt(localctx, 13)
                self.state = 651
                self.match(SelectSQLParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(SelectSQLParser.GEOMETRYCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(SelectSQLParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(SelectSQLParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(SelectSQLParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(SelectSQLParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(SelectSQLParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(SelectSQLParser.POLYGON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialDataType" ):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialDataType" ):
                listener.exitSpatialDataType(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SelectSQLParser.STRING_LITERAL)
            else:
                return self.getToken(SelectSQLParser.STRING_LITERAL, i)
        def ENUM(self):
            return self.getToken(SelectSQLParser.ENUM, 0)
        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SelectSQLParser.SET)
            else:
                return self.getToken(SelectSQLParser.SET, i)
        def BINARY(self):
            return self.getToken(SelectSQLParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(SelectSQLParser.CHARACTER, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SelectSQLParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(SelectSQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SelectSQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionDataType" ):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionDataType" ):
                listener.exitCollectionDataType(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(SelectSQLParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(SelectSQLParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(SelectSQLParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(SelectSQLParser.INT, 0)
        def INTEGER(self):
            return self.getToken(SelectSQLParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(SelectSQLParser.BIGINT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(SelectSQLParser.LengthOneDimensionContext,0)

        def UNSIGNED(self):
            return self.getToken(SelectSQLParser.UNSIGNED, 0)
        def ZEROFILL(self):
            return self.getToken(SelectSQLParser.ZEROFILL, 0)
        def REAL(self):
            return self.getToken(SelectSQLParser.REAL, 0)
        def DOUBLE(self):
            return self.getToken(SelectSQLParser.DOUBLE, 0)
        def FLOAT(self):
            return self.getToken(SelectSQLParser.FLOAT, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(SelectSQLParser.LengthTwoDimensionContext,0)

        def DECIMAL(self):
            return self.getToken(SelectSQLParser.DECIMAL, 0)
        def NUMERIC(self):
            return self.getToken(SelectSQLParser.NUMERIC, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(SelectSQLParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(SelectSQLParser.BIT, 0)
        def TIME(self):
            return self.getToken(SelectSQLParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(SelectSQLParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(SelectSQLParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(SelectSQLParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(SelectSQLParser.VARBINARY, 0)
        def YEAR(self):
            return self.getToken(SelectSQLParser.YEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(SelectSQLParser.CHAR, 0)
        def VARCHAR(self):
            return self.getToken(SelectSQLParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(SelectSQLParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(SelectSQLParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(SelectSQLParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(SelectSQLParser.LONGTEXT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(SelectSQLParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(SelectSQLParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(SelectSQLParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(SelectSQLParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SelectSQLParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(SelectSQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SelectSQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDataType" ):
                listener.enterStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDataType" ):
                listener.exitStringDataType(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(SelectSQLParser.DATE, 0)
        def TINYBLOB(self):
            return self.getToken(SelectSQLParser.TINYBLOB, 0)
        def BLOB(self):
            return self.getToken(SelectSQLParser.BLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(SelectSQLParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(SelectSQLParser.LONGBLOB, 0)
        def BOOL(self):
            return self.getToken(SelectSQLParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(SelectSQLParser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)



    def dataType(self):

        localctx = SelectSQLParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.CHAR, SelectSQLParser.VARCHAR, SelectSQLParser.TINYTEXT, SelectSQLParser.TEXT, SelectSQLParser.MEDIUMTEXT, SelectSQLParser.LONGTEXT]:
                localctx = SelectSQLParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (SelectSQLParser.CHAR - 185)) | (1 << (SelectSQLParser.VARCHAR - 185)) | (1 << (SelectSQLParser.TINYTEXT - 185)) | (1 << (SelectSQLParser.TEXT - 185)) | (1 << (SelectSQLParser.MEDIUMTEXT - 185)) | (1 << (SelectSQLParser.LONGTEXT - 185)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 655
                    self.lengthOneDimension()


                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.BINARY:
                    self.state = 658
                    self.match(SelectSQLParser.BINARY)


                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.CHARACTER:
                    self.state = 661
                    self.match(SelectSQLParser.CHARACTER)
                    self.state = 662
                    self.match(SelectSQLParser.SET)
                    self.state = 663
                    self.charsetName()


                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.COLLATE:
                    self.state = 666
                    self.match(SelectSQLParser.COLLATE)
                    self.state = 667
                    self.collationName()


                pass
            elif token in [SelectSQLParser.TINYINT, SelectSQLParser.SMALLINT, SelectSQLParser.MEDIUMINT, SelectSQLParser.INT, SelectSQLParser.INTEGER, SelectSQLParser.BIGINT]:
                localctx = SelectSQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (SelectSQLParser.TINYINT - 169)) | (1 << (SelectSQLParser.SMALLINT - 169)) | (1 << (SelectSQLParser.MEDIUMINT - 169)) | (1 << (SelectSQLParser.INT - 169)) | (1 << (SelectSQLParser.INTEGER - 169)) | (1 << (SelectSQLParser.BIGINT - 169)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 671
                    self.lengthOneDimension()


                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.UNSIGNED:
                    self.state = 674
                    self.match(SelectSQLParser.UNSIGNED)


                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ZEROFILL:
                    self.state = 677
                    self.match(SelectSQLParser.ZEROFILL)


                pass
            elif token in [SelectSQLParser.REAL, SelectSQLParser.DOUBLE, SelectSQLParser.FLOAT]:
                localctx = SelectSQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 680
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 175)) & ~0x3f) == 0 and ((1 << (_la - 175)) & ((1 << (SelectSQLParser.REAL - 175)) | (1 << (SelectSQLParser.DOUBLE - 175)) | (1 << (SelectSQLParser.FLOAT - 175)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 681
                    self.lengthTwoDimension()


                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.UNSIGNED:
                    self.state = 684
                    self.match(SelectSQLParser.UNSIGNED)


                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ZEROFILL:
                    self.state = 687
                    self.match(SelectSQLParser.ZEROFILL)


                pass
            elif token in [SelectSQLParser.DECIMAL, SelectSQLParser.NUMERIC]:
                localctx = SelectSQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 690
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.DECIMAL or _la==SelectSQLParser.NUMERIC):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 691
                    self.lengthTwoOptionalDimension()


                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.UNSIGNED:
                    self.state = 694
                    self.match(SelectSQLParser.UNSIGNED)


                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ZEROFILL:
                    self.state = 697
                    self.match(SelectSQLParser.ZEROFILL)


                pass
            elif token in [SelectSQLParser.DATE, SelectSQLParser.TINYBLOB, SelectSQLParser.BLOB, SelectSQLParser.MEDIUMBLOB, SelectSQLParser.LONGBLOB, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN]:
                localctx = SelectSQLParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 700
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (SelectSQLParser.DATE - 180)) | (1 << (SelectSQLParser.TINYBLOB - 180)) | (1 << (SelectSQLParser.BLOB - 180)) | (1 << (SelectSQLParser.MEDIUMBLOB - 180)) | (1 << (SelectSQLParser.LONGBLOB - 180)))) != 0) or _la==SelectSQLParser.BOOL or _la==SelectSQLParser.BOOLEAN):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.BINARY, SelectSQLParser.VARBINARY, SelectSQLParser.BIT]:
                localctx = SelectSQLParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 701
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (SelectSQLParser.TIME - 181)) | (1 << (SelectSQLParser.TIMESTAMP - 181)) | (1 << (SelectSQLParser.DATETIME - 181)) | (1 << (SelectSQLParser.YEAR - 181)) | (1 << (SelectSQLParser.BINARY - 181)) | (1 << (SelectSQLParser.VARBINARY - 181)))) != 0) or _la==SelectSQLParser.BIT):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 702
                    self.lengthOneDimension()


                pass
            elif token in [SelectSQLParser.SET, SelectSQLParser.ENUM]:
                localctx = SelectSQLParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 705
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.SET or _la==SelectSQLParser.ENUM):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 706
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 707
                self.match(SelectSQLParser.STRING_LITERAL)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SelectSQLParser.COMMA:
                    self.state = 708
                    self.match(SelectSQLParser.COMMA)
                    self.state = 709
                    self.match(SelectSQLParser.STRING_LITERAL)
                    self.state = 714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 715
                self.match(SelectSQLParser.RR_BRACKET)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.BINARY:
                    self.state = 716
                    self.match(SelectSQLParser.BINARY)


                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.CHARACTER:
                    self.state = 719
                    self.match(SelectSQLParser.CHARACTER)
                    self.state = 720
                    self.match(SelectSQLParser.SET)
                    self.state = 721
                    self.charsetName()


                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.COLLATE:
                    self.state = 724
                    self.match(SelectSQLParser.COLLATE)
                    self.state = 725
                    self.collationName()


                pass
            elif token in [SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON]:
                localctx = SelectSQLParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 728
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 622)) & ~0x3f) == 0 and ((1 << (_la - 622)) & ((1 << (SelectSQLParser.GEOMETRYCOLLECTION - 622)) | (1 << (SelectSQLParser.LINESTRING - 622)) | (1 << (SelectSQLParser.MULTILINESTRING - 622)) | (1 << (SelectSQLParser.MULTIPOINT - 622)) | (1 << (SelectSQLParser.MULTIPOLYGON - 622)) | (1 << (SelectSQLParser.POINT - 622)) | (1 << (SelectSQLParser.POLYGON - 622)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConvertedDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def BINARY(self):
            return self.getToken(SelectSQLParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(SelectSQLParser.NCHAR, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(SelectSQLParser.LengthOneDimensionContext,0)


        def CHAR(self):
            return self.getToken(SelectSQLParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(SelectSQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(SelectSQLParser.SET, 0)

        def charsetName(self):
            return self.getTypedRuleContext(SelectSQLParser.CharsetNameContext,0)


        def DATE(self):
            return self.getToken(SelectSQLParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(SelectSQLParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(SelectSQLParser.TIME, 0)

        def DECIMAL(self):
            return self.getToken(SelectSQLParser.DECIMAL, 0)

        def lengthTwoDimension(self):
            return self.getTypedRuleContext(SelectSQLParser.LengthTwoDimensionContext,0)


        def SIGNED(self):
            return self.getToken(SelectSQLParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(SelectSQLParser.UNSIGNED, 0)

        def INTEGER(self):
            return self.getToken(SelectSQLParser.INTEGER, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_convertedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvertedDataType" ):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvertedDataType" ):
                listener.exitConvertedDataType(self)




    def convertedDataType(self):

        localctx = SelectSQLParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.BINARY, SelectSQLParser.NCHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.BINARY or _la==SelectSQLParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 732
                    self.lengthOneDimension()


                pass
            elif token in [SelectSQLParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                localctx.typeName = self.match(SelectSQLParser.CHAR)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 736
                    self.lengthOneDimension()


                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.CHARACTER:
                    self.state = 739
                    self.match(SelectSQLParser.CHARACTER)
                    self.state = 740
                    self.match(SelectSQLParser.SET)
                    self.state = 741
                    self.charsetName()


                pass
            elif token in [SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.DATETIME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (SelectSQLParser.DATE - 180)) | (1 << (SelectSQLParser.TIME - 180)) | (1 << (SelectSQLParser.DATETIME - 180)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SelectSQLParser.DECIMAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                localctx.typeName = self.match(SelectSQLParser.DECIMAL)
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 746
                    self.lengthTwoDimension()


                pass
            elif token in [SelectSQLParser.UNSIGNED, SelectSQLParser.SIGNED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 749
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.UNSIGNED or _la==SelectSQLParser.SIGNED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.INTEGER:
                    self.state = 750
                    self.match(SelectSQLParser.INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthOneDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)




    def lengthOneDimension(self):

        localctx = SelectSQLParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(SelectSQLParser.LR_BRACKET)
            self.state = 756
            self.decimalLiteral()
            self.state = 757
            self.match(SelectSQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthTwoDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)




    def lengthTwoDimension(self):

        localctx = SelectSQLParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(SelectSQLParser.LR_BRACKET)
            self.state = 760
            self.decimalLiteral()
            self.state = 761
            self.match(SelectSQLParser.COMMA)
            self.state = 762
            self.decimalLiteral()
            self.state = 763
            self.match(SelectSQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthTwoOptionalDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoOptionalDimension" ):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoOptionalDimension" ):
                listener.exitLengthTwoOptionalDimension(self)




    def lengthTwoOptionalDimension(self):

        localctx = SelectSQLParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(SelectSQLParser.LR_BRACKET)
            self.state = 766
            self.decimalLiteral()
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.COMMA:
                self.state = 767
                self.match(SelectSQLParser.COMMA)
                self.state = 768
                self.decimalLiteral()


            self.state = 771
            self.match(SelectSQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.UidContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.UidContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)




    def uidList(self):

        localctx = SelectSQLParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_uidList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.uid()
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 774
                self.match(SelectSQLParser.COMMA)
                self.state = 775
                self.uid()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.TableNameContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.TableNameContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)




    def tables(self):

        localctx = SelectSQLParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.tableName()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 782
                self.match(SelectSQLParser.COMMA)
                self.state = 783
                self.tableName()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.IndexColumnNameContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = SelectSQLParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(SelectSQLParser.LR_BRACKET)
            self.state = 790
            self.indexColumnName()
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 791
                self.match(SelectSQLParser.COMMA)
                self.state = 792
                self.indexColumnName()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 798
            self.match(SelectSQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = SelectSQLParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.expression(0)
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 801
                self.match(SelectSQLParser.COMMA)
                self.state = 802
                self.expression(0)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsWithDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionOrDefaultContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = SelectSQLParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.expressionOrDefault()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 809
                self.match(SelectSQLParser.COMMA)
                self.state = 810
                self.expressionOrDefault()
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ConstantContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstants" ):
                listener.enterConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstants" ):
                listener.exitConstants(self)




    def constants(self):

        localctx = SelectSQLParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.constant()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 817
                self.match(SelectSQLParser.COMMA)
                self.state = 818
                self.constant()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStringsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(SelectSQLParser.STRING_LITERAL)
            else:
                return self.getToken(SelectSQLParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_simpleStrings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStrings" ):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStrings" ):
                listener.exitSimpleStrings(self)




    def simpleStrings(self):

        localctx = SelectSQLParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(SelectSQLParser.STRING_LITERAL)
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 825
                self.match(SelectSQLParser.COMMA)
                self.state = 826
                self.match(SelectSQLParser.STRING_LITERAL)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(SelectSQLParser.LOCAL_ID)
            else:
                return self.getToken(SelectSQLParser.LOCAL_ID, i)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_userVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariables" ):
                listener.enterUserVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariables" ):
                listener.exitUserVariables(self)




    def userVariables(self):

        localctx = SelectSQLParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(SelectSQLParser.LOCAL_ID)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 833
                self.match(SelectSQLParser.COMMA)
                self.state = 834
                self.match(SelectSQLParser.LOCAL_ID)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(SelectSQLParser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(SelectSQLParser.ConstantContext,0)


        def currentTimestamp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.CurrentTimestampContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.CurrentTimestampContext,i)


        def ON(self):
            return self.getToken(SelectSQLParser.ON, 0)

        def UPDATE(self):
            return self.getToken(SelectSQLParser.UPDATE, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = SelectSQLParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_defaultValue)
        self._la = 0 # Token type
        try:
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.match(SelectSQLParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 842
                self.currentTimestamp()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ON:
                    self.state = 843
                    self.match(SelectSQLParser.ON)
                    self.state = 844
                    self.match(SelectSQLParser.UPDATE)
                    self.state = 845
                    self.currentTimestamp()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CurrentTimestampContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(SelectSQLParser.NOW, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SelectSQLParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(SelectSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(SelectSQLParser.LOCALTIMESTAMP, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_currentTimestamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentTimestamp" ):
                listener.enterCurrentTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentTimestamp" ):
                listener.exitCurrentTimestamp(self)




    def currentTimestamp(self):

        localctx = SelectSQLParser.CurrentTimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_currentTimestamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.CURRENT_TIMESTAMP, SelectSQLParser.LOCALTIME, SelectSQLParser.LOCALTIMESTAMP]:
                self.state = 850
                _la = self._input.LA(1)
                if not(((((_la - 227)) & ~0x3f) == 0 and ((1 << (_la - 227)) & ((1 << (SelectSQLParser.CURRENT_TIMESTAMP - 227)) | (1 << (SelectSQLParser.LOCALTIME - 227)) | (1 << (SelectSQLParser.LOCALTIMESTAMP - 227)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LR_BRACKET:
                    self.state = 851
                    self.match(SelectSQLParser.LR_BRACKET)
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 950)) & ~0x3f) == 0 and ((1 << (_la - 950)) & ((1 << (SelectSQLParser.ZERO_DECIMAL - 950)) | (1 << (SelectSQLParser.ONE_DECIMAL - 950)) | (1 << (SelectSQLParser.TWO_DECIMAL - 950)) | (1 << (SelectSQLParser.DECIMAL_LITERAL - 950)))) != 0):
                        self.state = 852
                        self.decimalLiteral()


                    self.state = 855
                    self.match(SelectSQLParser.RR_BRACKET)


                pass
            elif token in [SelectSQLParser.NOW]:
                self.state = 858
                self.match(SelectSQLParser.NOW)
                self.state = 859
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 950)) & ~0x3f) == 0 and ((1 << (_la - 950)) & ((1 << (SelectSQLParser.ZERO_DECIMAL - 950)) | (1 << (SelectSQLParser.ONE_DECIMAL - 950)) | (1 << (SelectSQLParser.TWO_DECIMAL - 950)) | (1 << (SelectSQLParser.DECIMAL_LITERAL - 950)))) != 0):
                    self.state = 860
                    self.decimalLiteral()


                self.state = 863
                self.match(SelectSQLParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(SelectSQLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = SelectSQLParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expressionOrDefault)
        try:
            self.state = 868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.CASE, SelectSQLParser.CAST, SelectSQLParser.CONVERT, SelectSQLParser.CURRENT_USER, SelectSQLParser.EXISTS, SelectSQLParser.FALSE, SelectSQLParser.IF, SelectSQLParser.INSERT, SelectSQLParser.INTERVAL, SelectSQLParser.LEFT, SelectSQLParser.NOT, SelectSQLParser.NULL_LITERAL, SelectSQLParser.REPLACE, SelectSQLParser.RIGHT, SelectSQLParser.TRUE, SelectSQLParser.VALUES, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.CHAR, SelectSQLParser.BINARY, SelectSQLParser.TEXT, SelectSQLParser.ENUM, SelectSQLParser.AVG, SelectSQLParser.BIT_AND, SelectSQLParser.BIT_OR, SelectSQLParser.BIT_XOR, SelectSQLParser.COUNT, SelectSQLParser.GROUP_CONCAT, SelectSQLParser.MAX, SelectSQLParser.MIN, SelectSQLParser.STD, SelectSQLParser.STDDEV, SelectSQLParser.STDDEV_POP, SelectSQLParser.STDDEV_SAMP, SelectSQLParser.SUM, SelectSQLParser.VAR_POP, SelectSQLParser.VAR_SAMP, SelectSQLParser.VARIANCE, SelectSQLParser.CURRENT_DATE, SelectSQLParser.CURRENT_TIME, SelectSQLParser.CURRENT_TIMESTAMP, SelectSQLParser.LOCALTIME, SelectSQLParser.CURDATE, SelectSQLParser.CURTIME, SelectSQLParser.DATE_ADD, SelectSQLParser.DATE_SUB, SelectSQLParser.EXTRACT, SelectSQLParser.LOCALTIMESTAMP, SelectSQLParser.NOW, SelectSQLParser.POSITION, SelectSQLParser.SUBSTR, SelectSQLParser.SUBSTRING, SelectSQLParser.SYSDATE, SelectSQLParser.TRIM, SelectSQLParser.UTC_DATE, SelectSQLParser.UTC_TIME, SelectSQLParser.UTC_TIMESTAMP, SelectSQLParser.ACCOUNT, SelectSQLParser.ACTION, SelectSQLParser.AFTER, SelectSQLParser.AGGREGATE, SelectSQLParser.ALGORITHM, SelectSQLParser.ANY, SelectSQLParser.AT, SelectSQLParser.AUTHORS, SelectSQLParser.AUTOCOMMIT, SelectSQLParser.AUTOEXTEND_SIZE, SelectSQLParser.AUTO_INCREMENT, SelectSQLParser.AVG_ROW_LENGTH, SelectSQLParser.BEGIN, SelectSQLParser.BINLOG, SelectSQLParser.BIT, SelectSQLParser.BLOCK, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN, SelectSQLParser.BTREE, SelectSQLParser.CASCADED, SelectSQLParser.CHAIN, SelectSQLParser.CHANNEL, SelectSQLParser.CHECKSUM, SelectSQLParser.CIPHER, SelectSQLParser.CLIENT, SelectSQLParser.COALESCE, SelectSQLParser.CODE, SelectSQLParser.COLUMNS, SelectSQLParser.COLUMN_FORMAT, SelectSQLParser.COMMENT, SelectSQLParser.COMMIT, SelectSQLParser.COMPACT, SelectSQLParser.COMPLETION, SelectSQLParser.COMPRESSED, SelectSQLParser.COMPRESSION, SelectSQLParser.CONCURRENT, SelectSQLParser.CONNECTION, SelectSQLParser.CONSISTENT, SelectSQLParser.CONTAINS, SelectSQLParser.CONTEXT, SelectSQLParser.CONTRIBUTORS, SelectSQLParser.COPY, SelectSQLParser.CPU, SelectSQLParser.DATA, SelectSQLParser.DATAFILE, SelectSQLParser.DEALLOCATE, SelectSQLParser.DEFAULT_AUTH, SelectSQLParser.DEFINER, SelectSQLParser.DELAY_KEY_WRITE, SelectSQLParser.DIRECTORY, SelectSQLParser.DISABLE, SelectSQLParser.DISCARD, SelectSQLParser.DISK, SelectSQLParser.DO, SelectSQLParser.DUMPFILE, SelectSQLParser.DUPLICATE, SelectSQLParser.DYNAMIC, SelectSQLParser.ENABLE, SelectSQLParser.ENCRYPTION, SelectSQLParser.ENDS, SelectSQLParser.ENGINE, SelectSQLParser.ENGINES, SelectSQLParser.ERROR, SelectSQLParser.ERRORS, SelectSQLParser.ESCAPE, SelectSQLParser.EVEN, SelectSQLParser.EVENT, SelectSQLParser.EVENTS, SelectSQLParser.EVERY, SelectSQLParser.EXCHANGE, SelectSQLParser.EXCLUSIVE, SelectSQLParser.EXPIRE, SelectSQLParser.EXTENT_SIZE, SelectSQLParser.FAULTS, SelectSQLParser.FIELDS, SelectSQLParser.FILE_BLOCK_SIZE, SelectSQLParser.FILTER, SelectSQLParser.FIRST, SelectSQLParser.FIXED, SelectSQLParser.FOLLOWS, SelectSQLParser.FULL, SelectSQLParser.FUNCTION, SelectSQLParser.GLOBAL, SelectSQLParser.GRANTS, SelectSQLParser.GROUP_REPLICATION, SelectSQLParser.HASH, SelectSQLParser.HOST, SelectSQLParser.IDENTIFIED, SelectSQLParser.IGNORE_SERVER_IDS, SelectSQLParser.IMPORT, SelectSQLParser.INDEXES, SelectSQLParser.INITIAL_SIZE, SelectSQLParser.INPLACE, SelectSQLParser.INSERT_METHOD, SelectSQLParser.INSTANCE, SelectSQLParser.INVOKER, SelectSQLParser.IO, SelectSQLParser.IO_THREAD, SelectSQLParser.IPC, SelectSQLParser.ISOLATION, SelectSQLParser.ISSUER, SelectSQLParser.KEY_BLOCK_SIZE, SelectSQLParser.LANGUAGE, SelectSQLParser.LAST, SelectSQLParser.LEAVES, SelectSQLParser.LESS, SelectSQLParser.LEVEL, SelectSQLParser.LIST, SelectSQLParser.LOCAL, SelectSQLParser.LOGFILE, SelectSQLParser.LOGS, SelectSQLParser.MASTER, SelectSQLParser.MASTER_AUTO_POSITION, SelectSQLParser.MASTER_CONNECT_RETRY, SelectSQLParser.MASTER_DELAY, SelectSQLParser.MASTER_HEARTBEAT_PERIOD, SelectSQLParser.MASTER_HOST, SelectSQLParser.MASTER_LOG_FILE, SelectSQLParser.MASTER_LOG_POS, SelectSQLParser.MASTER_PASSWORD, SelectSQLParser.MASTER_PORT, SelectSQLParser.MASTER_RETRY_COUNT, SelectSQLParser.MASTER_SSL, SelectSQLParser.MASTER_SSL_CA, SelectSQLParser.MASTER_SSL_CAPATH, SelectSQLParser.MASTER_SSL_CERT, SelectSQLParser.MASTER_SSL_CIPHER, SelectSQLParser.MASTER_SSL_CRL, SelectSQLParser.MASTER_SSL_CRLPATH, SelectSQLParser.MASTER_SSL_KEY, SelectSQLParser.MASTER_TLS_VERSION, SelectSQLParser.MASTER_USER, SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, SelectSQLParser.MAX_QUERIES_PER_HOUR, SelectSQLParser.MAX_ROWS, SelectSQLParser.MAX_SIZE, SelectSQLParser.MAX_UPDATES_PER_HOUR, SelectSQLParser.MAX_USER_CONNECTIONS, SelectSQLParser.MERGE, SelectSQLParser.MID, SelectSQLParser.MIGRATE, SelectSQLParser.MIN_ROWS, SelectSQLParser.MODIFY, SelectSQLParser.MUTEX, SelectSQLParser.MYSQL, SelectSQLParser.NAME, SelectSQLParser.NAMES, SelectSQLParser.NCHAR, SelectSQLParser.NEVER, SelectSQLParser.NO, SelectSQLParser.NODEGROUP, SelectSQLParser.NONE, SelectSQLParser.OFFLINE, SelectSQLParser.OFFSET, SelectSQLParser.OJ, SelectSQLParser.OLD_PASSWORD, SelectSQLParser.ONE, SelectSQLParser.ONLINE, SelectSQLParser.ONLY, SelectSQLParser.OPTIMIZER_COSTS, SelectSQLParser.OPTIONS, SelectSQLParser.OWNER, SelectSQLParser.PACK_KEYS, SelectSQLParser.PAGE, SelectSQLParser.PARSER, SelectSQLParser.PARTIAL, SelectSQLParser.PARTITIONING, SelectSQLParser.PARTITIONS, SelectSQLParser.PASSWORD, SelectSQLParser.PHASE, SelectSQLParser.PLUGIN_DIR, SelectSQLParser.PLUGINS, SelectSQLParser.PORT, SelectSQLParser.PRECEDES, SelectSQLParser.PREPARE, SelectSQLParser.PRESERVE, SelectSQLParser.PREV, SelectSQLParser.PROCESSLIST, SelectSQLParser.PROFILE, SelectSQLParser.PROFILES, SelectSQLParser.PROXY, SelectSQLParser.QUERY, SelectSQLParser.QUICK, SelectSQLParser.REBUILD, SelectSQLParser.RECOVER, SelectSQLParser.REDO_BUFFER_SIZE, SelectSQLParser.REDUNDANT, SelectSQLParser.RELAY_LOG_FILE, SelectSQLParser.RELAY_LOG_POS, SelectSQLParser.RELAYLOG, SelectSQLParser.REMOVE, SelectSQLParser.REORGANIZE, SelectSQLParser.REPAIR, SelectSQLParser.REPLICATE_DO_DB, SelectSQLParser.REPLICATE_DO_TABLE, SelectSQLParser.REPLICATE_IGNORE_DB, SelectSQLParser.REPLICATE_IGNORE_TABLE, SelectSQLParser.REPLICATE_REWRITE_DB, SelectSQLParser.REPLICATE_WILD_DO_TABLE, SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, SelectSQLParser.REPLICATION, SelectSQLParser.RESUME, SelectSQLParser.RETURNS, SelectSQLParser.ROLLBACK, SelectSQLParser.ROLLUP, SelectSQLParser.ROTATE, SelectSQLParser.ROW, SelectSQLParser.ROWS, SelectSQLParser.ROW_FORMAT, SelectSQLParser.SAVEPOINT, SelectSQLParser.SCHEDULE, SelectSQLParser.SECURITY, SelectSQLParser.SERVER, SelectSQLParser.SESSION, SelectSQLParser.SHARE, SelectSQLParser.SHARED, SelectSQLParser.SIGNED, SelectSQLParser.SIMPLE, SelectSQLParser.SLAVE, SelectSQLParser.SNAPSHOT, SelectSQLParser.SOCKET, SelectSQLParser.SOME, SelectSQLParser.SOUNDS, SelectSQLParser.SOURCE, SelectSQLParser.SQL_AFTER_GTIDS, SelectSQLParser.SQL_AFTER_MTS_GAPS, SelectSQLParser.SQL_BEFORE_GTIDS, SelectSQLParser.SQL_BUFFER_RESULT, SelectSQLParser.SQL_CACHE, SelectSQLParser.SQL_NO_CACHE, SelectSQLParser.SQL_THREAD, SelectSQLParser.START, SelectSQLParser.STARTS, SelectSQLParser.STATS_AUTO_RECALC, SelectSQLParser.STATS_PERSISTENT, SelectSQLParser.STATS_SAMPLE_PAGES, SelectSQLParser.STATUS, SelectSQLParser.STOP, SelectSQLParser.STORAGE, SelectSQLParser.STRING, SelectSQLParser.SUBJECT, SelectSQLParser.SUBPARTITION, SelectSQLParser.SUBPARTITIONS, SelectSQLParser.SUSPEND, SelectSQLParser.SWAPS, SelectSQLParser.SWITCHES, SelectSQLParser.TABLESPACE, SelectSQLParser.TEMPORARY, SelectSQLParser.TEMPTABLE, SelectSQLParser.THAN, SelectSQLParser.TRANSACTION, SelectSQLParser.TRUNCATE, SelectSQLParser.UNDEFINED, SelectSQLParser.UNDOFILE, SelectSQLParser.UNDO_BUFFER_SIZE, SelectSQLParser.UNKNOWN, SelectSQLParser.UPGRADE, SelectSQLParser.USER, SelectSQLParser.VALIDATION, SelectSQLParser.VALUE, SelectSQLParser.VARIABLES, SelectSQLParser.VIEW, SelectSQLParser.WAIT, SelectSQLParser.WARNINGS, SelectSQLParser.WITHOUT, SelectSQLParser.WORK, SelectSQLParser.WRAPPER, SelectSQLParser.X509, SelectSQLParser.XA, SelectSQLParser.XML, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.TABLES, SelectSQLParser.ROUTINE, SelectSQLParser.EXECUTE, SelectSQLParser.FILE, SelectSQLParser.PROCESS, SelectSQLParser.RELOAD, SelectSQLParser.SHUTDOWN, SelectSQLParser.SUPER, SelectSQLParser.PRIVILEGES, SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4, SelectSQLParser.ARCHIVE, SelectSQLParser.BLACKHOLE, SelectSQLParser.CSV, SelectSQLParser.FEDERATED, SelectSQLParser.INNODB, SelectSQLParser.MEMORY, SelectSQLParser.MRG_MYISAM, SelectSQLParser.MYISAM, SelectSQLParser.NDB, SelectSQLParser.NDBCLUSTER, SelectSQLParser.PERFOMANCE_SCHEMA, SelectSQLParser.REPEATABLE, SelectSQLParser.COMMITTED, SelectSQLParser.UNCOMMITTED, SelectSQLParser.SERIALIZABLE, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION, SelectSQLParser.PLUS, SelectSQLParser.MINUS, SelectSQLParser.EXCLAMATION_SYMBOL, SelectSQLParser.BIT_NOT_OP, SelectSQLParser.LR_BRACKET, SelectSQLParser.ZERO_DECIMAL, SelectSQLParser.ONE_DECIMAL, SelectSQLParser.TWO_DECIMAL, SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, SelectSQLParser.START_NATIONAL_STRING_LITERAL, SelectSQLParser.STRING_LITERAL, SelectSQLParser.DECIMAL_LITERAL, SelectSQLParser.HEXADECIMAL_LITERAL, SelectSQLParser.REAL_LITERAL, SelectSQLParser.NULL_SPEC_LITERAL, SelectSQLParser.BIT_STRING, SelectSQLParser.STRING_CHARSET_NAME, SelectSQLParser.ID, SelectSQLParser.REVERSE_QUOTE_ID, SelectSQLParser.LOCAL_ID, SelectSQLParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.expression(0)
                pass
            elif token in [SelectSQLParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.match(SelectSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SelectSQLParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SelectSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = SelectSQLParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(SelectSQLParser.IF)
            self.state = 871
            self.match(SelectSQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SelectSQLParser.IF, 0)

        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SelectSQLParser.EXISTS, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = SelectSQLParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(SelectSQLParser.IF)
            self.state = 874
            self.match(SelectSQLParser.NOT)
            self.state = 875
            self.match(SelectSQLParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(SelectSQLParser.SpecificFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecificFunctionCall" ):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecificFunctionCall" ):
                listener.exitSpecificFunctionCall(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(SelectSQLParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionCall" ):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionCall" ):
                listener.exitPasswordFunctionCall(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(SelectSQLParser.FullIdContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(SelectSQLParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(SelectSQLParser.ScalarFunctionNameContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionCall" ):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionCall" ):
                listener.exitScalarFunctionCall(self)



    def functionCall(self):

        localctx = SelectSQLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 877
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = SelectSQLParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = SelectSQLParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 879
                self.scalarFunctionName()
                self.state = 880
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SelectSQLParser.CASE) | (1 << SelectSQLParser.CAST) | (1 << SelectSQLParser.CONVERT) | (1 << SelectSQLParser.CURRENT_USER) | (1 << SelectSQLParser.EXISTS) | (1 << SelectSQLParser.FALSE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SelectSQLParser.IF - 64)) | (1 << (SelectSQLParser.INSERT - 64)) | (1 << (SelectSQLParser.INTERVAL - 64)) | (1 << (SelectSQLParser.LEFT - 64)) | (1 << (SelectSQLParser.NOT - 64)) | (1 << (SelectSQLParser.NULL_LITERAL - 64)) | (1 << (SelectSQLParser.REPLACE - 64)) | (1 << (SelectSQLParser.RIGHT - 64)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (SelectSQLParser.TRUE - 151)) | (1 << (SelectSQLParser.VALUES - 151)) | (1 << (SelectSQLParser.DATE - 151)) | (1 << (SelectSQLParser.TIME - 151)) | (1 << (SelectSQLParser.TIMESTAMP - 151)) | (1 << (SelectSQLParser.DATETIME - 151)) | (1 << (SelectSQLParser.YEAR - 151)) | (1 << (SelectSQLParser.CHAR - 151)) | (1 << (SelectSQLParser.BINARY - 151)) | (1 << (SelectSQLParser.TEXT - 151)) | (1 << (SelectSQLParser.ENUM - 151)) | (1 << (SelectSQLParser.AVG - 151)) | (1 << (SelectSQLParser.BIT_AND - 151)) | (1 << (SelectSQLParser.BIT_OR - 151)) | (1 << (SelectSQLParser.BIT_XOR - 151)) | (1 << (SelectSQLParser.COUNT - 151)) | (1 << (SelectSQLParser.GROUP_CONCAT - 151)))) != 0) or ((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (SelectSQLParser.MAX - 215)) | (1 << (SelectSQLParser.MIN - 215)) | (1 << (SelectSQLParser.STD - 215)) | (1 << (SelectSQLParser.STDDEV - 215)) | (1 << (SelectSQLParser.STDDEV_POP - 215)) | (1 << (SelectSQLParser.STDDEV_SAMP - 215)) | (1 << (SelectSQLParser.SUM - 215)) | (1 << (SelectSQLParser.VAR_POP - 215)) | (1 << (SelectSQLParser.VAR_SAMP - 215)) | (1 << (SelectSQLParser.VARIANCE - 215)) | (1 << (SelectSQLParser.CURRENT_DATE - 215)) | (1 << (SelectSQLParser.CURRENT_TIME - 215)) | (1 << (SelectSQLParser.CURRENT_TIMESTAMP - 215)) | (1 << (SelectSQLParser.LOCALTIME - 215)) | (1 << (SelectSQLParser.CURDATE - 215)) | (1 << (SelectSQLParser.CURTIME - 215)) | (1 << (SelectSQLParser.DATE_ADD - 215)) | (1 << (SelectSQLParser.DATE_SUB - 215)) | (1 << (SelectSQLParser.EXTRACT - 215)) | (1 << (SelectSQLParser.LOCALTIMESTAMP - 215)) | (1 << (SelectSQLParser.NOW - 215)) | (1 << (SelectSQLParser.POSITION - 215)) | (1 << (SelectSQLParser.SUBSTR - 215)) | (1 << (SelectSQLParser.SUBSTRING - 215)) | (1 << (SelectSQLParser.SYSDATE - 215)) | (1 << (SelectSQLParser.TRIM - 215)) | (1 << (SelectSQLParser.UTC_DATE - 215)) | (1 << (SelectSQLParser.UTC_TIME - 215)) | (1 << (SelectSQLParser.UTC_TIMESTAMP - 215)) | (1 << (SelectSQLParser.ACCOUNT - 215)) | (1 << (SelectSQLParser.ACTION - 215)) | (1 << (SelectSQLParser.AFTER - 215)) | (1 << (SelectSQLParser.AGGREGATE - 215)) | (1 << (SelectSQLParser.ALGORITHM - 215)) | (1 << (SelectSQLParser.ANY - 215)) | (1 << (SelectSQLParser.AT - 215)) | (1 << (SelectSQLParser.AUTHORS - 215)) | (1 << (SelectSQLParser.AUTOCOMMIT - 215)) | (1 << (SelectSQLParser.AUTOEXTEND_SIZE - 215)) | (1 << (SelectSQLParser.AUTO_INCREMENT - 215)) | (1 << (SelectSQLParser.AVG_ROW_LENGTH - 215)) | (1 << (SelectSQLParser.BEGIN - 215)) | (1 << (SelectSQLParser.BINLOG - 215)) | (1 << (SelectSQLParser.BIT - 215)) | (1 << (SelectSQLParser.BLOCK - 215)) | (1 << (SelectSQLParser.BOOL - 215)) | (1 << (SelectSQLParser.BOOLEAN - 215)) | (1 << (SelectSQLParser.BTREE - 215)) | (1 << (SelectSQLParser.CASCADED - 215)) | (1 << (SelectSQLParser.CHAIN - 215)) | (1 << (SelectSQLParser.CHANNEL - 215)) | (1 << (SelectSQLParser.CHECKSUM - 215)) | (1 << (SelectSQLParser.CIPHER - 215)) | (1 << (SelectSQLParser.CLIENT - 215)) | (1 << (SelectSQLParser.COALESCE - 215)) | (1 << (SelectSQLParser.CODE - 215)) | (1 << (SelectSQLParser.COLUMNS - 215)) | (1 << (SelectSQLParser.COLUMN_FORMAT - 215)) | (1 << (SelectSQLParser.COMMENT - 215)) | (1 << (SelectSQLParser.COMMIT - 215)) | (1 << (SelectSQLParser.COMPACT - 215)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (SelectSQLParser.COMPLETION - 279)) | (1 << (SelectSQLParser.COMPRESSED - 279)) | (1 << (SelectSQLParser.COMPRESSION - 279)) | (1 << (SelectSQLParser.CONCURRENT - 279)) | (1 << (SelectSQLParser.CONNECTION - 279)) | (1 << (SelectSQLParser.CONSISTENT - 279)) | (1 << (SelectSQLParser.CONTAINS - 279)) | (1 << (SelectSQLParser.CONTEXT - 279)) | (1 << (SelectSQLParser.CONTRIBUTORS - 279)) | (1 << (SelectSQLParser.COPY - 279)) | (1 << (SelectSQLParser.CPU - 279)) | (1 << (SelectSQLParser.DATA - 279)) | (1 << (SelectSQLParser.DATAFILE - 279)) | (1 << (SelectSQLParser.DEALLOCATE - 279)) | (1 << (SelectSQLParser.DEFAULT_AUTH - 279)) | (1 << (SelectSQLParser.DEFINER - 279)) | (1 << (SelectSQLParser.DELAY_KEY_WRITE - 279)) | (1 << (SelectSQLParser.DIRECTORY - 279)) | (1 << (SelectSQLParser.DISABLE - 279)) | (1 << (SelectSQLParser.DISCARD - 279)) | (1 << (SelectSQLParser.DISK - 279)) | (1 << (SelectSQLParser.DO - 279)) | (1 << (SelectSQLParser.DUMPFILE - 279)) | (1 << (SelectSQLParser.DUPLICATE - 279)) | (1 << (SelectSQLParser.DYNAMIC - 279)) | (1 << (SelectSQLParser.ENABLE - 279)) | (1 << (SelectSQLParser.ENCRYPTION - 279)) | (1 << (SelectSQLParser.ENDS - 279)) | (1 << (SelectSQLParser.ENGINE - 279)) | (1 << (SelectSQLParser.ENGINES - 279)) | (1 << (SelectSQLParser.ERROR - 279)) | (1 << (SelectSQLParser.ERRORS - 279)) | (1 << (SelectSQLParser.ESCAPE - 279)) | (1 << (SelectSQLParser.EVEN - 279)) | (1 << (SelectSQLParser.EVENT - 279)) | (1 << (SelectSQLParser.EVENTS - 279)) | (1 << (SelectSQLParser.EVERY - 279)) | (1 << (SelectSQLParser.EXCHANGE - 279)) | (1 << (SelectSQLParser.EXCLUSIVE - 279)) | (1 << (SelectSQLParser.EXPIRE - 279)) | (1 << (SelectSQLParser.EXTENT_SIZE - 279)) | (1 << (SelectSQLParser.FAULTS - 279)) | (1 << (SelectSQLParser.FIELDS - 279)) | (1 << (SelectSQLParser.FILE_BLOCK_SIZE - 279)) | (1 << (SelectSQLParser.FILTER - 279)) | (1 << (SelectSQLParser.FIRST - 279)) | (1 << (SelectSQLParser.FIXED - 279)) | (1 << (SelectSQLParser.FOLLOWS - 279)) | (1 << (SelectSQLParser.FULL - 279)) | (1 << (SelectSQLParser.FUNCTION - 279)) | (1 << (SelectSQLParser.GLOBAL - 279)) | (1 << (SelectSQLParser.GRANTS - 279)) | (1 << (SelectSQLParser.GROUP_REPLICATION - 279)) | (1 << (SelectSQLParser.HASH - 279)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (SelectSQLParser.HOST - 343)) | (1 << (SelectSQLParser.IDENTIFIED - 343)) | (1 << (SelectSQLParser.IGNORE_SERVER_IDS - 343)) | (1 << (SelectSQLParser.IMPORT - 343)) | (1 << (SelectSQLParser.INDEXES - 343)) | (1 << (SelectSQLParser.INITIAL_SIZE - 343)) | (1 << (SelectSQLParser.INPLACE - 343)) | (1 << (SelectSQLParser.INSERT_METHOD - 343)) | (1 << (SelectSQLParser.INSTANCE - 343)) | (1 << (SelectSQLParser.INVOKER - 343)) | (1 << (SelectSQLParser.IO - 343)) | (1 << (SelectSQLParser.IO_THREAD - 343)) | (1 << (SelectSQLParser.IPC - 343)) | (1 << (SelectSQLParser.ISOLATION - 343)) | (1 << (SelectSQLParser.ISSUER - 343)) | (1 << (SelectSQLParser.KEY_BLOCK_SIZE - 343)) | (1 << (SelectSQLParser.LANGUAGE - 343)) | (1 << (SelectSQLParser.LAST - 343)) | (1 << (SelectSQLParser.LEAVES - 343)) | (1 << (SelectSQLParser.LESS - 343)) | (1 << (SelectSQLParser.LEVEL - 343)) | (1 << (SelectSQLParser.LIST - 343)) | (1 << (SelectSQLParser.LOCAL - 343)) | (1 << (SelectSQLParser.LOGFILE - 343)) | (1 << (SelectSQLParser.LOGS - 343)) | (1 << (SelectSQLParser.MASTER - 343)) | (1 << (SelectSQLParser.MASTER_AUTO_POSITION - 343)) | (1 << (SelectSQLParser.MASTER_CONNECT_RETRY - 343)) | (1 << (SelectSQLParser.MASTER_DELAY - 343)) | (1 << (SelectSQLParser.MASTER_HEARTBEAT_PERIOD - 343)) | (1 << (SelectSQLParser.MASTER_HOST - 343)) | (1 << (SelectSQLParser.MASTER_LOG_FILE - 343)) | (1 << (SelectSQLParser.MASTER_LOG_POS - 343)) | (1 << (SelectSQLParser.MASTER_PASSWORD - 343)) | (1 << (SelectSQLParser.MASTER_PORT - 343)) | (1 << (SelectSQLParser.MASTER_RETRY_COUNT - 343)) | (1 << (SelectSQLParser.MASTER_SSL - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CA - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CAPATH - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CERT - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CIPHER - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CRL - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CRLPATH - 343)) | (1 << (SelectSQLParser.MASTER_SSL_KEY - 343)) | (1 << (SelectSQLParser.MASTER_TLS_VERSION - 343)) | (1 << (SelectSQLParser.MASTER_USER - 343)) | (1 << (SelectSQLParser.MAX_CONNECTIONS_PER_HOUR - 343)) | (1 << (SelectSQLParser.MAX_QUERIES_PER_HOUR - 343)) | (1 << (SelectSQLParser.MAX_ROWS - 343)) | (1 << (SelectSQLParser.MAX_SIZE - 343)) | (1 << (SelectSQLParser.MAX_UPDATES_PER_HOUR - 343)) | (1 << (SelectSQLParser.MAX_USER_CONNECTIONS - 343)) | (1 << (SelectSQLParser.MERGE - 343)) | (1 << (SelectSQLParser.MID - 343)) | (1 << (SelectSQLParser.MIGRATE - 343)) | (1 << (SelectSQLParser.MIN_ROWS - 343)) | (1 << (SelectSQLParser.MODIFY - 343)) | (1 << (SelectSQLParser.MUTEX - 343)) | (1 << (SelectSQLParser.MYSQL - 343)))) != 0) or ((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (SelectSQLParser.NAME - 407)) | (1 << (SelectSQLParser.NAMES - 407)) | (1 << (SelectSQLParser.NCHAR - 407)) | (1 << (SelectSQLParser.NEVER - 407)) | (1 << (SelectSQLParser.NO - 407)) | (1 << (SelectSQLParser.NODEGROUP - 407)) | (1 << (SelectSQLParser.NONE - 407)) | (1 << (SelectSQLParser.OFFLINE - 407)) | (1 << (SelectSQLParser.OFFSET - 407)) | (1 << (SelectSQLParser.OJ - 407)) | (1 << (SelectSQLParser.OLD_PASSWORD - 407)) | (1 << (SelectSQLParser.ONE - 407)) | (1 << (SelectSQLParser.ONLINE - 407)) | (1 << (SelectSQLParser.ONLY - 407)) | (1 << (SelectSQLParser.OPTIMIZER_COSTS - 407)) | (1 << (SelectSQLParser.OPTIONS - 407)) | (1 << (SelectSQLParser.OWNER - 407)) | (1 << (SelectSQLParser.PACK_KEYS - 407)) | (1 << (SelectSQLParser.PAGE - 407)) | (1 << (SelectSQLParser.PARSER - 407)) | (1 << (SelectSQLParser.PARTIAL - 407)) | (1 << (SelectSQLParser.PARTITIONING - 407)) | (1 << (SelectSQLParser.PARTITIONS - 407)) | (1 << (SelectSQLParser.PASSWORD - 407)) | (1 << (SelectSQLParser.PHASE - 407)) | (1 << (SelectSQLParser.PLUGIN_DIR - 407)) | (1 << (SelectSQLParser.PLUGINS - 407)) | (1 << (SelectSQLParser.PORT - 407)) | (1 << (SelectSQLParser.PRECEDES - 407)) | (1 << (SelectSQLParser.PREPARE - 407)) | (1 << (SelectSQLParser.PRESERVE - 407)) | (1 << (SelectSQLParser.PREV - 407)) | (1 << (SelectSQLParser.PROCESSLIST - 407)) | (1 << (SelectSQLParser.PROFILE - 407)) | (1 << (SelectSQLParser.PROFILES - 407)) | (1 << (SelectSQLParser.PROXY - 407)) | (1 << (SelectSQLParser.QUERY - 407)) | (1 << (SelectSQLParser.QUICK - 407)) | (1 << (SelectSQLParser.REBUILD - 407)) | (1 << (SelectSQLParser.RECOVER - 407)) | (1 << (SelectSQLParser.REDO_BUFFER_SIZE - 407)) | (1 << (SelectSQLParser.REDUNDANT - 407)) | (1 << (SelectSQLParser.RELAY_LOG_FILE - 407)) | (1 << (SelectSQLParser.RELAY_LOG_POS - 407)) | (1 << (SelectSQLParser.RELAYLOG - 407)) | (1 << (SelectSQLParser.REMOVE - 407)) | (1 << (SelectSQLParser.REORGANIZE - 407)) | (1 << (SelectSQLParser.REPAIR - 407)) | (1 << (SelectSQLParser.REPLICATE_DO_DB - 407)) | (1 << (SelectSQLParser.REPLICATE_DO_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATE_IGNORE_DB - 407)) | (1 << (SelectSQLParser.REPLICATE_IGNORE_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATE_REWRITE_DB - 407)) | (1 << (SelectSQLParser.REPLICATE_WILD_DO_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATION - 407)) | (1 << (SelectSQLParser.RESUME - 407)) | (1 << (SelectSQLParser.RETURNS - 407)) | (1 << (SelectSQLParser.ROLLBACK - 407)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (SelectSQLParser.ROLLUP - 471)) | (1 << (SelectSQLParser.ROTATE - 471)) | (1 << (SelectSQLParser.ROW - 471)) | (1 << (SelectSQLParser.ROWS - 471)) | (1 << (SelectSQLParser.ROW_FORMAT - 471)) | (1 << (SelectSQLParser.SAVEPOINT - 471)) | (1 << (SelectSQLParser.SCHEDULE - 471)) | (1 << (SelectSQLParser.SECURITY - 471)) | (1 << (SelectSQLParser.SERVER - 471)) | (1 << (SelectSQLParser.SESSION - 471)) | (1 << (SelectSQLParser.SHARE - 471)) | (1 << (SelectSQLParser.SHARED - 471)) | (1 << (SelectSQLParser.SIGNED - 471)) | (1 << (SelectSQLParser.SIMPLE - 471)) | (1 << (SelectSQLParser.SLAVE - 471)) | (1 << (SelectSQLParser.SNAPSHOT - 471)) | (1 << (SelectSQLParser.SOCKET - 471)) | (1 << (SelectSQLParser.SOME - 471)) | (1 << (SelectSQLParser.SOUNDS - 471)) | (1 << (SelectSQLParser.SOURCE - 471)) | (1 << (SelectSQLParser.SQL_AFTER_GTIDS - 471)) | (1 << (SelectSQLParser.SQL_AFTER_MTS_GAPS - 471)) | (1 << (SelectSQLParser.SQL_BEFORE_GTIDS - 471)) | (1 << (SelectSQLParser.SQL_BUFFER_RESULT - 471)) | (1 << (SelectSQLParser.SQL_CACHE - 471)) | (1 << (SelectSQLParser.SQL_NO_CACHE - 471)) | (1 << (SelectSQLParser.SQL_THREAD - 471)) | (1 << (SelectSQLParser.START - 471)) | (1 << (SelectSQLParser.STARTS - 471)) | (1 << (SelectSQLParser.STATS_AUTO_RECALC - 471)) | (1 << (SelectSQLParser.STATS_PERSISTENT - 471)) | (1 << (SelectSQLParser.STATS_SAMPLE_PAGES - 471)) | (1 << (SelectSQLParser.STATUS - 471)) | (1 << (SelectSQLParser.STOP - 471)) | (1 << (SelectSQLParser.STORAGE - 471)) | (1 << (SelectSQLParser.STRING - 471)) | (1 << (SelectSQLParser.SUBJECT - 471)) | (1 << (SelectSQLParser.SUBPARTITION - 471)) | (1 << (SelectSQLParser.SUBPARTITIONS - 471)) | (1 << (SelectSQLParser.SUSPEND - 471)) | (1 << (SelectSQLParser.SWAPS - 471)) | (1 << (SelectSQLParser.SWITCHES - 471)) | (1 << (SelectSQLParser.TABLESPACE - 471)) | (1 << (SelectSQLParser.TEMPORARY - 471)) | (1 << (SelectSQLParser.TEMPTABLE - 471)) | (1 << (SelectSQLParser.THAN - 471)) | (1 << (SelectSQLParser.TRANSACTION - 471)) | (1 << (SelectSQLParser.TRUNCATE - 471)) | (1 << (SelectSQLParser.UNDEFINED - 471)) | (1 << (SelectSQLParser.UNDOFILE - 471)) | (1 << (SelectSQLParser.UNDO_BUFFER_SIZE - 471)) | (1 << (SelectSQLParser.UNKNOWN - 471)) | (1 << (SelectSQLParser.UPGRADE - 471)) | (1 << (SelectSQLParser.USER - 471)) | (1 << (SelectSQLParser.VALIDATION - 471)) | (1 << (SelectSQLParser.VALUE - 471)))) != 0) or ((((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & ((1 << (SelectSQLParser.VARIABLES - 535)) | (1 << (SelectSQLParser.VIEW - 535)) | (1 << (SelectSQLParser.WAIT - 535)) | (1 << (SelectSQLParser.WARNINGS - 535)) | (1 << (SelectSQLParser.WITHOUT - 535)) | (1 << (SelectSQLParser.WORK - 535)) | (1 << (SelectSQLParser.WRAPPER - 535)) | (1 << (SelectSQLParser.X509 - 535)) | (1 << (SelectSQLParser.XA - 535)) | (1 << (SelectSQLParser.XML - 535)) | (1 << (SelectSQLParser.QUARTER - 535)) | (1 << (SelectSQLParser.MONTH - 535)) | (1 << (SelectSQLParser.DAY - 535)) | (1 << (SelectSQLParser.HOUR - 535)) | (1 << (SelectSQLParser.MINUTE - 535)) | (1 << (SelectSQLParser.WEEK - 535)) | (1 << (SelectSQLParser.SECOND - 535)) | (1 << (SelectSQLParser.MICROSECOND - 535)) | (1 << (SelectSQLParser.TABLES - 535)) | (1 << (SelectSQLParser.ROUTINE - 535)) | (1 << (SelectSQLParser.EXECUTE - 535)) | (1 << (SelectSQLParser.FILE - 535)) | (1 << (SelectSQLParser.PROCESS - 535)) | (1 << (SelectSQLParser.RELOAD - 535)) | (1 << (SelectSQLParser.SHUTDOWN - 535)) | (1 << (SelectSQLParser.SUPER - 535)) | (1 << (SelectSQLParser.PRIVILEGES - 535)) | (1 << (SelectSQLParser.ARMSCII8 - 535)) | (1 << (SelectSQLParser.ASCII - 535)) | (1 << (SelectSQLParser.BIG5 - 535)) | (1 << (SelectSQLParser.CP1250 - 535)) | (1 << (SelectSQLParser.CP1251 - 535)) | (1 << (SelectSQLParser.CP1256 - 535)) | (1 << (SelectSQLParser.CP1257 - 535)) | (1 << (SelectSQLParser.CP850 - 535)) | (1 << (SelectSQLParser.CP852 - 535)) | (1 << (SelectSQLParser.CP866 - 535)) | (1 << (SelectSQLParser.CP932 - 535)) | (1 << (SelectSQLParser.DEC8 - 535)) | (1 << (SelectSQLParser.EUCJPMS - 535)) | (1 << (SelectSQLParser.EUCKR - 535)) | (1 << (SelectSQLParser.GB2312 - 535)) | (1 << (SelectSQLParser.GBK - 535)) | (1 << (SelectSQLParser.GEOSTD8 - 535)) | (1 << (SelectSQLParser.GREEK - 535)) | (1 << (SelectSQLParser.HEBREW - 535)) | (1 << (SelectSQLParser.HP8 - 535)) | (1 << (SelectSQLParser.KEYBCS2 - 535)) | (1 << (SelectSQLParser.KOI8R - 535)) | (1 << (SelectSQLParser.KOI8U - 535)) | (1 << (SelectSQLParser.LATIN1 - 535)) | (1 << (SelectSQLParser.LATIN2 - 535)) | (1 << (SelectSQLParser.LATIN5 - 535)) | (1 << (SelectSQLParser.LATIN7 - 535)) | (1 << (SelectSQLParser.MACCE - 535)) | (1 << (SelectSQLParser.MACROMAN - 535)) | (1 << (SelectSQLParser.SJIS - 535)) | (1 << (SelectSQLParser.SWE7 - 535)) | (1 << (SelectSQLParser.TIS620 - 535)))) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & ((1 << (SelectSQLParser.UCS2 - 599)) | (1 << (SelectSQLParser.UJIS - 599)) | (1 << (SelectSQLParser.UTF16 - 599)) | (1 << (SelectSQLParser.UTF16LE - 599)) | (1 << (SelectSQLParser.UTF32 - 599)) | (1 << (SelectSQLParser.UTF8 - 599)) | (1 << (SelectSQLParser.UTF8MB3 - 599)) | (1 << (SelectSQLParser.UTF8MB4 - 599)) | (1 << (SelectSQLParser.ARCHIVE - 599)) | (1 << (SelectSQLParser.BLACKHOLE - 599)) | (1 << (SelectSQLParser.CSV - 599)) | (1 << (SelectSQLParser.FEDERATED - 599)) | (1 << (SelectSQLParser.INNODB - 599)) | (1 << (SelectSQLParser.MEMORY - 599)) | (1 << (SelectSQLParser.MRG_MYISAM - 599)) | (1 << (SelectSQLParser.MYISAM - 599)) | (1 << (SelectSQLParser.NDB - 599)) | (1 << (SelectSQLParser.NDBCLUSTER - 599)) | (1 << (SelectSQLParser.PERFOMANCE_SCHEMA - 599)) | (1 << (SelectSQLParser.REPEATABLE - 599)) | (1 << (SelectSQLParser.COMMITTED - 599)) | (1 << (SelectSQLParser.UNCOMMITTED - 599)) | (1 << (SelectSQLParser.SERIALIZABLE - 599)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTION - 599)) | (1 << (SelectSQLParser.LINESTRING - 599)) | (1 << (SelectSQLParser.MULTILINESTRING - 599)) | (1 << (SelectSQLParser.MULTIPOINT - 599)) | (1 << (SelectSQLParser.MULTIPOLYGON - 599)) | (1 << (SelectSQLParser.POINT - 599)) | (1 << (SelectSQLParser.POLYGON - 599)) | (1 << (SelectSQLParser.ABS - 599)) | (1 << (SelectSQLParser.ACOS - 599)) | (1 << (SelectSQLParser.ADDDATE - 599)) | (1 << (SelectSQLParser.ADDTIME - 599)) | (1 << (SelectSQLParser.AES_DECRYPT - 599)) | (1 << (SelectSQLParser.AES_ENCRYPT - 599)) | (1 << (SelectSQLParser.AREA - 599)) | (1 << (SelectSQLParser.ASBINARY - 599)) | (1 << (SelectSQLParser.ASIN - 599)) | (1 << (SelectSQLParser.ASTEXT - 599)) | (1 << (SelectSQLParser.ASWKB - 599)) | (1 << (SelectSQLParser.ASWKT - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_DECRYPT - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_DERIVE - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_ENCRYPT - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_SIGN - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_VERIFY - 599)) | (1 << (SelectSQLParser.ATAN - 599)) | (1 << (SelectSQLParser.ATAN2 - 599)) | (1 << (SelectSQLParser.BENCHMARK - 599)) | (1 << (SelectSQLParser.BIN - 599)) | (1 << (SelectSQLParser.BIT_COUNT - 599)) | (1 << (SelectSQLParser.BIT_LENGTH - 599)) | (1 << (SelectSQLParser.BUFFER - 599)) | (1 << (SelectSQLParser.CEIL - 599)) | (1 << (SelectSQLParser.CEILING - 599)) | (1 << (SelectSQLParser.CENTROID - 599)) | (1 << (SelectSQLParser.CHARACTER_LENGTH - 599)) | (1 << (SelectSQLParser.CHARSET - 599)) | (1 << (SelectSQLParser.CHAR_LENGTH - 599)) | (1 << (SelectSQLParser.COERCIBILITY - 599)) | (1 << (SelectSQLParser.COLLATION - 599)) | (1 << (SelectSQLParser.COMPRESS - 599)) | (1 << (SelectSQLParser.CONCAT - 599)))) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (SelectSQLParser.CONCAT_WS - 663)) | (1 << (SelectSQLParser.CONNECTION_ID - 663)) | (1 << (SelectSQLParser.CONV - 663)) | (1 << (SelectSQLParser.CONVERT_TZ - 663)) | (1 << (SelectSQLParser.COS - 663)) | (1 << (SelectSQLParser.COT - 663)) | (1 << (SelectSQLParser.CRC32 - 663)) | (1 << (SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1 << (SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1 << (SelectSQLParser.CREATE_DH_PARAMETERS - 663)) | (1 << (SelectSQLParser.CREATE_DIGEST - 663)) | (1 << (SelectSQLParser.CROSSES - 663)) | (1 << (SelectSQLParser.DATEDIFF - 663)) | (1 << (SelectSQLParser.DATE_FORMAT - 663)) | (1 << (SelectSQLParser.DAYNAME - 663)) | (1 << (SelectSQLParser.DAYOFMONTH - 663)) | (1 << (SelectSQLParser.DAYOFWEEK - 663)) | (1 << (SelectSQLParser.DAYOFYEAR - 663)) | (1 << (SelectSQLParser.DECODE - 663)) | (1 << (SelectSQLParser.DEGREES - 663)) | (1 << (SelectSQLParser.DES_DECRYPT - 663)) | (1 << (SelectSQLParser.DES_ENCRYPT - 663)) | (1 << (SelectSQLParser.DIMENSION - 663)) | (1 << (SelectSQLParser.DISJOINT - 663)) | (1 << (SelectSQLParser.ELT - 663)) | (1 << (SelectSQLParser.ENCODE - 663)) | (1 << (SelectSQLParser.ENCRYPT - 663)) | (1 << (SelectSQLParser.ENDPOINT - 663)) | (1 << (SelectSQLParser.ENVELOPE - 663)) | (1 << (SelectSQLParser.EQUALS - 663)) | (1 << (SelectSQLParser.EXP - 663)) | (1 << (SelectSQLParser.EXPORT_SET - 663)) | (1 << (SelectSQLParser.EXTERIORRING - 663)) | (1 << (SelectSQLParser.EXTRACTVALUE - 663)) | (1 << (SelectSQLParser.FIELD - 663)) | (1 << (SelectSQLParser.FIND_IN_SET - 663)) | (1 << (SelectSQLParser.FLOOR - 663)) | (1 << (SelectSQLParser.FORMAT - 663)) | (1 << (SelectSQLParser.FOUND_ROWS - 663)) | (1 << (SelectSQLParser.FROM_BASE64 - 663)) | (1 << (SelectSQLParser.FROM_DAYS - 663)) | (1 << (SelectSQLParser.FROM_UNIXTIME - 663)) | (1 << (SelectSQLParser.GEOMCOLLFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMCOLLFROMWKB - 663)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB - 663)) | (1 << (SelectSQLParser.GEOMETRYFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMETRYFROMWKB - 663)) | (1 << (SelectSQLParser.GEOMETRYN - 663)) | (1 << (SelectSQLParser.GEOMETRYTYPE - 663)) | (1 << (SelectSQLParser.GEOMFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMFROMWKB - 663)) | (1 << (SelectSQLParser.GET_FORMAT - 663)) | (1 << (SelectSQLParser.GET_LOCK - 663)) | (1 << (SelectSQLParser.GLENGTH - 663)) | (1 << (SelectSQLParser.GREATEST - 663)) | (1 << (SelectSQLParser.GTID_SUBSET - 663)) | (1 << (SelectSQLParser.GTID_SUBTRACT - 663)) | (1 << (SelectSQLParser.HEX - 663)) | (1 << (SelectSQLParser.IFNULL - 663)) | (1 << (SelectSQLParser.INET6_ATON - 663)) | (1 << (SelectSQLParser.INET6_NTOA - 663)) | (1 << (SelectSQLParser.INET_ATON - 663)) | (1 << (SelectSQLParser.INET_NTOA - 663)))) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & ((1 << (SelectSQLParser.INSTR - 727)) | (1 << (SelectSQLParser.INTERIORRINGN - 727)) | (1 << (SelectSQLParser.INTERSECTS - 727)) | (1 << (SelectSQLParser.ISCLOSED - 727)) | (1 << (SelectSQLParser.ISEMPTY - 727)) | (1 << (SelectSQLParser.ISNULL - 727)) | (1 << (SelectSQLParser.ISSIMPLE - 727)) | (1 << (SelectSQLParser.IS_FREE_LOCK - 727)) | (1 << (SelectSQLParser.IS_IPV4 - 727)) | (1 << (SelectSQLParser.IS_IPV4_COMPAT - 727)) | (1 << (SelectSQLParser.IS_IPV4_MAPPED - 727)) | (1 << (SelectSQLParser.IS_IPV6 - 727)) | (1 << (SelectSQLParser.IS_USED_LOCK - 727)) | (1 << (SelectSQLParser.LAST_INSERT_ID - 727)) | (1 << (SelectSQLParser.LCASE - 727)) | (1 << (SelectSQLParser.LEAST - 727)) | (1 << (SelectSQLParser.LENGTH - 727)) | (1 << (SelectSQLParser.LINEFROMTEXT - 727)) | (1 << (SelectSQLParser.LINEFROMWKB - 727)) | (1 << (SelectSQLParser.LINESTRINGFROMTEXT - 727)) | (1 << (SelectSQLParser.LINESTRINGFROMWKB - 727)) | (1 << (SelectSQLParser.LN - 727)) | (1 << (SelectSQLParser.LOAD_FILE - 727)) | (1 << (SelectSQLParser.LOCATE - 727)) | (1 << (SelectSQLParser.LOG - 727)) | (1 << (SelectSQLParser.LOG10 - 727)) | (1 << (SelectSQLParser.LOG2 - 727)) | (1 << (SelectSQLParser.LOWER - 727)) | (1 << (SelectSQLParser.LPAD - 727)) | (1 << (SelectSQLParser.LTRIM - 727)) | (1 << (SelectSQLParser.MAKEDATE - 727)) | (1 << (SelectSQLParser.MAKETIME - 727)) | (1 << (SelectSQLParser.MAKE_SET - 727)) | (1 << (SelectSQLParser.MASTER_POS_WAIT - 727)) | (1 << (SelectSQLParser.MBRCONTAINS - 727)) | (1 << (SelectSQLParser.MBRDISJOINT - 727)) | (1 << (SelectSQLParser.MBREQUAL - 727)) | (1 << (SelectSQLParser.MBRINTERSECTS - 727)) | (1 << (SelectSQLParser.MBROVERLAPS - 727)) | (1 << (SelectSQLParser.MBRTOUCHES - 727)) | (1 << (SelectSQLParser.MBRWITHIN - 727)) | (1 << (SelectSQLParser.MD5 - 727)) | (1 << (SelectSQLParser.MLINEFROMTEXT - 727)) | (1 << (SelectSQLParser.MLINEFROMWKB - 727)) | (1 << (SelectSQLParser.MONTHNAME - 727)) | (1 << (SelectSQLParser.MPOINTFROMTEXT - 727)) | (1 << (SelectSQLParser.MPOINTFROMWKB - 727)) | (1 << (SelectSQLParser.MPOLYFROMTEXT - 727)) | (1 << (SelectSQLParser.MPOLYFROMWKB - 727)) | (1 << (SelectSQLParser.MULTILINESTRINGFROMTEXT - 727)) | (1 << (SelectSQLParser.MULTILINESTRINGFROMWKB - 727)) | (1 << (SelectSQLParser.MULTIPOINTFROMTEXT - 727)) | (1 << (SelectSQLParser.MULTIPOINTFROMWKB - 727)) | (1 << (SelectSQLParser.MULTIPOLYGONFROMTEXT - 727)) | (1 << (SelectSQLParser.MULTIPOLYGONFROMWKB - 727)) | (1 << (SelectSQLParser.NAME_CONST - 727)) | (1 << (SelectSQLParser.NULLIF - 727)) | (1 << (SelectSQLParser.NUMGEOMETRIES - 727)) | (1 << (SelectSQLParser.NUMINTERIORRINGS - 727)) | (1 << (SelectSQLParser.NUMPOINTS - 727)) | (1 << (SelectSQLParser.OCT - 727)) | (1 << (SelectSQLParser.OCTET_LENGTH - 727)) | (1 << (SelectSQLParser.ORD - 727)) | (1 << (SelectSQLParser.OVERLAPS - 727)))) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & ((1 << (SelectSQLParser.PERIOD_ADD - 791)) | (1 << (SelectSQLParser.PERIOD_DIFF - 791)) | (1 << (SelectSQLParser.PI - 791)) | (1 << (SelectSQLParser.POINTFROMTEXT - 791)) | (1 << (SelectSQLParser.POINTFROMWKB - 791)) | (1 << (SelectSQLParser.POINTN - 791)) | (1 << (SelectSQLParser.POLYFROMTEXT - 791)) | (1 << (SelectSQLParser.POLYFROMWKB - 791)) | (1 << (SelectSQLParser.POLYGONFROMTEXT - 791)) | (1 << (SelectSQLParser.POLYGONFROMWKB - 791)) | (1 << (SelectSQLParser.POW - 791)) | (1 << (SelectSQLParser.POWER - 791)) | (1 << (SelectSQLParser.QUOTE - 791)) | (1 << (SelectSQLParser.RADIANS - 791)) | (1 << (SelectSQLParser.RAND - 791)) | (1 << (SelectSQLParser.RANDOM_BYTES - 791)) | (1 << (SelectSQLParser.RELEASE_LOCK - 791)) | (1 << (SelectSQLParser.REVERSE - 791)) | (1 << (SelectSQLParser.ROUND - 791)) | (1 << (SelectSQLParser.ROW_COUNT - 791)) | (1 << (SelectSQLParser.RPAD - 791)) | (1 << (SelectSQLParser.RTRIM - 791)) | (1 << (SelectSQLParser.SEC_TO_TIME - 791)) | (1 << (SelectSQLParser.SESSION_USER - 791)) | (1 << (SelectSQLParser.SHA - 791)) | (1 << (SelectSQLParser.SHA1 - 791)) | (1 << (SelectSQLParser.SHA2 - 791)) | (1 << (SelectSQLParser.SIGN - 791)) | (1 << (SelectSQLParser.SIN - 791)) | (1 << (SelectSQLParser.SLEEP - 791)) | (1 << (SelectSQLParser.SOUNDEX - 791)) | (1 << (SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1 << (SelectSQLParser.SQRT - 791)) | (1 << (SelectSQLParser.SRID - 791)) | (1 << (SelectSQLParser.STARTPOINT - 791)) | (1 << (SelectSQLParser.STRCMP - 791)) | (1 << (SelectSQLParser.STR_TO_DATE - 791)) | (1 << (SelectSQLParser.ST_AREA - 791)) | (1 << (SelectSQLParser.ST_ASBINARY - 791)) | (1 << (SelectSQLParser.ST_ASTEXT - 791)) | (1 << (SelectSQLParser.ST_ASWKB - 791)) | (1 << (SelectSQLParser.ST_ASWKT - 791)) | (1 << (SelectSQLParser.ST_BUFFER - 791)) | (1 << (SelectSQLParser.ST_CENTROID - 791)) | (1 << (SelectSQLParser.ST_CONTAINS - 791)) | (1 << (SelectSQLParser.ST_CROSSES - 791)) | (1 << (SelectSQLParser.ST_DIFFERENCE - 791)) | (1 << (SelectSQLParser.ST_DIMENSION - 791)) | (1 << (SelectSQLParser.ST_DISJOINT - 791)) | (1 << (SelectSQLParser.ST_DISTANCE - 791)) | (1 << (SelectSQLParser.ST_ENDPOINT - 791)) | (1 << (SelectSQLParser.ST_ENVELOPE - 791)) | (1 << (SelectSQLParser.ST_EQUALS - 791)) | (1 << (SelectSQLParser.ST_EXTERIORRING - 791)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMTEXT - 791)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMTXT - 791)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMWKB - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYFROMTEXT - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYFROMWKB - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYN - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYTYPE - 791)) | (1 << (SelectSQLParser.ST_GEOMFROMTEXT - 791)))) != 0) or ((((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & ((1 << (SelectSQLParser.ST_GEOMFROMWKB - 855)) | (1 << (SelectSQLParser.ST_INTERIORRINGN - 855)) | (1 << (SelectSQLParser.ST_INTERSECTION - 855)) | (1 << (SelectSQLParser.ST_INTERSECTS - 855)) | (1 << (SelectSQLParser.ST_ISCLOSED - 855)) | (1 << (SelectSQLParser.ST_ISEMPTY - 855)) | (1 << (SelectSQLParser.ST_ISSIMPLE - 855)) | (1 << (SelectSQLParser.ST_LINEFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_LINEFROMWKB - 855)) | (1 << (SelectSQLParser.ST_LINESTRINGFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_LINESTRINGFROMWKB - 855)) | (1 << (SelectSQLParser.ST_NUMGEOMETRIES - 855)) | (1 << (SelectSQLParser.ST_NUMINTERIORRING - 855)) | (1 << (SelectSQLParser.ST_NUMINTERIORRINGS - 855)) | (1 << (SelectSQLParser.ST_NUMPOINTS - 855)) | (1 << (SelectSQLParser.ST_OVERLAPS - 855)) | (1 << (SelectSQLParser.ST_POINTFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_POINTFROMWKB - 855)) | (1 << (SelectSQLParser.ST_POINTN - 855)) | (1 << (SelectSQLParser.ST_POLYFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_POLYFROMWKB - 855)) | (1 << (SelectSQLParser.ST_POLYGONFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_POLYGONFROMWKB - 855)) | (1 << (SelectSQLParser.ST_SRID - 855)) | (1 << (SelectSQLParser.ST_STARTPOINT - 855)) | (1 << (SelectSQLParser.ST_SYMDIFFERENCE - 855)) | (1 << (SelectSQLParser.ST_TOUCHES - 855)) | (1 << (SelectSQLParser.ST_UNION - 855)) | (1 << (SelectSQLParser.ST_WITHIN - 855)) | (1 << (SelectSQLParser.ST_X - 855)) | (1 << (SelectSQLParser.ST_Y - 855)) | (1 << (SelectSQLParser.SUBDATE - 855)) | (1 << (SelectSQLParser.SUBSTRING_INDEX - 855)) | (1 << (SelectSQLParser.SUBTIME - 855)) | (1 << (SelectSQLParser.SYSTEM_USER - 855)) | (1 << (SelectSQLParser.TAN - 855)) | (1 << (SelectSQLParser.TIMEDIFF - 855)) | (1 << (SelectSQLParser.TIMESTAMPADD - 855)) | (1 << (SelectSQLParser.TIMESTAMPDIFF - 855)) | (1 << (SelectSQLParser.TIME_FORMAT - 855)) | (1 << (SelectSQLParser.TIME_TO_SEC - 855)) | (1 << (SelectSQLParser.TOUCHES - 855)) | (1 << (SelectSQLParser.TO_BASE64 - 855)) | (1 << (SelectSQLParser.TO_DAYS - 855)) | (1 << (SelectSQLParser.TO_SECONDS - 855)) | (1 << (SelectSQLParser.UCASE - 855)) | (1 << (SelectSQLParser.UNCOMPRESS - 855)) | (1 << (SelectSQLParser.UNCOMPRESSED_LENGTH - 855)) | (1 << (SelectSQLParser.UNHEX - 855)) | (1 << (SelectSQLParser.UNIX_TIMESTAMP - 855)) | (1 << (SelectSQLParser.UPDATEXML - 855)) | (1 << (SelectSQLParser.UPPER - 855)) | (1 << (SelectSQLParser.UUID - 855)) | (1 << (SelectSQLParser.UUID_SHORT - 855)) | (1 << (SelectSQLParser.VALIDATE_PASSWORD_STRENGTH - 855)) | (1 << (SelectSQLParser.VERSION - 855)) | (1 << (SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1 << (SelectSQLParser.WEEKDAY - 855)) | (1 << (SelectSQLParser.WEEKOFYEAR - 855)) | (1 << (SelectSQLParser.WEIGHT_STRING - 855)) | (1 << (SelectSQLParser.WITHIN - 855)) | (1 << (SelectSQLParser.YEARWEEK - 855)) | (1 << (SelectSQLParser.Y_FUNCTION - 855)) | (1 << (SelectSQLParser.X_FUNCTION - 855)))) != 0) or ((((_la - 931)) & ~0x3f) == 0 and ((1 << (_la - 931)) & ((1 << (SelectSQLParser.PLUS - 931)) | (1 << (SelectSQLParser.MINUS - 931)) | (1 << (SelectSQLParser.EXCLAMATION_SYMBOL - 931)) | (1 << (SelectSQLParser.BIT_NOT_OP - 931)) | (1 << (SelectSQLParser.LR_BRACKET - 931)) | (1 << (SelectSQLParser.ZERO_DECIMAL - 931)) | (1 << (SelectSQLParser.ONE_DECIMAL - 931)) | (1 << (SelectSQLParser.TWO_DECIMAL - 931)) | (1 << (SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING - 931)) | (1 << (SelectSQLParser.START_NATIONAL_STRING_LITERAL - 931)) | (1 << (SelectSQLParser.STRING_LITERAL - 931)) | (1 << (SelectSQLParser.DECIMAL_LITERAL - 931)) | (1 << (SelectSQLParser.HEXADECIMAL_LITERAL - 931)) | (1 << (SelectSQLParser.REAL_LITERAL - 931)) | (1 << (SelectSQLParser.NULL_SPEC_LITERAL - 931)) | (1 << (SelectSQLParser.BIT_STRING - 931)) | (1 << (SelectSQLParser.STRING_CHARSET_NAME - 931)) | (1 << (SelectSQLParser.ID - 931)) | (1 << (SelectSQLParser.REVERSE_QUOTE_ID - 931)) | (1 << (SelectSQLParser.LOCAL_ID - 931)) | (1 << (SelectSQLParser.GLOBAL_ID - 931)))) != 0):
                    self.state = 881
                    self.functionArgs()


                self.state = 884
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = SelectSQLParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 886
                self.fullId()
                self.state = 887
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SelectSQLParser.CASE) | (1 << SelectSQLParser.CAST) | (1 << SelectSQLParser.CONVERT) | (1 << SelectSQLParser.CURRENT_USER) | (1 << SelectSQLParser.EXISTS) | (1 << SelectSQLParser.FALSE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SelectSQLParser.IF - 64)) | (1 << (SelectSQLParser.INSERT - 64)) | (1 << (SelectSQLParser.INTERVAL - 64)) | (1 << (SelectSQLParser.LEFT - 64)) | (1 << (SelectSQLParser.NOT - 64)) | (1 << (SelectSQLParser.NULL_LITERAL - 64)) | (1 << (SelectSQLParser.REPLACE - 64)) | (1 << (SelectSQLParser.RIGHT - 64)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (SelectSQLParser.TRUE - 151)) | (1 << (SelectSQLParser.VALUES - 151)) | (1 << (SelectSQLParser.DATE - 151)) | (1 << (SelectSQLParser.TIME - 151)) | (1 << (SelectSQLParser.TIMESTAMP - 151)) | (1 << (SelectSQLParser.DATETIME - 151)) | (1 << (SelectSQLParser.YEAR - 151)) | (1 << (SelectSQLParser.CHAR - 151)) | (1 << (SelectSQLParser.BINARY - 151)) | (1 << (SelectSQLParser.TEXT - 151)) | (1 << (SelectSQLParser.ENUM - 151)) | (1 << (SelectSQLParser.AVG - 151)) | (1 << (SelectSQLParser.BIT_AND - 151)) | (1 << (SelectSQLParser.BIT_OR - 151)) | (1 << (SelectSQLParser.BIT_XOR - 151)) | (1 << (SelectSQLParser.COUNT - 151)) | (1 << (SelectSQLParser.GROUP_CONCAT - 151)))) != 0) or ((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (SelectSQLParser.MAX - 215)) | (1 << (SelectSQLParser.MIN - 215)) | (1 << (SelectSQLParser.STD - 215)) | (1 << (SelectSQLParser.STDDEV - 215)) | (1 << (SelectSQLParser.STDDEV_POP - 215)) | (1 << (SelectSQLParser.STDDEV_SAMP - 215)) | (1 << (SelectSQLParser.SUM - 215)) | (1 << (SelectSQLParser.VAR_POP - 215)) | (1 << (SelectSQLParser.VAR_SAMP - 215)) | (1 << (SelectSQLParser.VARIANCE - 215)) | (1 << (SelectSQLParser.CURRENT_DATE - 215)) | (1 << (SelectSQLParser.CURRENT_TIME - 215)) | (1 << (SelectSQLParser.CURRENT_TIMESTAMP - 215)) | (1 << (SelectSQLParser.LOCALTIME - 215)) | (1 << (SelectSQLParser.CURDATE - 215)) | (1 << (SelectSQLParser.CURTIME - 215)) | (1 << (SelectSQLParser.DATE_ADD - 215)) | (1 << (SelectSQLParser.DATE_SUB - 215)) | (1 << (SelectSQLParser.EXTRACT - 215)) | (1 << (SelectSQLParser.LOCALTIMESTAMP - 215)) | (1 << (SelectSQLParser.NOW - 215)) | (1 << (SelectSQLParser.POSITION - 215)) | (1 << (SelectSQLParser.SUBSTR - 215)) | (1 << (SelectSQLParser.SUBSTRING - 215)) | (1 << (SelectSQLParser.SYSDATE - 215)) | (1 << (SelectSQLParser.TRIM - 215)) | (1 << (SelectSQLParser.UTC_DATE - 215)) | (1 << (SelectSQLParser.UTC_TIME - 215)) | (1 << (SelectSQLParser.UTC_TIMESTAMP - 215)) | (1 << (SelectSQLParser.ACCOUNT - 215)) | (1 << (SelectSQLParser.ACTION - 215)) | (1 << (SelectSQLParser.AFTER - 215)) | (1 << (SelectSQLParser.AGGREGATE - 215)) | (1 << (SelectSQLParser.ALGORITHM - 215)) | (1 << (SelectSQLParser.ANY - 215)) | (1 << (SelectSQLParser.AT - 215)) | (1 << (SelectSQLParser.AUTHORS - 215)) | (1 << (SelectSQLParser.AUTOCOMMIT - 215)) | (1 << (SelectSQLParser.AUTOEXTEND_SIZE - 215)) | (1 << (SelectSQLParser.AUTO_INCREMENT - 215)) | (1 << (SelectSQLParser.AVG_ROW_LENGTH - 215)) | (1 << (SelectSQLParser.BEGIN - 215)) | (1 << (SelectSQLParser.BINLOG - 215)) | (1 << (SelectSQLParser.BIT - 215)) | (1 << (SelectSQLParser.BLOCK - 215)) | (1 << (SelectSQLParser.BOOL - 215)) | (1 << (SelectSQLParser.BOOLEAN - 215)) | (1 << (SelectSQLParser.BTREE - 215)) | (1 << (SelectSQLParser.CASCADED - 215)) | (1 << (SelectSQLParser.CHAIN - 215)) | (1 << (SelectSQLParser.CHANNEL - 215)) | (1 << (SelectSQLParser.CHECKSUM - 215)) | (1 << (SelectSQLParser.CIPHER - 215)) | (1 << (SelectSQLParser.CLIENT - 215)) | (1 << (SelectSQLParser.COALESCE - 215)) | (1 << (SelectSQLParser.CODE - 215)) | (1 << (SelectSQLParser.COLUMNS - 215)) | (1 << (SelectSQLParser.COLUMN_FORMAT - 215)) | (1 << (SelectSQLParser.COMMENT - 215)) | (1 << (SelectSQLParser.COMMIT - 215)) | (1 << (SelectSQLParser.COMPACT - 215)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (SelectSQLParser.COMPLETION - 279)) | (1 << (SelectSQLParser.COMPRESSED - 279)) | (1 << (SelectSQLParser.COMPRESSION - 279)) | (1 << (SelectSQLParser.CONCURRENT - 279)) | (1 << (SelectSQLParser.CONNECTION - 279)) | (1 << (SelectSQLParser.CONSISTENT - 279)) | (1 << (SelectSQLParser.CONTAINS - 279)) | (1 << (SelectSQLParser.CONTEXT - 279)) | (1 << (SelectSQLParser.CONTRIBUTORS - 279)) | (1 << (SelectSQLParser.COPY - 279)) | (1 << (SelectSQLParser.CPU - 279)) | (1 << (SelectSQLParser.DATA - 279)) | (1 << (SelectSQLParser.DATAFILE - 279)) | (1 << (SelectSQLParser.DEALLOCATE - 279)) | (1 << (SelectSQLParser.DEFAULT_AUTH - 279)) | (1 << (SelectSQLParser.DEFINER - 279)) | (1 << (SelectSQLParser.DELAY_KEY_WRITE - 279)) | (1 << (SelectSQLParser.DIRECTORY - 279)) | (1 << (SelectSQLParser.DISABLE - 279)) | (1 << (SelectSQLParser.DISCARD - 279)) | (1 << (SelectSQLParser.DISK - 279)) | (1 << (SelectSQLParser.DO - 279)) | (1 << (SelectSQLParser.DUMPFILE - 279)) | (1 << (SelectSQLParser.DUPLICATE - 279)) | (1 << (SelectSQLParser.DYNAMIC - 279)) | (1 << (SelectSQLParser.ENABLE - 279)) | (1 << (SelectSQLParser.ENCRYPTION - 279)) | (1 << (SelectSQLParser.ENDS - 279)) | (1 << (SelectSQLParser.ENGINE - 279)) | (1 << (SelectSQLParser.ENGINES - 279)) | (1 << (SelectSQLParser.ERROR - 279)) | (1 << (SelectSQLParser.ERRORS - 279)) | (1 << (SelectSQLParser.ESCAPE - 279)) | (1 << (SelectSQLParser.EVEN - 279)) | (1 << (SelectSQLParser.EVENT - 279)) | (1 << (SelectSQLParser.EVENTS - 279)) | (1 << (SelectSQLParser.EVERY - 279)) | (1 << (SelectSQLParser.EXCHANGE - 279)) | (1 << (SelectSQLParser.EXCLUSIVE - 279)) | (1 << (SelectSQLParser.EXPIRE - 279)) | (1 << (SelectSQLParser.EXTENT_SIZE - 279)) | (1 << (SelectSQLParser.FAULTS - 279)) | (1 << (SelectSQLParser.FIELDS - 279)) | (1 << (SelectSQLParser.FILE_BLOCK_SIZE - 279)) | (1 << (SelectSQLParser.FILTER - 279)) | (1 << (SelectSQLParser.FIRST - 279)) | (1 << (SelectSQLParser.FIXED - 279)) | (1 << (SelectSQLParser.FOLLOWS - 279)) | (1 << (SelectSQLParser.FULL - 279)) | (1 << (SelectSQLParser.FUNCTION - 279)) | (1 << (SelectSQLParser.GLOBAL - 279)) | (1 << (SelectSQLParser.GRANTS - 279)) | (1 << (SelectSQLParser.GROUP_REPLICATION - 279)) | (1 << (SelectSQLParser.HASH - 279)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (SelectSQLParser.HOST - 343)) | (1 << (SelectSQLParser.IDENTIFIED - 343)) | (1 << (SelectSQLParser.IGNORE_SERVER_IDS - 343)) | (1 << (SelectSQLParser.IMPORT - 343)) | (1 << (SelectSQLParser.INDEXES - 343)) | (1 << (SelectSQLParser.INITIAL_SIZE - 343)) | (1 << (SelectSQLParser.INPLACE - 343)) | (1 << (SelectSQLParser.INSERT_METHOD - 343)) | (1 << (SelectSQLParser.INSTANCE - 343)) | (1 << (SelectSQLParser.INVOKER - 343)) | (1 << (SelectSQLParser.IO - 343)) | (1 << (SelectSQLParser.IO_THREAD - 343)) | (1 << (SelectSQLParser.IPC - 343)) | (1 << (SelectSQLParser.ISOLATION - 343)) | (1 << (SelectSQLParser.ISSUER - 343)) | (1 << (SelectSQLParser.KEY_BLOCK_SIZE - 343)) | (1 << (SelectSQLParser.LANGUAGE - 343)) | (1 << (SelectSQLParser.LAST - 343)) | (1 << (SelectSQLParser.LEAVES - 343)) | (1 << (SelectSQLParser.LESS - 343)) | (1 << (SelectSQLParser.LEVEL - 343)) | (1 << (SelectSQLParser.LIST - 343)) | (1 << (SelectSQLParser.LOCAL - 343)) | (1 << (SelectSQLParser.LOGFILE - 343)) | (1 << (SelectSQLParser.LOGS - 343)) | (1 << (SelectSQLParser.MASTER - 343)) | (1 << (SelectSQLParser.MASTER_AUTO_POSITION - 343)) | (1 << (SelectSQLParser.MASTER_CONNECT_RETRY - 343)) | (1 << (SelectSQLParser.MASTER_DELAY - 343)) | (1 << (SelectSQLParser.MASTER_HEARTBEAT_PERIOD - 343)) | (1 << (SelectSQLParser.MASTER_HOST - 343)) | (1 << (SelectSQLParser.MASTER_LOG_FILE - 343)) | (1 << (SelectSQLParser.MASTER_LOG_POS - 343)) | (1 << (SelectSQLParser.MASTER_PASSWORD - 343)) | (1 << (SelectSQLParser.MASTER_PORT - 343)) | (1 << (SelectSQLParser.MASTER_RETRY_COUNT - 343)) | (1 << (SelectSQLParser.MASTER_SSL - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CA - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CAPATH - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CERT - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CIPHER - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CRL - 343)) | (1 << (SelectSQLParser.MASTER_SSL_CRLPATH - 343)) | (1 << (SelectSQLParser.MASTER_SSL_KEY - 343)) | (1 << (SelectSQLParser.MASTER_TLS_VERSION - 343)) | (1 << (SelectSQLParser.MASTER_USER - 343)) | (1 << (SelectSQLParser.MAX_CONNECTIONS_PER_HOUR - 343)) | (1 << (SelectSQLParser.MAX_QUERIES_PER_HOUR - 343)) | (1 << (SelectSQLParser.MAX_ROWS - 343)) | (1 << (SelectSQLParser.MAX_SIZE - 343)) | (1 << (SelectSQLParser.MAX_UPDATES_PER_HOUR - 343)) | (1 << (SelectSQLParser.MAX_USER_CONNECTIONS - 343)) | (1 << (SelectSQLParser.MERGE - 343)) | (1 << (SelectSQLParser.MID - 343)) | (1 << (SelectSQLParser.MIGRATE - 343)) | (1 << (SelectSQLParser.MIN_ROWS - 343)) | (1 << (SelectSQLParser.MODIFY - 343)) | (1 << (SelectSQLParser.MUTEX - 343)) | (1 << (SelectSQLParser.MYSQL - 343)))) != 0) or ((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (SelectSQLParser.NAME - 407)) | (1 << (SelectSQLParser.NAMES - 407)) | (1 << (SelectSQLParser.NCHAR - 407)) | (1 << (SelectSQLParser.NEVER - 407)) | (1 << (SelectSQLParser.NO - 407)) | (1 << (SelectSQLParser.NODEGROUP - 407)) | (1 << (SelectSQLParser.NONE - 407)) | (1 << (SelectSQLParser.OFFLINE - 407)) | (1 << (SelectSQLParser.OFFSET - 407)) | (1 << (SelectSQLParser.OJ - 407)) | (1 << (SelectSQLParser.OLD_PASSWORD - 407)) | (1 << (SelectSQLParser.ONE - 407)) | (1 << (SelectSQLParser.ONLINE - 407)) | (1 << (SelectSQLParser.ONLY - 407)) | (1 << (SelectSQLParser.OPTIMIZER_COSTS - 407)) | (1 << (SelectSQLParser.OPTIONS - 407)) | (1 << (SelectSQLParser.OWNER - 407)) | (1 << (SelectSQLParser.PACK_KEYS - 407)) | (1 << (SelectSQLParser.PAGE - 407)) | (1 << (SelectSQLParser.PARSER - 407)) | (1 << (SelectSQLParser.PARTIAL - 407)) | (1 << (SelectSQLParser.PARTITIONING - 407)) | (1 << (SelectSQLParser.PARTITIONS - 407)) | (1 << (SelectSQLParser.PASSWORD - 407)) | (1 << (SelectSQLParser.PHASE - 407)) | (1 << (SelectSQLParser.PLUGIN_DIR - 407)) | (1 << (SelectSQLParser.PLUGINS - 407)) | (1 << (SelectSQLParser.PORT - 407)) | (1 << (SelectSQLParser.PRECEDES - 407)) | (1 << (SelectSQLParser.PREPARE - 407)) | (1 << (SelectSQLParser.PRESERVE - 407)) | (1 << (SelectSQLParser.PREV - 407)) | (1 << (SelectSQLParser.PROCESSLIST - 407)) | (1 << (SelectSQLParser.PROFILE - 407)) | (1 << (SelectSQLParser.PROFILES - 407)) | (1 << (SelectSQLParser.PROXY - 407)) | (1 << (SelectSQLParser.QUERY - 407)) | (1 << (SelectSQLParser.QUICK - 407)) | (1 << (SelectSQLParser.REBUILD - 407)) | (1 << (SelectSQLParser.RECOVER - 407)) | (1 << (SelectSQLParser.REDO_BUFFER_SIZE - 407)) | (1 << (SelectSQLParser.REDUNDANT - 407)) | (1 << (SelectSQLParser.RELAY_LOG_FILE - 407)) | (1 << (SelectSQLParser.RELAY_LOG_POS - 407)) | (1 << (SelectSQLParser.RELAYLOG - 407)) | (1 << (SelectSQLParser.REMOVE - 407)) | (1 << (SelectSQLParser.REORGANIZE - 407)) | (1 << (SelectSQLParser.REPAIR - 407)) | (1 << (SelectSQLParser.REPLICATE_DO_DB - 407)) | (1 << (SelectSQLParser.REPLICATE_DO_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATE_IGNORE_DB - 407)) | (1 << (SelectSQLParser.REPLICATE_IGNORE_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATE_REWRITE_DB - 407)) | (1 << (SelectSQLParser.REPLICATE_WILD_DO_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE - 407)) | (1 << (SelectSQLParser.REPLICATION - 407)) | (1 << (SelectSQLParser.RESUME - 407)) | (1 << (SelectSQLParser.RETURNS - 407)) | (1 << (SelectSQLParser.ROLLBACK - 407)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (SelectSQLParser.ROLLUP - 471)) | (1 << (SelectSQLParser.ROTATE - 471)) | (1 << (SelectSQLParser.ROW - 471)) | (1 << (SelectSQLParser.ROWS - 471)) | (1 << (SelectSQLParser.ROW_FORMAT - 471)) | (1 << (SelectSQLParser.SAVEPOINT - 471)) | (1 << (SelectSQLParser.SCHEDULE - 471)) | (1 << (SelectSQLParser.SECURITY - 471)) | (1 << (SelectSQLParser.SERVER - 471)) | (1 << (SelectSQLParser.SESSION - 471)) | (1 << (SelectSQLParser.SHARE - 471)) | (1 << (SelectSQLParser.SHARED - 471)) | (1 << (SelectSQLParser.SIGNED - 471)) | (1 << (SelectSQLParser.SIMPLE - 471)) | (1 << (SelectSQLParser.SLAVE - 471)) | (1 << (SelectSQLParser.SNAPSHOT - 471)) | (1 << (SelectSQLParser.SOCKET - 471)) | (1 << (SelectSQLParser.SOME - 471)) | (1 << (SelectSQLParser.SOUNDS - 471)) | (1 << (SelectSQLParser.SOURCE - 471)) | (1 << (SelectSQLParser.SQL_AFTER_GTIDS - 471)) | (1 << (SelectSQLParser.SQL_AFTER_MTS_GAPS - 471)) | (1 << (SelectSQLParser.SQL_BEFORE_GTIDS - 471)) | (1 << (SelectSQLParser.SQL_BUFFER_RESULT - 471)) | (1 << (SelectSQLParser.SQL_CACHE - 471)) | (1 << (SelectSQLParser.SQL_NO_CACHE - 471)) | (1 << (SelectSQLParser.SQL_THREAD - 471)) | (1 << (SelectSQLParser.START - 471)) | (1 << (SelectSQLParser.STARTS - 471)) | (1 << (SelectSQLParser.STATS_AUTO_RECALC - 471)) | (1 << (SelectSQLParser.STATS_PERSISTENT - 471)) | (1 << (SelectSQLParser.STATS_SAMPLE_PAGES - 471)) | (1 << (SelectSQLParser.STATUS - 471)) | (1 << (SelectSQLParser.STOP - 471)) | (1 << (SelectSQLParser.STORAGE - 471)) | (1 << (SelectSQLParser.STRING - 471)) | (1 << (SelectSQLParser.SUBJECT - 471)) | (1 << (SelectSQLParser.SUBPARTITION - 471)) | (1 << (SelectSQLParser.SUBPARTITIONS - 471)) | (1 << (SelectSQLParser.SUSPEND - 471)) | (1 << (SelectSQLParser.SWAPS - 471)) | (1 << (SelectSQLParser.SWITCHES - 471)) | (1 << (SelectSQLParser.TABLESPACE - 471)) | (1 << (SelectSQLParser.TEMPORARY - 471)) | (1 << (SelectSQLParser.TEMPTABLE - 471)) | (1 << (SelectSQLParser.THAN - 471)) | (1 << (SelectSQLParser.TRANSACTION - 471)) | (1 << (SelectSQLParser.TRUNCATE - 471)) | (1 << (SelectSQLParser.UNDEFINED - 471)) | (1 << (SelectSQLParser.UNDOFILE - 471)) | (1 << (SelectSQLParser.UNDO_BUFFER_SIZE - 471)) | (1 << (SelectSQLParser.UNKNOWN - 471)) | (1 << (SelectSQLParser.UPGRADE - 471)) | (1 << (SelectSQLParser.USER - 471)) | (1 << (SelectSQLParser.VALIDATION - 471)) | (1 << (SelectSQLParser.VALUE - 471)))) != 0) or ((((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & ((1 << (SelectSQLParser.VARIABLES - 535)) | (1 << (SelectSQLParser.VIEW - 535)) | (1 << (SelectSQLParser.WAIT - 535)) | (1 << (SelectSQLParser.WARNINGS - 535)) | (1 << (SelectSQLParser.WITHOUT - 535)) | (1 << (SelectSQLParser.WORK - 535)) | (1 << (SelectSQLParser.WRAPPER - 535)) | (1 << (SelectSQLParser.X509 - 535)) | (1 << (SelectSQLParser.XA - 535)) | (1 << (SelectSQLParser.XML - 535)) | (1 << (SelectSQLParser.QUARTER - 535)) | (1 << (SelectSQLParser.MONTH - 535)) | (1 << (SelectSQLParser.DAY - 535)) | (1 << (SelectSQLParser.HOUR - 535)) | (1 << (SelectSQLParser.MINUTE - 535)) | (1 << (SelectSQLParser.WEEK - 535)) | (1 << (SelectSQLParser.SECOND - 535)) | (1 << (SelectSQLParser.MICROSECOND - 535)) | (1 << (SelectSQLParser.TABLES - 535)) | (1 << (SelectSQLParser.ROUTINE - 535)) | (1 << (SelectSQLParser.EXECUTE - 535)) | (1 << (SelectSQLParser.FILE - 535)) | (1 << (SelectSQLParser.PROCESS - 535)) | (1 << (SelectSQLParser.RELOAD - 535)) | (1 << (SelectSQLParser.SHUTDOWN - 535)) | (1 << (SelectSQLParser.SUPER - 535)) | (1 << (SelectSQLParser.PRIVILEGES - 535)) | (1 << (SelectSQLParser.ARMSCII8 - 535)) | (1 << (SelectSQLParser.ASCII - 535)) | (1 << (SelectSQLParser.BIG5 - 535)) | (1 << (SelectSQLParser.CP1250 - 535)) | (1 << (SelectSQLParser.CP1251 - 535)) | (1 << (SelectSQLParser.CP1256 - 535)) | (1 << (SelectSQLParser.CP1257 - 535)) | (1 << (SelectSQLParser.CP850 - 535)) | (1 << (SelectSQLParser.CP852 - 535)) | (1 << (SelectSQLParser.CP866 - 535)) | (1 << (SelectSQLParser.CP932 - 535)) | (1 << (SelectSQLParser.DEC8 - 535)) | (1 << (SelectSQLParser.EUCJPMS - 535)) | (1 << (SelectSQLParser.EUCKR - 535)) | (1 << (SelectSQLParser.GB2312 - 535)) | (1 << (SelectSQLParser.GBK - 535)) | (1 << (SelectSQLParser.GEOSTD8 - 535)) | (1 << (SelectSQLParser.GREEK - 535)) | (1 << (SelectSQLParser.HEBREW - 535)) | (1 << (SelectSQLParser.HP8 - 535)) | (1 << (SelectSQLParser.KEYBCS2 - 535)) | (1 << (SelectSQLParser.KOI8R - 535)) | (1 << (SelectSQLParser.KOI8U - 535)) | (1 << (SelectSQLParser.LATIN1 - 535)) | (1 << (SelectSQLParser.LATIN2 - 535)) | (1 << (SelectSQLParser.LATIN5 - 535)) | (1 << (SelectSQLParser.LATIN7 - 535)) | (1 << (SelectSQLParser.MACCE - 535)) | (1 << (SelectSQLParser.MACROMAN - 535)) | (1 << (SelectSQLParser.SJIS - 535)) | (1 << (SelectSQLParser.SWE7 - 535)) | (1 << (SelectSQLParser.TIS620 - 535)))) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & ((1 << (SelectSQLParser.UCS2 - 599)) | (1 << (SelectSQLParser.UJIS - 599)) | (1 << (SelectSQLParser.UTF16 - 599)) | (1 << (SelectSQLParser.UTF16LE - 599)) | (1 << (SelectSQLParser.UTF32 - 599)) | (1 << (SelectSQLParser.UTF8 - 599)) | (1 << (SelectSQLParser.UTF8MB3 - 599)) | (1 << (SelectSQLParser.UTF8MB4 - 599)) | (1 << (SelectSQLParser.ARCHIVE - 599)) | (1 << (SelectSQLParser.BLACKHOLE - 599)) | (1 << (SelectSQLParser.CSV - 599)) | (1 << (SelectSQLParser.FEDERATED - 599)) | (1 << (SelectSQLParser.INNODB - 599)) | (1 << (SelectSQLParser.MEMORY - 599)) | (1 << (SelectSQLParser.MRG_MYISAM - 599)) | (1 << (SelectSQLParser.MYISAM - 599)) | (1 << (SelectSQLParser.NDB - 599)) | (1 << (SelectSQLParser.NDBCLUSTER - 599)) | (1 << (SelectSQLParser.PERFOMANCE_SCHEMA - 599)) | (1 << (SelectSQLParser.REPEATABLE - 599)) | (1 << (SelectSQLParser.COMMITTED - 599)) | (1 << (SelectSQLParser.UNCOMMITTED - 599)) | (1 << (SelectSQLParser.SERIALIZABLE - 599)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTION - 599)) | (1 << (SelectSQLParser.LINESTRING - 599)) | (1 << (SelectSQLParser.MULTILINESTRING - 599)) | (1 << (SelectSQLParser.MULTIPOINT - 599)) | (1 << (SelectSQLParser.MULTIPOLYGON - 599)) | (1 << (SelectSQLParser.POINT - 599)) | (1 << (SelectSQLParser.POLYGON - 599)) | (1 << (SelectSQLParser.ABS - 599)) | (1 << (SelectSQLParser.ACOS - 599)) | (1 << (SelectSQLParser.ADDDATE - 599)) | (1 << (SelectSQLParser.ADDTIME - 599)) | (1 << (SelectSQLParser.AES_DECRYPT - 599)) | (1 << (SelectSQLParser.AES_ENCRYPT - 599)) | (1 << (SelectSQLParser.AREA - 599)) | (1 << (SelectSQLParser.ASBINARY - 599)) | (1 << (SelectSQLParser.ASIN - 599)) | (1 << (SelectSQLParser.ASTEXT - 599)) | (1 << (SelectSQLParser.ASWKB - 599)) | (1 << (SelectSQLParser.ASWKT - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_DECRYPT - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_DERIVE - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_ENCRYPT - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_SIGN - 599)) | (1 << (SelectSQLParser.ASYMMETRIC_VERIFY - 599)) | (1 << (SelectSQLParser.ATAN - 599)) | (1 << (SelectSQLParser.ATAN2 - 599)) | (1 << (SelectSQLParser.BENCHMARK - 599)) | (1 << (SelectSQLParser.BIN - 599)) | (1 << (SelectSQLParser.BIT_COUNT - 599)) | (1 << (SelectSQLParser.BIT_LENGTH - 599)) | (1 << (SelectSQLParser.BUFFER - 599)) | (1 << (SelectSQLParser.CEIL - 599)) | (1 << (SelectSQLParser.CEILING - 599)) | (1 << (SelectSQLParser.CENTROID - 599)) | (1 << (SelectSQLParser.CHARACTER_LENGTH - 599)) | (1 << (SelectSQLParser.CHARSET - 599)) | (1 << (SelectSQLParser.CHAR_LENGTH - 599)) | (1 << (SelectSQLParser.COERCIBILITY - 599)) | (1 << (SelectSQLParser.COLLATION - 599)) | (1 << (SelectSQLParser.COMPRESS - 599)) | (1 << (SelectSQLParser.CONCAT - 599)))) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (SelectSQLParser.CONCAT_WS - 663)) | (1 << (SelectSQLParser.CONNECTION_ID - 663)) | (1 << (SelectSQLParser.CONV - 663)) | (1 << (SelectSQLParser.CONVERT_TZ - 663)) | (1 << (SelectSQLParser.COS - 663)) | (1 << (SelectSQLParser.COT - 663)) | (1 << (SelectSQLParser.CRC32 - 663)) | (1 << (SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1 << (SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1 << (SelectSQLParser.CREATE_DH_PARAMETERS - 663)) | (1 << (SelectSQLParser.CREATE_DIGEST - 663)) | (1 << (SelectSQLParser.CROSSES - 663)) | (1 << (SelectSQLParser.DATEDIFF - 663)) | (1 << (SelectSQLParser.DATE_FORMAT - 663)) | (1 << (SelectSQLParser.DAYNAME - 663)) | (1 << (SelectSQLParser.DAYOFMONTH - 663)) | (1 << (SelectSQLParser.DAYOFWEEK - 663)) | (1 << (SelectSQLParser.DAYOFYEAR - 663)) | (1 << (SelectSQLParser.DECODE - 663)) | (1 << (SelectSQLParser.DEGREES - 663)) | (1 << (SelectSQLParser.DES_DECRYPT - 663)) | (1 << (SelectSQLParser.DES_ENCRYPT - 663)) | (1 << (SelectSQLParser.DIMENSION - 663)) | (1 << (SelectSQLParser.DISJOINT - 663)) | (1 << (SelectSQLParser.ELT - 663)) | (1 << (SelectSQLParser.ENCODE - 663)) | (1 << (SelectSQLParser.ENCRYPT - 663)) | (1 << (SelectSQLParser.ENDPOINT - 663)) | (1 << (SelectSQLParser.ENVELOPE - 663)) | (1 << (SelectSQLParser.EQUALS - 663)) | (1 << (SelectSQLParser.EXP - 663)) | (1 << (SelectSQLParser.EXPORT_SET - 663)) | (1 << (SelectSQLParser.EXTERIORRING - 663)) | (1 << (SelectSQLParser.EXTRACTVALUE - 663)) | (1 << (SelectSQLParser.FIELD - 663)) | (1 << (SelectSQLParser.FIND_IN_SET - 663)) | (1 << (SelectSQLParser.FLOOR - 663)) | (1 << (SelectSQLParser.FORMAT - 663)) | (1 << (SelectSQLParser.FOUND_ROWS - 663)) | (1 << (SelectSQLParser.FROM_BASE64 - 663)) | (1 << (SelectSQLParser.FROM_DAYS - 663)) | (1 << (SelectSQLParser.FROM_UNIXTIME - 663)) | (1 << (SelectSQLParser.GEOMCOLLFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMCOLLFROMWKB - 663)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB - 663)) | (1 << (SelectSQLParser.GEOMETRYFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMETRYFROMWKB - 663)) | (1 << (SelectSQLParser.GEOMETRYN - 663)) | (1 << (SelectSQLParser.GEOMETRYTYPE - 663)) | (1 << (SelectSQLParser.GEOMFROMTEXT - 663)) | (1 << (SelectSQLParser.GEOMFROMWKB - 663)) | (1 << (SelectSQLParser.GET_FORMAT - 663)) | (1 << (SelectSQLParser.GET_LOCK - 663)) | (1 << (SelectSQLParser.GLENGTH - 663)) | (1 << (SelectSQLParser.GREATEST - 663)) | (1 << (SelectSQLParser.GTID_SUBSET - 663)) | (1 << (SelectSQLParser.GTID_SUBTRACT - 663)) | (1 << (SelectSQLParser.HEX - 663)) | (1 << (SelectSQLParser.IFNULL - 663)) | (1 << (SelectSQLParser.INET6_ATON - 663)) | (1 << (SelectSQLParser.INET6_NTOA - 663)) | (1 << (SelectSQLParser.INET_ATON - 663)) | (1 << (SelectSQLParser.INET_NTOA - 663)))) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & ((1 << (SelectSQLParser.INSTR - 727)) | (1 << (SelectSQLParser.INTERIORRINGN - 727)) | (1 << (SelectSQLParser.INTERSECTS - 727)) | (1 << (SelectSQLParser.ISCLOSED - 727)) | (1 << (SelectSQLParser.ISEMPTY - 727)) | (1 << (SelectSQLParser.ISNULL - 727)) | (1 << (SelectSQLParser.ISSIMPLE - 727)) | (1 << (SelectSQLParser.IS_FREE_LOCK - 727)) | (1 << (SelectSQLParser.IS_IPV4 - 727)) | (1 << (SelectSQLParser.IS_IPV4_COMPAT - 727)) | (1 << (SelectSQLParser.IS_IPV4_MAPPED - 727)) | (1 << (SelectSQLParser.IS_IPV6 - 727)) | (1 << (SelectSQLParser.IS_USED_LOCK - 727)) | (1 << (SelectSQLParser.LAST_INSERT_ID - 727)) | (1 << (SelectSQLParser.LCASE - 727)) | (1 << (SelectSQLParser.LEAST - 727)) | (1 << (SelectSQLParser.LENGTH - 727)) | (1 << (SelectSQLParser.LINEFROMTEXT - 727)) | (1 << (SelectSQLParser.LINEFROMWKB - 727)) | (1 << (SelectSQLParser.LINESTRINGFROMTEXT - 727)) | (1 << (SelectSQLParser.LINESTRINGFROMWKB - 727)) | (1 << (SelectSQLParser.LN - 727)) | (1 << (SelectSQLParser.LOAD_FILE - 727)) | (1 << (SelectSQLParser.LOCATE - 727)) | (1 << (SelectSQLParser.LOG - 727)) | (1 << (SelectSQLParser.LOG10 - 727)) | (1 << (SelectSQLParser.LOG2 - 727)) | (1 << (SelectSQLParser.LOWER - 727)) | (1 << (SelectSQLParser.LPAD - 727)) | (1 << (SelectSQLParser.LTRIM - 727)) | (1 << (SelectSQLParser.MAKEDATE - 727)) | (1 << (SelectSQLParser.MAKETIME - 727)) | (1 << (SelectSQLParser.MAKE_SET - 727)) | (1 << (SelectSQLParser.MASTER_POS_WAIT - 727)) | (1 << (SelectSQLParser.MBRCONTAINS - 727)) | (1 << (SelectSQLParser.MBRDISJOINT - 727)) | (1 << (SelectSQLParser.MBREQUAL - 727)) | (1 << (SelectSQLParser.MBRINTERSECTS - 727)) | (1 << (SelectSQLParser.MBROVERLAPS - 727)) | (1 << (SelectSQLParser.MBRTOUCHES - 727)) | (1 << (SelectSQLParser.MBRWITHIN - 727)) | (1 << (SelectSQLParser.MD5 - 727)) | (1 << (SelectSQLParser.MLINEFROMTEXT - 727)) | (1 << (SelectSQLParser.MLINEFROMWKB - 727)) | (1 << (SelectSQLParser.MONTHNAME - 727)) | (1 << (SelectSQLParser.MPOINTFROMTEXT - 727)) | (1 << (SelectSQLParser.MPOINTFROMWKB - 727)) | (1 << (SelectSQLParser.MPOLYFROMTEXT - 727)) | (1 << (SelectSQLParser.MPOLYFROMWKB - 727)) | (1 << (SelectSQLParser.MULTILINESTRINGFROMTEXT - 727)) | (1 << (SelectSQLParser.MULTILINESTRINGFROMWKB - 727)) | (1 << (SelectSQLParser.MULTIPOINTFROMTEXT - 727)) | (1 << (SelectSQLParser.MULTIPOINTFROMWKB - 727)) | (1 << (SelectSQLParser.MULTIPOLYGONFROMTEXT - 727)) | (1 << (SelectSQLParser.MULTIPOLYGONFROMWKB - 727)) | (1 << (SelectSQLParser.NAME_CONST - 727)) | (1 << (SelectSQLParser.NULLIF - 727)) | (1 << (SelectSQLParser.NUMGEOMETRIES - 727)) | (1 << (SelectSQLParser.NUMINTERIORRINGS - 727)) | (1 << (SelectSQLParser.NUMPOINTS - 727)) | (1 << (SelectSQLParser.OCT - 727)) | (1 << (SelectSQLParser.OCTET_LENGTH - 727)) | (1 << (SelectSQLParser.ORD - 727)) | (1 << (SelectSQLParser.OVERLAPS - 727)))) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & ((1 << (SelectSQLParser.PERIOD_ADD - 791)) | (1 << (SelectSQLParser.PERIOD_DIFF - 791)) | (1 << (SelectSQLParser.PI - 791)) | (1 << (SelectSQLParser.POINTFROMTEXT - 791)) | (1 << (SelectSQLParser.POINTFROMWKB - 791)) | (1 << (SelectSQLParser.POINTN - 791)) | (1 << (SelectSQLParser.POLYFROMTEXT - 791)) | (1 << (SelectSQLParser.POLYFROMWKB - 791)) | (1 << (SelectSQLParser.POLYGONFROMTEXT - 791)) | (1 << (SelectSQLParser.POLYGONFROMWKB - 791)) | (1 << (SelectSQLParser.POW - 791)) | (1 << (SelectSQLParser.POWER - 791)) | (1 << (SelectSQLParser.QUOTE - 791)) | (1 << (SelectSQLParser.RADIANS - 791)) | (1 << (SelectSQLParser.RAND - 791)) | (1 << (SelectSQLParser.RANDOM_BYTES - 791)) | (1 << (SelectSQLParser.RELEASE_LOCK - 791)) | (1 << (SelectSQLParser.REVERSE - 791)) | (1 << (SelectSQLParser.ROUND - 791)) | (1 << (SelectSQLParser.ROW_COUNT - 791)) | (1 << (SelectSQLParser.RPAD - 791)) | (1 << (SelectSQLParser.RTRIM - 791)) | (1 << (SelectSQLParser.SEC_TO_TIME - 791)) | (1 << (SelectSQLParser.SESSION_USER - 791)) | (1 << (SelectSQLParser.SHA - 791)) | (1 << (SelectSQLParser.SHA1 - 791)) | (1 << (SelectSQLParser.SHA2 - 791)) | (1 << (SelectSQLParser.SIGN - 791)) | (1 << (SelectSQLParser.SIN - 791)) | (1 << (SelectSQLParser.SLEEP - 791)) | (1 << (SelectSQLParser.SOUNDEX - 791)) | (1 << (SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1 << (SelectSQLParser.SQRT - 791)) | (1 << (SelectSQLParser.SRID - 791)) | (1 << (SelectSQLParser.STARTPOINT - 791)) | (1 << (SelectSQLParser.STRCMP - 791)) | (1 << (SelectSQLParser.STR_TO_DATE - 791)) | (1 << (SelectSQLParser.ST_AREA - 791)) | (1 << (SelectSQLParser.ST_ASBINARY - 791)) | (1 << (SelectSQLParser.ST_ASTEXT - 791)) | (1 << (SelectSQLParser.ST_ASWKB - 791)) | (1 << (SelectSQLParser.ST_ASWKT - 791)) | (1 << (SelectSQLParser.ST_BUFFER - 791)) | (1 << (SelectSQLParser.ST_CENTROID - 791)) | (1 << (SelectSQLParser.ST_CONTAINS - 791)) | (1 << (SelectSQLParser.ST_CROSSES - 791)) | (1 << (SelectSQLParser.ST_DIFFERENCE - 791)) | (1 << (SelectSQLParser.ST_DIMENSION - 791)) | (1 << (SelectSQLParser.ST_DISJOINT - 791)) | (1 << (SelectSQLParser.ST_DISTANCE - 791)) | (1 << (SelectSQLParser.ST_ENDPOINT - 791)) | (1 << (SelectSQLParser.ST_ENVELOPE - 791)) | (1 << (SelectSQLParser.ST_EQUALS - 791)) | (1 << (SelectSQLParser.ST_EXTERIORRING - 791)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMTEXT - 791)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMTXT - 791)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMWKB - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYFROMTEXT - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYFROMWKB - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYN - 791)) | (1 << (SelectSQLParser.ST_GEOMETRYTYPE - 791)) | (1 << (SelectSQLParser.ST_GEOMFROMTEXT - 791)))) != 0) or ((((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & ((1 << (SelectSQLParser.ST_GEOMFROMWKB - 855)) | (1 << (SelectSQLParser.ST_INTERIORRINGN - 855)) | (1 << (SelectSQLParser.ST_INTERSECTION - 855)) | (1 << (SelectSQLParser.ST_INTERSECTS - 855)) | (1 << (SelectSQLParser.ST_ISCLOSED - 855)) | (1 << (SelectSQLParser.ST_ISEMPTY - 855)) | (1 << (SelectSQLParser.ST_ISSIMPLE - 855)) | (1 << (SelectSQLParser.ST_LINEFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_LINEFROMWKB - 855)) | (1 << (SelectSQLParser.ST_LINESTRINGFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_LINESTRINGFROMWKB - 855)) | (1 << (SelectSQLParser.ST_NUMGEOMETRIES - 855)) | (1 << (SelectSQLParser.ST_NUMINTERIORRING - 855)) | (1 << (SelectSQLParser.ST_NUMINTERIORRINGS - 855)) | (1 << (SelectSQLParser.ST_NUMPOINTS - 855)) | (1 << (SelectSQLParser.ST_OVERLAPS - 855)) | (1 << (SelectSQLParser.ST_POINTFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_POINTFROMWKB - 855)) | (1 << (SelectSQLParser.ST_POINTN - 855)) | (1 << (SelectSQLParser.ST_POLYFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_POLYFROMWKB - 855)) | (1 << (SelectSQLParser.ST_POLYGONFROMTEXT - 855)) | (1 << (SelectSQLParser.ST_POLYGONFROMWKB - 855)) | (1 << (SelectSQLParser.ST_SRID - 855)) | (1 << (SelectSQLParser.ST_STARTPOINT - 855)) | (1 << (SelectSQLParser.ST_SYMDIFFERENCE - 855)) | (1 << (SelectSQLParser.ST_TOUCHES - 855)) | (1 << (SelectSQLParser.ST_UNION - 855)) | (1 << (SelectSQLParser.ST_WITHIN - 855)) | (1 << (SelectSQLParser.ST_X - 855)) | (1 << (SelectSQLParser.ST_Y - 855)) | (1 << (SelectSQLParser.SUBDATE - 855)) | (1 << (SelectSQLParser.SUBSTRING_INDEX - 855)) | (1 << (SelectSQLParser.SUBTIME - 855)) | (1 << (SelectSQLParser.SYSTEM_USER - 855)) | (1 << (SelectSQLParser.TAN - 855)) | (1 << (SelectSQLParser.TIMEDIFF - 855)) | (1 << (SelectSQLParser.TIMESTAMPADD - 855)) | (1 << (SelectSQLParser.TIMESTAMPDIFF - 855)) | (1 << (SelectSQLParser.TIME_FORMAT - 855)) | (1 << (SelectSQLParser.TIME_TO_SEC - 855)) | (1 << (SelectSQLParser.TOUCHES - 855)) | (1 << (SelectSQLParser.TO_BASE64 - 855)) | (1 << (SelectSQLParser.TO_DAYS - 855)) | (1 << (SelectSQLParser.TO_SECONDS - 855)) | (1 << (SelectSQLParser.UCASE - 855)) | (1 << (SelectSQLParser.UNCOMPRESS - 855)) | (1 << (SelectSQLParser.UNCOMPRESSED_LENGTH - 855)) | (1 << (SelectSQLParser.UNHEX - 855)) | (1 << (SelectSQLParser.UNIX_TIMESTAMP - 855)) | (1 << (SelectSQLParser.UPDATEXML - 855)) | (1 << (SelectSQLParser.UPPER - 855)) | (1 << (SelectSQLParser.UUID - 855)) | (1 << (SelectSQLParser.UUID_SHORT - 855)) | (1 << (SelectSQLParser.VALIDATE_PASSWORD_STRENGTH - 855)) | (1 << (SelectSQLParser.VERSION - 855)) | (1 << (SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1 << (SelectSQLParser.WEEKDAY - 855)) | (1 << (SelectSQLParser.WEEKOFYEAR - 855)) | (1 << (SelectSQLParser.WEIGHT_STRING - 855)) | (1 << (SelectSQLParser.WITHIN - 855)) | (1 << (SelectSQLParser.YEARWEEK - 855)) | (1 << (SelectSQLParser.Y_FUNCTION - 855)) | (1 << (SelectSQLParser.X_FUNCTION - 855)))) != 0) or ((((_la - 931)) & ~0x3f) == 0 and ((1 << (_la - 931)) & ((1 << (SelectSQLParser.PLUS - 931)) | (1 << (SelectSQLParser.MINUS - 931)) | (1 << (SelectSQLParser.EXCLAMATION_SYMBOL - 931)) | (1 << (SelectSQLParser.BIT_NOT_OP - 931)) | (1 << (SelectSQLParser.LR_BRACKET - 931)) | (1 << (SelectSQLParser.ZERO_DECIMAL - 931)) | (1 << (SelectSQLParser.ONE_DECIMAL - 931)) | (1 << (SelectSQLParser.TWO_DECIMAL - 931)) | (1 << (SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING - 931)) | (1 << (SelectSQLParser.START_NATIONAL_STRING_LITERAL - 931)) | (1 << (SelectSQLParser.STRING_LITERAL - 931)) | (1 << (SelectSQLParser.DECIMAL_LITERAL - 931)) | (1 << (SelectSQLParser.HEXADECIMAL_LITERAL - 931)) | (1 << (SelectSQLParser.REAL_LITERAL - 931)) | (1 << (SelectSQLParser.NULL_SPEC_LITERAL - 931)) | (1 << (SelectSQLParser.BIT_STRING - 931)) | (1 << (SelectSQLParser.STRING_CHARSET_NAME - 931)) | (1 << (SelectSQLParser.ID - 931)) | (1 << (SelectSQLParser.REVERSE_QUOTE_ID - 931)) | (1 << (SelectSQLParser.LOCAL_ID - 931)) | (1 << (SelectSQLParser.GLOBAL_ID - 931)))) != 0):
                    self.state = 888
                    self.functionArgs()


                self.state = 891
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = SelectSQLParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 893
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecificFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_specificFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SelectSQLParser.POSITION, 0)
        def IN(self):
            return self.getToken(SelectSQLParser.IN, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SelectSQLParser.TRIM, 0)
        def FROM(self):
            return self.getToken(SelectSQLParser.FROM, 0)
        def BOTH(self):
            return self.getToken(SelectSQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(SelectSQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SelectSQLParser.TRAILING, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunctionCall" ):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunctionCall" ):
                listener.exitTrimFunctionCall(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SelectSQLParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SelectSQLParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(SelectSQLParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(SelectSQLParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(SelectSQLParser.LOCALTIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(SelectSQLParser.CHAR, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionArgsContext,0)

        def USING(self):
            return self.getToken(SelectSQLParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SelectSQLParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFunctionCall" ):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFunctionCall" ):
                listener.exitCharFunctionCall(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(SelectSQLParser.WEIGHT_STRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SelectSQLParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(SelectSQLParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(SelectSQLParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(SelectSQLParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightFunctionCall" ):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightFunctionCall" ):
                listener.exitWeightFunctionCall(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(SelectSQLParser.GET_FORMAT, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.StringLiteralContext,0)

        def DATE(self):
            return self.getToken(SelectSQLParser.DATE, 0)
        def TIME(self):
            return self.getToken(SelectSQLParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(SelectSQLParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFormatFunctionCall" ):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFormatFunctionCall" ):
                listener.exitGetFormatFunctionCall(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SelectSQLParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def END(self):
            return self.getToken(SelectSQLParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(SelectSQLParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFunctionCall" ):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFunctionCall" ):
                listener.exitCaseFunctionCall(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SelectSQLParser.EXTRACT, 0)
        def intervalType(self):
            return self.getTypedRuleContext(SelectSQLParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(SelectSQLParser.FROM, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFunctionCall" ):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFunctionCall" ):
                listener.exitExtractFunctionCall(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.separator = None # Token
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(SelectSQLParser.CONVERT, 0)
        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(SelectSQLParser.ConvertedDataTypeContext,0)

        def USING(self):
            return self.getToken(SelectSQLParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(SelectSQLParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(SelectSQLParser.CAST, 0)
        def AS(self):
            return self.getToken(SelectSQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeFunctionCall" ):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeFunctionCall" ):
                listener.exitDataTypeFunctionCall(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SelectSQLParser.VALUES, 0)
        def fullColumnName(self):
            return self.getTypedRuleContext(SelectSQLParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesFunctionCall" ):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesFunctionCall" ):
                listener.exitValuesFunctionCall(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(SelectSQLParser.FROM, 0)
        def SUBSTR(self):
            return self.getToken(SelectSQLParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(SelectSQLParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.StringLiteralContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(SelectSQLParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrFunctionCall" ):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrFunctionCall" ):
                listener.exitSubstrFunctionCall(self)



    def specificFunction(self):

        localctx = SelectSQLParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.CURRENT_USER or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (SelectSQLParser.CURRENT_DATE - 225)) | (1 << (SelectSQLParser.CURRENT_TIME - 225)) | (1 << (SelectSQLParser.CURRENT_TIMESTAMP - 225)) | (1 << (SelectSQLParser.LOCALTIME - 225)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = SelectSQLParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.match(SelectSQLParser.CONVERT)
                self.state = 898
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 899
                self.expression(0)
                self.state = 900
                localctx.separator = self.match(SelectSQLParser.COMMA)
                self.state = 901
                self.convertedDataType()
                self.state = 902
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = SelectSQLParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 904
                self.match(SelectSQLParser.CONVERT)
                self.state = 905
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 906
                self.expression(0)
                self.state = 907
                self.match(SelectSQLParser.USING)
                self.state = 908
                self.charsetName()
                self.state = 909
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = SelectSQLParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 911
                self.match(SelectSQLParser.CAST)
                self.state = 912
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 913
                self.expression(0)
                self.state = 914
                self.match(SelectSQLParser.AS)
                self.state = 915
                self.convertedDataType()
                self.state = 916
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = SelectSQLParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 918
                self.match(SelectSQLParser.VALUES)
                self.state = 919
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 920
                self.fullColumnName()
                self.state = 921
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = SelectSQLParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 923
                self.match(SelectSQLParser.CASE)
                self.state = 924
                self.expression(0)
                self.state = 926 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 925
                    self.caseFuncAlternative()
                    self.state = 928 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SelectSQLParser.WHEN):
                        break

                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ELSE:
                    self.state = 930
                    self.match(SelectSQLParser.ELSE)
                    self.state = 931
                    localctx.elseArg = self.functionArg()


                self.state = 934
                self.match(SelectSQLParser.END)
                pass

            elif la_ == 7:
                localctx = SelectSQLParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 936
                self.match(SelectSQLParser.CASE)
                self.state = 938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 937
                    self.caseFuncAlternative()
                    self.state = 940 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SelectSQLParser.WHEN):
                        break

                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ELSE:
                    self.state = 942
                    self.match(SelectSQLParser.ELSE)
                    self.state = 943
                    localctx.elseArg = self.functionArg()


                self.state = 946
                self.match(SelectSQLParser.END)
                pass

            elif la_ == 8:
                localctx = SelectSQLParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 948
                self.match(SelectSQLParser.CHAR)
                self.state = 949
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 950
                self.functionArgs()
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.USING:
                    self.state = 951
                    self.match(SelectSQLParser.USING)
                    self.state = 952
                    self.charsetName()


                self.state = 955
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = SelectSQLParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 957
                self.match(SelectSQLParser.POSITION)
                self.state = 958
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 959
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 960
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 963
                self.match(SelectSQLParser.IN)
                self.state = 966
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 964
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 965
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 968
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = SelectSQLParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 970
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.SUBSTR or _la==SelectSQLParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 971
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 972
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 973
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 976
                self.match(SelectSQLParser.FROM)
                self.state = 979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 977
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 978
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.FOR:
                    self.state = 981
                    self.match(SelectSQLParser.FOR)
                    self.state = 984
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        self.state = 982
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 983
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 988
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = SelectSQLParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 990
                self.match(SelectSQLParser.TRIM)
                self.state = 991
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 992
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.BOTH or _la==SelectSQLParser.LEADING or _la==SelectSQLParser.TRAILING):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 993
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 994
                    localctx.sourceExpression = self.expression(0)


                self.state = 997
                self.match(SelectSQLParser.FROM)
                self.state = 1000
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 998
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 999
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 1002
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = SelectSQLParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1004
                self.match(SelectSQLParser.TRIM)
                self.state = 1005
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1008
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1006
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1007
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 1010
                self.match(SelectSQLParser.FROM)
                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1012
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 1015
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = SelectSQLParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1017
                self.match(SelectSQLParser.WEIGHT_STRING)
                self.state = 1018
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1021
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1019
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1020
                    self.expression(0)
                    pass


                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.AS:
                    self.state = 1023
                    self.match(SelectSQLParser.AS)
                    self.state = 1024
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SelectSQLParser.CHAR or _la==SelectSQLParser.BINARY):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1025
                    self.match(SelectSQLParser.LR_BRACKET)
                    self.state = 1026
                    self.decimalLiteral()
                    self.state = 1027
                    self.match(SelectSQLParser.RR_BRACKET)


                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.LEVEL:
                    self.state = 1031
                    self.levelsInWeightString()


                self.state = 1034
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = SelectSQLParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1036
                self.match(SelectSQLParser.EXTRACT)
                self.state = 1037
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1038
                self.intervalType()
                self.state = 1039
                self.match(SelectSQLParser.FROM)
                self.state = 1042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1040
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1041
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 1044
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = SelectSQLParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1046
                self.match(SelectSQLParser.GET_FORMAT)
                self.state = 1047
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1048
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (SelectSQLParser.DATE - 180)) | (1 << (SelectSQLParser.TIME - 180)) | (1 << (SelectSQLParser.DATETIME - 180)))) != 0)):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1049
                self.match(SelectSQLParser.COMMA)
                self.state = 1050
                self.stringLiteral()
                self.state = 1051
                self.match(SelectSQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseFuncAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # FunctionArgContext
            self.consequent = None # FunctionArgContext

        def WHEN(self):
            return self.getToken(SelectSQLParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SelectSQLParser.THEN, 0)

        def functionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.FunctionArgContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_caseFuncAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFuncAlternative" ):
                listener.enterCaseFuncAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFuncAlternative" ):
                listener.exitCaseFuncAlternative(self)




    def caseFuncAlternative(self):

        localctx = SelectSQLParser.CaseFuncAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_caseFuncAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(SelectSQLParser.WHEN)
            self.state = 1056
            localctx.condition = self.functionArg()
            self.state = 1057
            self.match(SelectSQLParser.THEN)
            self.state = 1058
            localctx.consequent = self.functionArg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LevelsInWeightStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(SelectSQLParser.LEVEL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightRange" ):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightRange" ):
                listener.exitLevelWeightRange(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(SelectSQLParser.LEVEL, 0)
        def levelInWeightListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.LevelInWeightListElementContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.LevelInWeightListElementContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightList" ):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightList" ):
                listener.exitLevelWeightList(self)



    def levelsInWeightString(self):

        localctx = SelectSQLParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 1074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1060
                self.match(SelectSQLParser.LEVEL)
                self.state = 1061
                self.levelInWeightListElement()
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SelectSQLParser.COMMA:
                    self.state = 1062
                    self.match(SelectSQLParser.COMMA)
                    self.state = 1063
                    self.levelInWeightListElement()
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SelectSQLParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(SelectSQLParser.LEVEL)
                self.state = 1070
                localctx.firstLevel = self.decimalLiteral()
                self.state = 1071
                self.match(SelectSQLParser.MINUS)
                self.state = 1072
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LevelInWeightListElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderType = None # Token

        def decimalLiteral(self):
            return self.getTypedRuleContext(SelectSQLParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(SelectSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(SelectSQLParser.DESC, 0)

        def REVERSE(self):
            return self.getToken(SelectSQLParser.REVERSE, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_levelInWeightListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelInWeightListElement" ):
                listener.enterLevelInWeightListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelInWeightListElement" ):
                listener.exitLevelInWeightListElement(self)




    def levelInWeightListElement(self):

        localctx = SelectSQLParser.LevelInWeightListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_levelInWeightListElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.decimalLiteral()
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC or _la==SelectSQLParser.REVERSE:
                self.state = 1077
                localctx.orderType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.ASC or _la==SelectSQLParser.DESC or _la==SelectSQLParser.REVERSE):
                    localctx.orderType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregateWindowedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token
            self.separator = None # Token

        def functionArg(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionArgContext,0)


        def AVG(self):
            return self.getToken(SelectSQLParser.AVG, 0)

        def MAX(self):
            return self.getToken(SelectSQLParser.MAX, 0)

        def MIN(self):
            return self.getToken(SelectSQLParser.MIN, 0)

        def SUM(self):
            return self.getToken(SelectSQLParser.SUM, 0)

        def ALL(self):
            return self.getToken(SelectSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SelectSQLParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(SelectSQLParser.COUNT, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionArgsContext,0)


        def BIT_AND(self):
            return self.getToken(SelectSQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(SelectSQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(SelectSQLParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(SelectSQLParser.STD, 0)

        def STDDEV(self):
            return self.getToken(SelectSQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(SelectSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(SelectSQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(SelectSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(SelectSQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(SelectSQLParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(SelectSQLParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(SelectSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(SelectSQLParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(SelectSQLParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(SelectSQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)




    def aggregateWindowedFunction(self):

        localctx = SelectSQLParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                _la = self._input.LA(1)
                if not(((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (SelectSQLParser.AVG - 209)) | (1 << (SelectSQLParser.MAX - 209)) | (1 << (SelectSQLParser.MIN - 209)) | (1 << (SelectSQLParser.SUM - 209)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1081
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT:
                    self.state = 1082
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SelectSQLParser.ALL or _la==SelectSQLParser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1085
                self.functionArg()
                self.state = 1086
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self.match(SelectSQLParser.COUNT)
                self.state = 1089
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1095
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SelectSQLParser.STAR]:
                    self.state = 1090
                    localctx.starArg = self.match(SelectSQLParser.STAR)
                    pass
                elif token in [SelectSQLParser.ALL, SelectSQLParser.CASE, SelectSQLParser.CAST, SelectSQLParser.CONVERT, SelectSQLParser.CURRENT_USER, SelectSQLParser.EXISTS, SelectSQLParser.FALSE, SelectSQLParser.IF, SelectSQLParser.INSERT, SelectSQLParser.INTERVAL, SelectSQLParser.LEFT, SelectSQLParser.NOT, SelectSQLParser.NULL_LITERAL, SelectSQLParser.REPLACE, SelectSQLParser.RIGHT, SelectSQLParser.TRUE, SelectSQLParser.VALUES, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.DATETIME, SelectSQLParser.YEAR, SelectSQLParser.CHAR, SelectSQLParser.BINARY, SelectSQLParser.TEXT, SelectSQLParser.ENUM, SelectSQLParser.AVG, SelectSQLParser.BIT_AND, SelectSQLParser.BIT_OR, SelectSQLParser.BIT_XOR, SelectSQLParser.COUNT, SelectSQLParser.GROUP_CONCAT, SelectSQLParser.MAX, SelectSQLParser.MIN, SelectSQLParser.STD, SelectSQLParser.STDDEV, SelectSQLParser.STDDEV_POP, SelectSQLParser.STDDEV_SAMP, SelectSQLParser.SUM, SelectSQLParser.VAR_POP, SelectSQLParser.VAR_SAMP, SelectSQLParser.VARIANCE, SelectSQLParser.CURRENT_DATE, SelectSQLParser.CURRENT_TIME, SelectSQLParser.CURRENT_TIMESTAMP, SelectSQLParser.LOCALTIME, SelectSQLParser.CURDATE, SelectSQLParser.CURTIME, SelectSQLParser.DATE_ADD, SelectSQLParser.DATE_SUB, SelectSQLParser.EXTRACT, SelectSQLParser.LOCALTIMESTAMP, SelectSQLParser.NOW, SelectSQLParser.POSITION, SelectSQLParser.SUBSTR, SelectSQLParser.SUBSTRING, SelectSQLParser.SYSDATE, SelectSQLParser.TRIM, SelectSQLParser.UTC_DATE, SelectSQLParser.UTC_TIME, SelectSQLParser.UTC_TIMESTAMP, SelectSQLParser.ACCOUNT, SelectSQLParser.ACTION, SelectSQLParser.AFTER, SelectSQLParser.AGGREGATE, SelectSQLParser.ALGORITHM, SelectSQLParser.ANY, SelectSQLParser.AT, SelectSQLParser.AUTHORS, SelectSQLParser.AUTOCOMMIT, SelectSQLParser.AUTOEXTEND_SIZE, SelectSQLParser.AUTO_INCREMENT, SelectSQLParser.AVG_ROW_LENGTH, SelectSQLParser.BEGIN, SelectSQLParser.BINLOG, SelectSQLParser.BIT, SelectSQLParser.BLOCK, SelectSQLParser.BOOL, SelectSQLParser.BOOLEAN, SelectSQLParser.BTREE, SelectSQLParser.CASCADED, SelectSQLParser.CHAIN, SelectSQLParser.CHANNEL, SelectSQLParser.CHECKSUM, SelectSQLParser.CIPHER, SelectSQLParser.CLIENT, SelectSQLParser.COALESCE, SelectSQLParser.CODE, SelectSQLParser.COLUMNS, SelectSQLParser.COLUMN_FORMAT, SelectSQLParser.COMMENT, SelectSQLParser.COMMIT, SelectSQLParser.COMPACT, SelectSQLParser.COMPLETION, SelectSQLParser.COMPRESSED, SelectSQLParser.COMPRESSION, SelectSQLParser.CONCURRENT, SelectSQLParser.CONNECTION, SelectSQLParser.CONSISTENT, SelectSQLParser.CONTAINS, SelectSQLParser.CONTEXT, SelectSQLParser.CONTRIBUTORS, SelectSQLParser.COPY, SelectSQLParser.CPU, SelectSQLParser.DATA, SelectSQLParser.DATAFILE, SelectSQLParser.DEALLOCATE, SelectSQLParser.DEFAULT_AUTH, SelectSQLParser.DEFINER, SelectSQLParser.DELAY_KEY_WRITE, SelectSQLParser.DIRECTORY, SelectSQLParser.DISABLE, SelectSQLParser.DISCARD, SelectSQLParser.DISK, SelectSQLParser.DO, SelectSQLParser.DUMPFILE, SelectSQLParser.DUPLICATE, SelectSQLParser.DYNAMIC, SelectSQLParser.ENABLE, SelectSQLParser.ENCRYPTION, SelectSQLParser.ENDS, SelectSQLParser.ENGINE, SelectSQLParser.ENGINES, SelectSQLParser.ERROR, SelectSQLParser.ERRORS, SelectSQLParser.ESCAPE, SelectSQLParser.EVEN, SelectSQLParser.EVENT, SelectSQLParser.EVENTS, SelectSQLParser.EVERY, SelectSQLParser.EXCHANGE, SelectSQLParser.EXCLUSIVE, SelectSQLParser.EXPIRE, SelectSQLParser.EXTENT_SIZE, SelectSQLParser.FAULTS, SelectSQLParser.FIELDS, SelectSQLParser.FILE_BLOCK_SIZE, SelectSQLParser.FILTER, SelectSQLParser.FIRST, SelectSQLParser.FIXED, SelectSQLParser.FOLLOWS, SelectSQLParser.FULL, SelectSQLParser.FUNCTION, SelectSQLParser.GLOBAL, SelectSQLParser.GRANTS, SelectSQLParser.GROUP_REPLICATION, SelectSQLParser.HASH, SelectSQLParser.HOST, SelectSQLParser.IDENTIFIED, SelectSQLParser.IGNORE_SERVER_IDS, SelectSQLParser.IMPORT, SelectSQLParser.INDEXES, SelectSQLParser.INITIAL_SIZE, SelectSQLParser.INPLACE, SelectSQLParser.INSERT_METHOD, SelectSQLParser.INSTANCE, SelectSQLParser.INVOKER, SelectSQLParser.IO, SelectSQLParser.IO_THREAD, SelectSQLParser.IPC, SelectSQLParser.ISOLATION, SelectSQLParser.ISSUER, SelectSQLParser.KEY_BLOCK_SIZE, SelectSQLParser.LANGUAGE, SelectSQLParser.LAST, SelectSQLParser.LEAVES, SelectSQLParser.LESS, SelectSQLParser.LEVEL, SelectSQLParser.LIST, SelectSQLParser.LOCAL, SelectSQLParser.LOGFILE, SelectSQLParser.LOGS, SelectSQLParser.MASTER, SelectSQLParser.MASTER_AUTO_POSITION, SelectSQLParser.MASTER_CONNECT_RETRY, SelectSQLParser.MASTER_DELAY, SelectSQLParser.MASTER_HEARTBEAT_PERIOD, SelectSQLParser.MASTER_HOST, SelectSQLParser.MASTER_LOG_FILE, SelectSQLParser.MASTER_LOG_POS, SelectSQLParser.MASTER_PASSWORD, SelectSQLParser.MASTER_PORT, SelectSQLParser.MASTER_RETRY_COUNT, SelectSQLParser.MASTER_SSL, SelectSQLParser.MASTER_SSL_CA, SelectSQLParser.MASTER_SSL_CAPATH, SelectSQLParser.MASTER_SSL_CERT, SelectSQLParser.MASTER_SSL_CIPHER, SelectSQLParser.MASTER_SSL_CRL, SelectSQLParser.MASTER_SSL_CRLPATH, SelectSQLParser.MASTER_SSL_KEY, SelectSQLParser.MASTER_TLS_VERSION, SelectSQLParser.MASTER_USER, SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, SelectSQLParser.MAX_QUERIES_PER_HOUR, SelectSQLParser.MAX_ROWS, SelectSQLParser.MAX_SIZE, SelectSQLParser.MAX_UPDATES_PER_HOUR, SelectSQLParser.MAX_USER_CONNECTIONS, SelectSQLParser.MERGE, SelectSQLParser.MID, SelectSQLParser.MIGRATE, SelectSQLParser.MIN_ROWS, SelectSQLParser.MODIFY, SelectSQLParser.MUTEX, SelectSQLParser.MYSQL, SelectSQLParser.NAME, SelectSQLParser.NAMES, SelectSQLParser.NCHAR, SelectSQLParser.NEVER, SelectSQLParser.NO, SelectSQLParser.NODEGROUP, SelectSQLParser.NONE, SelectSQLParser.OFFLINE, SelectSQLParser.OFFSET, SelectSQLParser.OJ, SelectSQLParser.OLD_PASSWORD, SelectSQLParser.ONE, SelectSQLParser.ONLINE, SelectSQLParser.ONLY, SelectSQLParser.OPTIMIZER_COSTS, SelectSQLParser.OPTIONS, SelectSQLParser.OWNER, SelectSQLParser.PACK_KEYS, SelectSQLParser.PAGE, SelectSQLParser.PARSER, SelectSQLParser.PARTIAL, SelectSQLParser.PARTITIONING, SelectSQLParser.PARTITIONS, SelectSQLParser.PASSWORD, SelectSQLParser.PHASE, SelectSQLParser.PLUGIN_DIR, SelectSQLParser.PLUGINS, SelectSQLParser.PORT, SelectSQLParser.PRECEDES, SelectSQLParser.PREPARE, SelectSQLParser.PRESERVE, SelectSQLParser.PREV, SelectSQLParser.PROCESSLIST, SelectSQLParser.PROFILE, SelectSQLParser.PROFILES, SelectSQLParser.PROXY, SelectSQLParser.QUERY, SelectSQLParser.QUICK, SelectSQLParser.REBUILD, SelectSQLParser.RECOVER, SelectSQLParser.REDO_BUFFER_SIZE, SelectSQLParser.REDUNDANT, SelectSQLParser.RELAY_LOG_FILE, SelectSQLParser.RELAY_LOG_POS, SelectSQLParser.RELAYLOG, SelectSQLParser.REMOVE, SelectSQLParser.REORGANIZE, SelectSQLParser.REPAIR, SelectSQLParser.REPLICATE_DO_DB, SelectSQLParser.REPLICATE_DO_TABLE, SelectSQLParser.REPLICATE_IGNORE_DB, SelectSQLParser.REPLICATE_IGNORE_TABLE, SelectSQLParser.REPLICATE_REWRITE_DB, SelectSQLParser.REPLICATE_WILD_DO_TABLE, SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, SelectSQLParser.REPLICATION, SelectSQLParser.RESUME, SelectSQLParser.RETURNS, SelectSQLParser.ROLLBACK, SelectSQLParser.ROLLUP, SelectSQLParser.ROTATE, SelectSQLParser.ROW, SelectSQLParser.ROWS, SelectSQLParser.ROW_FORMAT, SelectSQLParser.SAVEPOINT, SelectSQLParser.SCHEDULE, SelectSQLParser.SECURITY, SelectSQLParser.SERVER, SelectSQLParser.SESSION, SelectSQLParser.SHARE, SelectSQLParser.SHARED, SelectSQLParser.SIGNED, SelectSQLParser.SIMPLE, SelectSQLParser.SLAVE, SelectSQLParser.SNAPSHOT, SelectSQLParser.SOCKET, SelectSQLParser.SOME, SelectSQLParser.SOUNDS, SelectSQLParser.SOURCE, SelectSQLParser.SQL_AFTER_GTIDS, SelectSQLParser.SQL_AFTER_MTS_GAPS, SelectSQLParser.SQL_BEFORE_GTIDS, SelectSQLParser.SQL_BUFFER_RESULT, SelectSQLParser.SQL_CACHE, SelectSQLParser.SQL_NO_CACHE, SelectSQLParser.SQL_THREAD, SelectSQLParser.START, SelectSQLParser.STARTS, SelectSQLParser.STATS_AUTO_RECALC, SelectSQLParser.STATS_PERSISTENT, SelectSQLParser.STATS_SAMPLE_PAGES, SelectSQLParser.STATUS, SelectSQLParser.STOP, SelectSQLParser.STORAGE, SelectSQLParser.STRING, SelectSQLParser.SUBJECT, SelectSQLParser.SUBPARTITION, SelectSQLParser.SUBPARTITIONS, SelectSQLParser.SUSPEND, SelectSQLParser.SWAPS, SelectSQLParser.SWITCHES, SelectSQLParser.TABLESPACE, SelectSQLParser.TEMPORARY, SelectSQLParser.TEMPTABLE, SelectSQLParser.THAN, SelectSQLParser.TRANSACTION, SelectSQLParser.TRUNCATE, SelectSQLParser.UNDEFINED, SelectSQLParser.UNDOFILE, SelectSQLParser.UNDO_BUFFER_SIZE, SelectSQLParser.UNKNOWN, SelectSQLParser.UPGRADE, SelectSQLParser.USER, SelectSQLParser.VALIDATION, SelectSQLParser.VALUE, SelectSQLParser.VARIABLES, SelectSQLParser.VIEW, SelectSQLParser.WAIT, SelectSQLParser.WARNINGS, SelectSQLParser.WITHOUT, SelectSQLParser.WORK, SelectSQLParser.WRAPPER, SelectSQLParser.X509, SelectSQLParser.XA, SelectSQLParser.XML, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.TABLES, SelectSQLParser.ROUTINE, SelectSQLParser.EXECUTE, SelectSQLParser.FILE, SelectSQLParser.PROCESS, SelectSQLParser.RELOAD, SelectSQLParser.SHUTDOWN, SelectSQLParser.SUPER, SelectSQLParser.PRIVILEGES, SelectSQLParser.ARMSCII8, SelectSQLParser.ASCII, SelectSQLParser.BIG5, SelectSQLParser.CP1250, SelectSQLParser.CP1251, SelectSQLParser.CP1256, SelectSQLParser.CP1257, SelectSQLParser.CP850, SelectSQLParser.CP852, SelectSQLParser.CP866, SelectSQLParser.CP932, SelectSQLParser.DEC8, SelectSQLParser.EUCJPMS, SelectSQLParser.EUCKR, SelectSQLParser.GB2312, SelectSQLParser.GBK, SelectSQLParser.GEOSTD8, SelectSQLParser.GREEK, SelectSQLParser.HEBREW, SelectSQLParser.HP8, SelectSQLParser.KEYBCS2, SelectSQLParser.KOI8R, SelectSQLParser.KOI8U, SelectSQLParser.LATIN1, SelectSQLParser.LATIN2, SelectSQLParser.LATIN5, SelectSQLParser.LATIN7, SelectSQLParser.MACCE, SelectSQLParser.MACROMAN, SelectSQLParser.SJIS, SelectSQLParser.SWE7, SelectSQLParser.TIS620, SelectSQLParser.UCS2, SelectSQLParser.UJIS, SelectSQLParser.UTF16, SelectSQLParser.UTF16LE, SelectSQLParser.UTF32, SelectSQLParser.UTF8, SelectSQLParser.UTF8MB3, SelectSQLParser.UTF8MB4, SelectSQLParser.ARCHIVE, SelectSQLParser.BLACKHOLE, SelectSQLParser.CSV, SelectSQLParser.FEDERATED, SelectSQLParser.INNODB, SelectSQLParser.MEMORY, SelectSQLParser.MRG_MYISAM, SelectSQLParser.MYISAM, SelectSQLParser.NDB, SelectSQLParser.NDBCLUSTER, SelectSQLParser.PERFOMANCE_SCHEMA, SelectSQLParser.REPEATABLE, SelectSQLParser.COMMITTED, SelectSQLParser.UNCOMMITTED, SelectSQLParser.SERIALIZABLE, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION, SelectSQLParser.PLUS, SelectSQLParser.MINUS, SelectSQLParser.EXCLAMATION_SYMBOL, SelectSQLParser.BIT_NOT_OP, SelectSQLParser.LR_BRACKET, SelectSQLParser.ZERO_DECIMAL, SelectSQLParser.ONE_DECIMAL, SelectSQLParser.TWO_DECIMAL, SelectSQLParser.CHARSET_REVERSE_QOUTE_STRING, SelectSQLParser.START_NATIONAL_STRING_LITERAL, SelectSQLParser.STRING_LITERAL, SelectSQLParser.DECIMAL_LITERAL, SelectSQLParser.HEXADECIMAL_LITERAL, SelectSQLParser.REAL_LITERAL, SelectSQLParser.NULL_SPEC_LITERAL, SelectSQLParser.BIT_STRING, SelectSQLParser.STRING_CHARSET_NAME, SelectSQLParser.ID, SelectSQLParser.REVERSE_QUOTE_ID, SelectSQLParser.LOCAL_ID, SelectSQLParser.GLOBAL_ID]:
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SelectSQLParser.ALL:
                        self.state = 1091
                        localctx.aggregator = self.match(SelectSQLParser.ALL)


                    self.state = 1094
                    self.functionArg()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1097
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1098
                self.match(SelectSQLParser.COUNT)
                self.state = 1099
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1100
                localctx.aggregator = self.match(SelectSQLParser.DISTINCT)
                self.state = 1101
                self.functionArgs()
                self.state = 1102
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1104
                _la = self._input.LA(1)
                if not(((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (SelectSQLParser.BIT_AND - 210)) | (1 << (SelectSQLParser.BIT_OR - 210)) | (1 << (SelectSQLParser.BIT_XOR - 210)) | (1 << (SelectSQLParser.STD - 210)) | (1 << (SelectSQLParser.STDDEV - 210)) | (1 << (SelectSQLParser.STDDEV_POP - 210)) | (1 << (SelectSQLParser.STDDEV_SAMP - 210)) | (1 << (SelectSQLParser.VAR_POP - 210)) | (1 << (SelectSQLParser.VAR_SAMP - 210)) | (1 << (SelectSQLParser.VARIANCE - 210)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1105
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ALL:
                    self.state = 1106
                    localctx.aggregator = self.match(SelectSQLParser.ALL)


                self.state = 1109
                self.functionArg()
                self.state = 1110
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1112
                self.match(SelectSQLParser.GROUP_CONCAT)
                self.state = 1113
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.DISTINCT:
                    self.state = 1114
                    localctx.aggregator = self.match(SelectSQLParser.DISTINCT)


                self.state = 1117
                self.functionArgs()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.ORDER:
                    self.state = 1118
                    self.match(SelectSQLParser.ORDER)
                    self.state = 1119
                    self.match(SelectSQLParser.BY)
                    self.state = 1120
                    self.orderByExpression()
                    self.state = 1125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SelectSQLParser.COMMA:
                        self.state = 1121
                        self.match(SelectSQLParser.COMMA)
                        self.state = 1122
                        self.orderByExpression()
                        self.state = 1127
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.SEPARATOR:
                    self.state = 1130
                    self.match(SelectSQLParser.SEPARATOR)
                    self.state = 1131
                    localctx.separator = self.match(SelectSQLParser.STRING_LITERAL)


                self.state = 1134
                self.match(SelectSQLParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarFunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(SelectSQLParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(SelectSQLParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(SelectSQLParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SelectSQLParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SelectSQLParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(SelectSQLParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(SelectSQLParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(SelectSQLParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(SelectSQLParser.IF, 0)

        def INSERT(self):
            return self.getToken(SelectSQLParser.INSERT, 0)

        def LOCALTIME(self):
            return self.getToken(SelectSQLParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(SelectSQLParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(SelectSQLParser.MID, 0)

        def NOW(self):
            return self.getToken(SelectSQLParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(SelectSQLParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(SelectSQLParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(SelectSQLParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(SelectSQLParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(SelectSQLParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(SelectSQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(SelectSQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(SelectSQLParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_scalarFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionName" ):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionName" ):
                listener.exitScalarFunctionName(self)




    def scalarFunctionName(self):

        localctx = SelectSQLParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_scalarFunctionName)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.LEFT, SelectSQLParser.RIGHT, SelectSQLParser.DATE, SelectSQLParser.TIME, SelectSQLParser.TIMESTAMP, SelectSQLParser.YEAR, SelectSQLParser.COUNT, SelectSQLParser.POSITION, SelectSQLParser.QUARTER, SelectSQLParser.MONTH, SelectSQLParser.DAY, SelectSQLParser.HOUR, SelectSQLParser.MINUTE, SelectSQLParser.WEEK, SelectSQLParser.SECOND, SelectSQLParser.MICROSECOND, SelectSQLParser.GEOMETRYCOLLECTION, SelectSQLParser.LINESTRING, SelectSQLParser.MULTILINESTRING, SelectSQLParser.MULTIPOINT, SelectSQLParser.MULTIPOLYGON, SelectSQLParser.POINT, SelectSQLParser.POLYGON, SelectSQLParser.ABS, SelectSQLParser.ACOS, SelectSQLParser.ADDDATE, SelectSQLParser.ADDTIME, SelectSQLParser.AES_DECRYPT, SelectSQLParser.AES_ENCRYPT, SelectSQLParser.AREA, SelectSQLParser.ASBINARY, SelectSQLParser.ASIN, SelectSQLParser.ASTEXT, SelectSQLParser.ASWKB, SelectSQLParser.ASWKT, SelectSQLParser.ASYMMETRIC_DECRYPT, SelectSQLParser.ASYMMETRIC_DERIVE, SelectSQLParser.ASYMMETRIC_ENCRYPT, SelectSQLParser.ASYMMETRIC_SIGN, SelectSQLParser.ASYMMETRIC_VERIFY, SelectSQLParser.ATAN, SelectSQLParser.ATAN2, SelectSQLParser.BENCHMARK, SelectSQLParser.BIN, SelectSQLParser.BIT_COUNT, SelectSQLParser.BIT_LENGTH, SelectSQLParser.BUFFER, SelectSQLParser.CEIL, SelectSQLParser.CEILING, SelectSQLParser.CENTROID, SelectSQLParser.CHARACTER_LENGTH, SelectSQLParser.CHARSET, SelectSQLParser.CHAR_LENGTH, SelectSQLParser.COERCIBILITY, SelectSQLParser.COLLATION, SelectSQLParser.COMPRESS, SelectSQLParser.CONCAT, SelectSQLParser.CONCAT_WS, SelectSQLParser.CONNECTION_ID, SelectSQLParser.CONV, SelectSQLParser.CONVERT_TZ, SelectSQLParser.COS, SelectSQLParser.COT, SelectSQLParser.CRC32, SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, SelectSQLParser.CREATE_DH_PARAMETERS, SelectSQLParser.CREATE_DIGEST, SelectSQLParser.CROSSES, SelectSQLParser.DATEDIFF, SelectSQLParser.DATE_FORMAT, SelectSQLParser.DAYNAME, SelectSQLParser.DAYOFMONTH, SelectSQLParser.DAYOFWEEK, SelectSQLParser.DAYOFYEAR, SelectSQLParser.DECODE, SelectSQLParser.DEGREES, SelectSQLParser.DES_DECRYPT, SelectSQLParser.DES_ENCRYPT, SelectSQLParser.DIMENSION, SelectSQLParser.DISJOINT, SelectSQLParser.ELT, SelectSQLParser.ENCODE, SelectSQLParser.ENCRYPT, SelectSQLParser.ENDPOINT, SelectSQLParser.ENVELOPE, SelectSQLParser.EQUALS, SelectSQLParser.EXP, SelectSQLParser.EXPORT_SET, SelectSQLParser.EXTERIORRING, SelectSQLParser.EXTRACTVALUE, SelectSQLParser.FIELD, SelectSQLParser.FIND_IN_SET, SelectSQLParser.FLOOR, SelectSQLParser.FORMAT, SelectSQLParser.FOUND_ROWS, SelectSQLParser.FROM_BASE64, SelectSQLParser.FROM_DAYS, SelectSQLParser.FROM_UNIXTIME, SelectSQLParser.GEOMCOLLFROMTEXT, SelectSQLParser.GEOMCOLLFROMWKB, SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.GEOMETRYFROMTEXT, SelectSQLParser.GEOMETRYFROMWKB, SelectSQLParser.GEOMETRYN, SelectSQLParser.GEOMETRYTYPE, SelectSQLParser.GEOMFROMTEXT, SelectSQLParser.GEOMFROMWKB, SelectSQLParser.GET_FORMAT, SelectSQLParser.GET_LOCK, SelectSQLParser.GLENGTH, SelectSQLParser.GREATEST, SelectSQLParser.GTID_SUBSET, SelectSQLParser.GTID_SUBTRACT, SelectSQLParser.HEX, SelectSQLParser.IFNULL, SelectSQLParser.INET6_ATON, SelectSQLParser.INET6_NTOA, SelectSQLParser.INET_ATON, SelectSQLParser.INET_NTOA, SelectSQLParser.INSTR, SelectSQLParser.INTERIORRINGN, SelectSQLParser.INTERSECTS, SelectSQLParser.ISCLOSED, SelectSQLParser.ISEMPTY, SelectSQLParser.ISNULL, SelectSQLParser.ISSIMPLE, SelectSQLParser.IS_FREE_LOCK, SelectSQLParser.IS_IPV4, SelectSQLParser.IS_IPV4_COMPAT, SelectSQLParser.IS_IPV4_MAPPED, SelectSQLParser.IS_IPV6, SelectSQLParser.IS_USED_LOCK, SelectSQLParser.LAST_INSERT_ID, SelectSQLParser.LCASE, SelectSQLParser.LEAST, SelectSQLParser.LENGTH, SelectSQLParser.LINEFROMTEXT, SelectSQLParser.LINEFROMWKB, SelectSQLParser.LINESTRINGFROMTEXT, SelectSQLParser.LINESTRINGFROMWKB, SelectSQLParser.LN, SelectSQLParser.LOAD_FILE, SelectSQLParser.LOCATE, SelectSQLParser.LOG, SelectSQLParser.LOG10, SelectSQLParser.LOG2, SelectSQLParser.LOWER, SelectSQLParser.LPAD, SelectSQLParser.LTRIM, SelectSQLParser.MAKEDATE, SelectSQLParser.MAKETIME, SelectSQLParser.MAKE_SET, SelectSQLParser.MASTER_POS_WAIT, SelectSQLParser.MBRCONTAINS, SelectSQLParser.MBRDISJOINT, SelectSQLParser.MBREQUAL, SelectSQLParser.MBRINTERSECTS, SelectSQLParser.MBROVERLAPS, SelectSQLParser.MBRTOUCHES, SelectSQLParser.MBRWITHIN, SelectSQLParser.MD5, SelectSQLParser.MLINEFROMTEXT, SelectSQLParser.MLINEFROMWKB, SelectSQLParser.MONTHNAME, SelectSQLParser.MPOINTFROMTEXT, SelectSQLParser.MPOINTFROMWKB, SelectSQLParser.MPOLYFROMTEXT, SelectSQLParser.MPOLYFROMWKB, SelectSQLParser.MULTILINESTRINGFROMTEXT, SelectSQLParser.MULTILINESTRINGFROMWKB, SelectSQLParser.MULTIPOINTFROMTEXT, SelectSQLParser.MULTIPOINTFROMWKB, SelectSQLParser.MULTIPOLYGONFROMTEXT, SelectSQLParser.MULTIPOLYGONFROMWKB, SelectSQLParser.NAME_CONST, SelectSQLParser.NULLIF, SelectSQLParser.NUMGEOMETRIES, SelectSQLParser.NUMINTERIORRINGS, SelectSQLParser.NUMPOINTS, SelectSQLParser.OCT, SelectSQLParser.OCTET_LENGTH, SelectSQLParser.ORD, SelectSQLParser.OVERLAPS, SelectSQLParser.PERIOD_ADD, SelectSQLParser.PERIOD_DIFF, SelectSQLParser.PI, SelectSQLParser.POINTFROMTEXT, SelectSQLParser.POINTFROMWKB, SelectSQLParser.POINTN, SelectSQLParser.POLYFROMTEXT, SelectSQLParser.POLYFROMWKB, SelectSQLParser.POLYGONFROMTEXT, SelectSQLParser.POLYGONFROMWKB, SelectSQLParser.POW, SelectSQLParser.POWER, SelectSQLParser.QUOTE, SelectSQLParser.RADIANS, SelectSQLParser.RAND, SelectSQLParser.RANDOM_BYTES, SelectSQLParser.RELEASE_LOCK, SelectSQLParser.REVERSE, SelectSQLParser.ROUND, SelectSQLParser.ROW_COUNT, SelectSQLParser.RPAD, SelectSQLParser.RTRIM, SelectSQLParser.SEC_TO_TIME, SelectSQLParser.SESSION_USER, SelectSQLParser.SHA, SelectSQLParser.SHA1, SelectSQLParser.SHA2, SelectSQLParser.SIGN, SelectSQLParser.SIN, SelectSQLParser.SLEEP, SelectSQLParser.SOUNDEX, SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, SelectSQLParser.SQRT, SelectSQLParser.SRID, SelectSQLParser.STARTPOINT, SelectSQLParser.STRCMP, SelectSQLParser.STR_TO_DATE, SelectSQLParser.ST_AREA, SelectSQLParser.ST_ASBINARY, SelectSQLParser.ST_ASTEXT, SelectSQLParser.ST_ASWKB, SelectSQLParser.ST_ASWKT, SelectSQLParser.ST_BUFFER, SelectSQLParser.ST_CENTROID, SelectSQLParser.ST_CONTAINS, SelectSQLParser.ST_CROSSES, SelectSQLParser.ST_DIFFERENCE, SelectSQLParser.ST_DIMENSION, SelectSQLParser.ST_DISJOINT, SelectSQLParser.ST_DISTANCE, SelectSQLParser.ST_ENDPOINT, SelectSQLParser.ST_ENVELOPE, SelectSQLParser.ST_EQUALS, SelectSQLParser.ST_EXTERIORRING, SelectSQLParser.ST_GEOMCOLLFROMTEXT, SelectSQLParser.ST_GEOMCOLLFROMTXT, SelectSQLParser.ST_GEOMCOLLFROMWKB, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, SelectSQLParser.ST_GEOMETRYFROMTEXT, SelectSQLParser.ST_GEOMETRYFROMWKB, SelectSQLParser.ST_GEOMETRYN, SelectSQLParser.ST_GEOMETRYTYPE, SelectSQLParser.ST_GEOMFROMTEXT, SelectSQLParser.ST_GEOMFROMWKB, SelectSQLParser.ST_INTERIORRINGN, SelectSQLParser.ST_INTERSECTION, SelectSQLParser.ST_INTERSECTS, SelectSQLParser.ST_ISCLOSED, SelectSQLParser.ST_ISEMPTY, SelectSQLParser.ST_ISSIMPLE, SelectSQLParser.ST_LINEFROMTEXT, SelectSQLParser.ST_LINEFROMWKB, SelectSQLParser.ST_LINESTRINGFROMTEXT, SelectSQLParser.ST_LINESTRINGFROMWKB, SelectSQLParser.ST_NUMGEOMETRIES, SelectSQLParser.ST_NUMINTERIORRING, SelectSQLParser.ST_NUMINTERIORRINGS, SelectSQLParser.ST_NUMPOINTS, SelectSQLParser.ST_OVERLAPS, SelectSQLParser.ST_POINTFROMTEXT, SelectSQLParser.ST_POINTFROMWKB, SelectSQLParser.ST_POINTN, SelectSQLParser.ST_POLYFROMTEXT, SelectSQLParser.ST_POLYFROMWKB, SelectSQLParser.ST_POLYGONFROMTEXT, SelectSQLParser.ST_POLYGONFROMWKB, SelectSQLParser.ST_SRID, SelectSQLParser.ST_STARTPOINT, SelectSQLParser.ST_SYMDIFFERENCE, SelectSQLParser.ST_TOUCHES, SelectSQLParser.ST_UNION, SelectSQLParser.ST_WITHIN, SelectSQLParser.ST_X, SelectSQLParser.ST_Y, SelectSQLParser.SUBDATE, SelectSQLParser.SUBSTRING_INDEX, SelectSQLParser.SUBTIME, SelectSQLParser.SYSTEM_USER, SelectSQLParser.TAN, SelectSQLParser.TIMEDIFF, SelectSQLParser.TIMESTAMPADD, SelectSQLParser.TIMESTAMPDIFF, SelectSQLParser.TIME_FORMAT, SelectSQLParser.TIME_TO_SEC, SelectSQLParser.TOUCHES, SelectSQLParser.TO_BASE64, SelectSQLParser.TO_DAYS, SelectSQLParser.TO_SECONDS, SelectSQLParser.UCASE, SelectSQLParser.UNCOMPRESS, SelectSQLParser.UNCOMPRESSED_LENGTH, SelectSQLParser.UNHEX, SelectSQLParser.UNIX_TIMESTAMP, SelectSQLParser.UPDATEXML, SelectSQLParser.UPPER, SelectSQLParser.UUID, SelectSQLParser.UUID_SHORT, SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, SelectSQLParser.VERSION, SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, SelectSQLParser.WEEKDAY, SelectSQLParser.WEEKOFYEAR, SelectSQLParser.WEIGHT_STRING, SelectSQLParser.WITHIN, SelectSQLParser.YEARWEEK, SelectSQLParser.Y_FUNCTION, SelectSQLParser.X_FUNCTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1138
                self.functionNameBase()
                pass
            elif token in [SelectSQLParser.ASCII]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1139
                self.match(SelectSQLParser.ASCII)
                pass
            elif token in [SelectSQLParser.CURDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1140
                self.match(SelectSQLParser.CURDATE)
                pass
            elif token in [SelectSQLParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1141
                self.match(SelectSQLParser.CURRENT_DATE)
                pass
            elif token in [SelectSQLParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1142
                self.match(SelectSQLParser.CURRENT_TIME)
                pass
            elif token in [SelectSQLParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1143
                self.match(SelectSQLParser.CURRENT_TIMESTAMP)
                pass
            elif token in [SelectSQLParser.CURTIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1144
                self.match(SelectSQLParser.CURTIME)
                pass
            elif token in [SelectSQLParser.DATE_ADD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1145
                self.match(SelectSQLParser.DATE_ADD)
                pass
            elif token in [SelectSQLParser.DATE_SUB]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1146
                self.match(SelectSQLParser.DATE_SUB)
                pass
            elif token in [SelectSQLParser.IF]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1147
                self.match(SelectSQLParser.IF)
                pass
            elif token in [SelectSQLParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1148
                self.match(SelectSQLParser.INSERT)
                pass
            elif token in [SelectSQLParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1149
                self.match(SelectSQLParser.LOCALTIME)
                pass
            elif token in [SelectSQLParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1150
                self.match(SelectSQLParser.LOCALTIMESTAMP)
                pass
            elif token in [SelectSQLParser.MID]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1151
                self.match(SelectSQLParser.MID)
                pass
            elif token in [SelectSQLParser.NOW]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1152
                self.match(SelectSQLParser.NOW)
                pass
            elif token in [SelectSQLParser.REPLACE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1153
                self.match(SelectSQLParser.REPLACE)
                pass
            elif token in [SelectSQLParser.SUBSTR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1154
                self.match(SelectSQLParser.SUBSTR)
                pass
            elif token in [SelectSQLParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1155
                self.match(SelectSQLParser.SUBSTRING)
                pass
            elif token in [SelectSQLParser.SYSDATE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1156
                self.match(SelectSQLParser.SYSDATE)
                pass
            elif token in [SelectSQLParser.TRIM]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1157
                self.match(SelectSQLParser.TRIM)
                pass
            elif token in [SelectSQLParser.UTC_DATE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1158
                self.match(SelectSQLParser.UTC_DATE)
                pass
            elif token in [SelectSQLParser.UTC_TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1159
                self.match(SelectSQLParser.UTC_TIME)
                pass
            elif token in [SelectSQLParser.UTC_TIMESTAMP]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1160
                self.match(SelectSQLParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordFunctionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def functionArg(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionArgContext,0)


        def PASSWORD(self):
            return self.getToken(SelectSQLParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(SelectSQLParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_passwordFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionClause" ):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionClause" ):
                listener.exitPasswordFunctionClause(self)




    def passwordFunctionClause(self):

        localctx = SelectSQLParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.OLD_PASSWORD or _la==SelectSQLParser.PASSWORD):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1164
            self.match(SelectSQLParser.LR_BRACKET)
            self.state = 1165
            self.functionArg()
            self.state = 1166
            self.match(SelectSQLParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = SelectSQLParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1168
                self.constant()
                pass

            elif la_ == 2:
                self.state = 1169
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 1170
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 1171
                self.expression(0)
                pass


            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SelectSQLParser.COMMA:
                self.state = 1174
                self.match(SelectSQLParser.COMMA)
                self.state = 1179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1175
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 1176
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 1177
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 1178
                    self.expression(0)
                    pass


                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(SelectSQLParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(SelectSQLParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SelectSQLParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = SelectSQLParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionArg)
        try:
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1186
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1187
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1188
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1189
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SelectSQLParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SelectSQLParser.IS, 0)
        def TRUE(self):
            return self.getToken(SelectSQLParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(SelectSQLParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(SelectSQLParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(SelectSQLParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SelectSQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SelectSQLParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1193
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.NOT or _la==SelectSQLParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1194
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = SelectSQLParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1195
                self.predicate(0)
                self.state = 1196
                self.match(SelectSQLParser.IS)
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SelectSQLParser.NOT:
                    self.state = 1197
                    self.match(SelectSQLParser.NOT)


                self.state = 1200
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SelectSQLParser.FALSE or _la==SelectSQLParser.TRUE or _la==SelectSQLParser.UNKNOWN):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = SelectSQLParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1202
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SelectSQLParser.LogicalExpressionContext(self, SelectSQLParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 1205
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1206
                    self.logicalOperator()
                    self.state = 1207
                    self.expression(4) 
                self.state = 1213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(SelectSQLParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(SelectSQLParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoundsLikePredicate" ):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoundsLikePredicate" ):
                listener.exitSoundsLikePredicate(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(SelectSQLParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(SelectSQLParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SelectSQLParser.PredicateContext,0)

        def IN(self):
            return self.getToken(SelectSQLParser.IN, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(SelectSQLParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)


    class SubqueryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SelectSQLParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SelectSQLParser.ComparisonOperatorContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(SelectSQLParser.SelectStatementContext,0)

        def ALL(self):
            return self.getToken(SelectSQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(SelectSQLParser.ANY, 0)
        def SOME(self):
            return self.getToken(SelectSQLParser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparasionPredicate" ):
                listener.enterSubqueryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparasionPredicate" ):
                listener.exitSubqueryComparasionPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(SelectSQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SelectSQLParser.AND, 0)
        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)


    class BinaryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SelectSQLParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparasionPredicate" ):
                listener.enterBinaryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparasionPredicate" ):
                listener.exitBinaryComparasionPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(SelectSQLParser.PredicateContext,0)

        def IS(self):
            return self.getToken(SelectSQLParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(SelectSQLParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(SelectSQLParser.LIKE, 0)
        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SelectSQLParser.ESCAPE, 0)
        def STRING_LITERAL(self):
            return self.getToken(SelectSQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.PredicateContext
            super().__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(SelectSQLParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(SelectSQLParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexpPredicate" ):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexpPredicate" ):
                listener.exitRegexpPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SelectSQLParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 146
        self.enterRecursionRule(localctx, 146, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SelectSQLParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1215
                self.match(SelectSQLParser.LOCAL_ID)
                self.state = 1216
                self.match(SelectSQLParser.VAR_ASSIGN)


            self.state = 1219
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1276
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                    if la_ == 1:
                        localctx = SelectSQLParser.BinaryComparasionPredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1221
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1222
                        self.comparisonOperator()
                        self.state = 1223
                        localctx.right = self.predicate(8)
                        pass

                    elif la_ == 2:
                        localctx = SelectSQLParser.BetweenPredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1225
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1227
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SelectSQLParser.NOT:
                            self.state = 1226
                            self.match(SelectSQLParser.NOT)


                        self.state = 1229
                        self.match(SelectSQLParser.BETWEEN)
                        self.state = 1230
                        self.predicate(0)
                        self.state = 1231
                        self.match(SelectSQLParser.AND)
                        self.state = 1232
                        self.predicate(6)
                        pass

                    elif la_ == 3:
                        localctx = SelectSQLParser.SoundsLikePredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1234
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1235
                        self.match(SelectSQLParser.SOUNDS)
                        self.state = 1236
                        self.match(SelectSQLParser.LIKE)
                        self.state = 1237
                        self.predicate(5)
                        pass

                    elif la_ == 4:
                        localctx = SelectSQLParser.RegexpPredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1238
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1240
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SelectSQLParser.NOT:
                            self.state = 1239
                            self.match(SelectSQLParser.NOT)


                        self.state = 1242
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SelectSQLParser.REGEXP or _la==SelectSQLParser.RLIKE):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1243
                        self.predicate(3)
                        pass

                    elif la_ == 5:
                        localctx = SelectSQLParser.InPredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1244
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1246
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SelectSQLParser.NOT:
                            self.state = 1245
                            self.match(SelectSQLParser.NOT)


                        self.state = 1248
                        self.match(SelectSQLParser.IN)
                        self.state = 1249
                        self.match(SelectSQLParser.LR_BRACKET)
                        self.state = 1252
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                        if la_ == 1:
                            self.state = 1250
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 1251
                            self.expressions()
                            pass


                        self.state = 1254
                        self.match(SelectSQLParser.RR_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = SelectSQLParser.IsNullPredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1256
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1257
                        self.match(SelectSQLParser.IS)
                        self.state = 1258
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = SelectSQLParser.SubqueryComparasionPredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1259
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1260
                        self.comparisonOperator()
                        self.state = 1261
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SelectSQLParser.ALL or _la==SelectSQLParser.ANY or _la==SelectSQLParser.SOME):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1262
                        self.match(SelectSQLParser.LR_BRACKET)
                        self.state = 1263
                        self.selectStatement()
                        self.state = 1264
                        self.match(SelectSQLParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = SelectSQLParser.LikePredicateContext(self, SelectSQLParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1266
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1268
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SelectSQLParser.NOT:
                            self.state = 1267
                            self.match(SelectSQLParser.NOT)


                        self.state = 1270
                        self.match(SelectSQLParser.LIKE)
                        self.state = 1271
                        self.predicate(0)
                        self.state = 1274
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                        if la_ == 1:
                            self.state = 1272
                            self.match(SelectSQLParser.ESCAPE)
                            self.state = 1273
                            self.match(SelectSQLParser.STRING_LITERAL)


                        pass

             
                self.state = 1280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(SelectSQLParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)


    class CollateExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionAtomContext,0)

        def COLLATE(self):
            return self.getToken(SelectSQLParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(SelectSQLParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateExpressionAtom" ):
                listener.enterCollateExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateExpressionAtom" ):
                listener.exitCollateExpressionAtom(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(SelectSQLParser.SelectStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpessionAtom" ):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpessionAtom" ):
                listener.exitSubqueryExpessionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SelectSQLParser.ROW, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(SelectSQLParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(SelectSQLParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(SelectSQLParser.IntervalTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpressionAtom" ):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpressionAtom" ):
                listener.exitIntervalExpressionAtom(self)


    class ExistsExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SelectSQLParser.EXISTS, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(SelectSQLParser.SelectStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpessionAtom" ):
                listener.enterExistsExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpessionAtom" ):
                listener.exitExistsExpessionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SelectSQLParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(SelectSQLParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(SelectSQLParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(SelectSQLParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(SelectSQLParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(SelectSQLParser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SelectSQLParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(SelectSQLParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)


    class VariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SelectSQLParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable(self):
            return self.getTypedRuleContext(SelectSQLParser.VariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableExpressionAtom" ):
                listener.enterVariableExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableExpressionAtom" ):
                listener.exitVariableExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SelectSQLParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                localctx = SelectSQLParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1282
                self.constant()
                pass

            elif la_ == 2:
                localctx = SelectSQLParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1283
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = SelectSQLParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1284
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = SelectSQLParser.VariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1285
                self.variable()
                pass

            elif la_ == 5:
                localctx = SelectSQLParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1286
                self.unaryOperator()
                self.state = 1287
                self.expressionAtom(9)
                pass

            elif la_ == 6:
                localctx = SelectSQLParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1289
                self.match(SelectSQLParser.BINARY)
                self.state = 1290
                self.expressionAtom(8)
                pass

            elif la_ == 7:
                localctx = SelectSQLParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1291
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1292
                self.expression(0)
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SelectSQLParser.COMMA:
                    self.state = 1293
                    self.match(SelectSQLParser.COMMA)
                    self.state = 1294
                    self.expression(0)
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1300
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = SelectSQLParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1302
                self.match(SelectSQLParser.ROW)
                self.state = 1303
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1304
                self.expression(0)
                self.state = 1307 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1305
                    self.match(SelectSQLParser.COMMA)
                    self.state = 1306
                    self.expression(0)
                    self.state = 1309 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SelectSQLParser.COMMA):
                        break

                self.state = 1311
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = SelectSQLParser.ExistsExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1313
                self.match(SelectSQLParser.EXISTS)
                self.state = 1314
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1315
                self.selectStatement()
                self.state = 1316
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = SelectSQLParser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1318
                self.match(SelectSQLParser.LR_BRACKET)
                self.state = 1319
                self.selectStatement()
                self.state = 1320
                self.match(SelectSQLParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = SelectSQLParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1322
                self.match(SelectSQLParser.INTERVAL)
                self.state = 1323
                self.expression(0)
                self.state = 1324
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1339
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                    if la_ == 1:
                        localctx = SelectSQLParser.BitExpressionAtomContext(self, SelectSQLParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1328
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1329
                        self.bitOperator()
                        self.state = 1330
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 2:
                        localctx = SelectSQLParser.MathExpressionAtomContext(self, SelectSQLParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1332
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1333
                        self.mathOperator()
                        self.state = 1334
                        localctx.right = self.expressionAtom(2)
                        pass

                    elif la_ == 3:
                        localctx = SelectSQLParser.CollateExpressionAtomContext(self, SelectSQLParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1336
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1337
                        self.match(SelectSQLParser.COLLATE)
                        self.state = 1338
                        self.collationName()
                        pass

             
                self.state = 1343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SelectSQLParser.NOT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = SelectSQLParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.NOT or ((((_la - 931)) & ~0x3f) == 0 and ((1 << (_la - 931)) & ((1 << (SelectSQLParser.PLUS - 931)) | (1 << (SelectSQLParser.MINUS - 931)) | (1 << (SelectSQLParser.EXCLAMATION_SYMBOL - 931)) | (1 << (SelectSQLParser.BIT_NOT_OP - 931)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SelectSQLParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_comparisonOperator)
        try:
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1346
                self.match(SelectSQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1347
                self.match(SelectSQLParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1348
                self.match(SelectSQLParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1349
                self.match(SelectSQLParser.LESS_SYMBOL)
                self.state = 1350
                self.match(SelectSQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1351
                self.match(SelectSQLParser.GREATER_SYMBOL)
                self.state = 1352
                self.match(SelectSQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1353
                self.match(SelectSQLParser.EQUAL_SYMBOL)
                self.state = 1354
                self.match(SelectSQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1355
                self.match(SelectSQLParser.LESS_SYMBOL)
                self.state = 1356
                self.match(SelectSQLParser.GREATER_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1357
                self.match(SelectSQLParser.EXCLAMATION_SYMBOL)
                self.state = 1358
                self.match(SelectSQLParser.EQUAL_SYMBOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1359
                self.match(SelectSQLParser.LESS_SYMBOL)
                self.state = 1360
                self.match(SelectSQLParser.EQUAL_SYMBOL)
                self.state = 1361
                self.match(SelectSQLParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(SelectSQLParser.AND, 0)

        def XOR(self):
            return self.getToken(SelectSQLParser.XOR, 0)

        def OR(self):
            return self.getToken(SelectSQLParser.OR, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = SelectSQLParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_logicalOperator)
        try:
            self.state = 1371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.match(SelectSQLParser.AND)
                pass
            elif token in [SelectSQLParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1365
                self.match(SelectSQLParser.BIT_AND_OP)
                self.state = 1366
                self.match(SelectSQLParser.BIT_AND_OP)
                pass
            elif token in [SelectSQLParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                self.match(SelectSQLParser.XOR)
                pass
            elif token in [SelectSQLParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1368
                self.match(SelectSQLParser.OR)
                pass
            elif token in [SelectSQLParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1369
                self.match(SelectSQLParser.BIT_OR_OP)
                self.state = 1370
                self.match(SelectSQLParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SelectSQLParser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)




    def bitOperator(self):

        localctx = SelectSQLParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_bitOperator)
        try:
            self.state = 1380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SelectSQLParser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373
                self.match(SelectSQLParser.LESS_SYMBOL)
                self.state = 1374
                self.match(SelectSQLParser.LESS_SYMBOL)
                pass
            elif token in [SelectSQLParser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1375
                self.match(SelectSQLParser.GREATER_SYMBOL)
                self.state = 1376
                self.match(SelectSQLParser.GREATER_SYMBOL)
                pass
            elif token in [SelectSQLParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1377
                self.match(SelectSQLParser.BIT_AND_OP)
                pass
            elif token in [SelectSQLParser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1378
                self.match(SelectSQLParser.BIT_XOR_OP)
                pass
            elif token in [SelectSQLParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1379
                self.match(SelectSQLParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(SelectSQLParser.DIV, 0)

        def MOD(self):
            return self.getToken(SelectSQLParser.MOD, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = SelectSQLParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            _la = self._input.LA(1)
            if not(((((_la - 928)) & ~0x3f) == 0 and ((1 << (_la - 928)) & ((1 << (SelectSQLParser.STAR - 928)) | (1 << (SelectSQLParser.DIVIDE - 928)) | (1 << (SelectSQLParser.MODULE - 928)) | (1 << (SelectSQLParser.PLUS - 928)) | (1 << (SelectSQLParser.MINUSMINUS - 928)) | (1 << (SelectSQLParser.MINUS - 928)) | (1 << (SelectSQLParser.DIV - 928)) | (1 << (SelectSQLParser.MOD - 928)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharsetNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(SelectSQLParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(SelectSQLParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(SelectSQLParser.BIG5, 0)

        def CP1250(self):
            return self.getToken(SelectSQLParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(SelectSQLParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(SelectSQLParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(SelectSQLParser.CP1257, 0)

        def CP850(self):
            return self.getToken(SelectSQLParser.CP850, 0)

        def CP852(self):
            return self.getToken(SelectSQLParser.CP852, 0)

        def CP866(self):
            return self.getToken(SelectSQLParser.CP866, 0)

        def CP932(self):
            return self.getToken(SelectSQLParser.CP932, 0)

        def DEC8(self):
            return self.getToken(SelectSQLParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(SelectSQLParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(SelectSQLParser.EUCKR, 0)

        def GB2312(self):
            return self.getToken(SelectSQLParser.GB2312, 0)

        def GBK(self):
            return self.getToken(SelectSQLParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(SelectSQLParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(SelectSQLParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(SelectSQLParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(SelectSQLParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(SelectSQLParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(SelectSQLParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(SelectSQLParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(SelectSQLParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(SelectSQLParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(SelectSQLParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(SelectSQLParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(SelectSQLParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(SelectSQLParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(SelectSQLParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(SelectSQLParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(SelectSQLParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(SelectSQLParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(SelectSQLParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(SelectSQLParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(SelectSQLParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(SelectSQLParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(SelectSQLParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(SelectSQLParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(SelectSQLParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)




    def charsetNameBase(self):

        localctx = SelectSQLParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            _la = self._input.LA(1)
            if not(((((_la - 567)) & ~0x3f) == 0 and ((1 << (_la - 567)) & ((1 << (SelectSQLParser.ARMSCII8 - 567)) | (1 << (SelectSQLParser.ASCII - 567)) | (1 << (SelectSQLParser.BIG5 - 567)) | (1 << (SelectSQLParser.CP1250 - 567)) | (1 << (SelectSQLParser.CP1251 - 567)) | (1 << (SelectSQLParser.CP1256 - 567)) | (1 << (SelectSQLParser.CP1257 - 567)) | (1 << (SelectSQLParser.CP850 - 567)) | (1 << (SelectSQLParser.CP852 - 567)) | (1 << (SelectSQLParser.CP866 - 567)) | (1 << (SelectSQLParser.CP932 - 567)) | (1 << (SelectSQLParser.DEC8 - 567)) | (1 << (SelectSQLParser.EUCJPMS - 567)) | (1 << (SelectSQLParser.EUCKR - 567)) | (1 << (SelectSQLParser.GB2312 - 567)) | (1 << (SelectSQLParser.GBK - 567)) | (1 << (SelectSQLParser.GEOSTD8 - 567)) | (1 << (SelectSQLParser.GREEK - 567)) | (1 << (SelectSQLParser.HEBREW - 567)) | (1 << (SelectSQLParser.HP8 - 567)) | (1 << (SelectSQLParser.KEYBCS2 - 567)) | (1 << (SelectSQLParser.KOI8R - 567)) | (1 << (SelectSQLParser.KOI8U - 567)) | (1 << (SelectSQLParser.LATIN1 - 567)) | (1 << (SelectSQLParser.LATIN2 - 567)) | (1 << (SelectSQLParser.LATIN5 - 567)) | (1 << (SelectSQLParser.LATIN7 - 567)) | (1 << (SelectSQLParser.MACCE - 567)) | (1 << (SelectSQLParser.MACROMAN - 567)) | (1 << (SelectSQLParser.SJIS - 567)) | (1 << (SelectSQLParser.SWE7 - 567)) | (1 << (SelectSQLParser.TIS620 - 567)) | (1 << (SelectSQLParser.UCS2 - 567)) | (1 << (SelectSQLParser.UJIS - 567)) | (1 << (SelectSQLParser.UTF16 - 567)) | (1 << (SelectSQLParser.UTF16LE - 567)) | (1 << (SelectSQLParser.UTF32 - 567)) | (1 << (SelectSQLParser.UTF8 - 567)) | (1 << (SelectSQLParser.UTF8MB3 - 567)) | (1 << (SelectSQLParser.UTF8MB4 - 567)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionLevelBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(SelectSQLParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(SelectSQLParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SelectSQLParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(SelectSQLParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_transactionLevelBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevelBase" ):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevelBase" ):
                listener.exitTransactionLevelBase(self)




    def transactionLevelBase(self):

        localctx = SelectSQLParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            _la = self._input.LA(1)
            if not(((((_la - 618)) & ~0x3f) == 0 and ((1 << (_la - 618)) & ((1 << (SelectSQLParser.REPEATABLE - 618)) | (1 << (SelectSQLParser.COMMITTED - 618)) | (1 << (SelectSQLParser.UNCOMMITTED - 618)) | (1 << (SelectSQLParser.SERIALIZABLE - 618)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegesBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(SelectSQLParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(SelectSQLParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(SelectSQLParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(SelectSQLParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(SelectSQLParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(SelectSQLParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(SelectSQLParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(SelectSQLParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(SelectSQLParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_privilegesBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegesBase" ):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegesBase" ):
                listener.exitPrivilegesBase(self)




    def privilegesBase(self):

        localctx = SelectSQLParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            _la = self._input.LA(1)
            if not(((((_la - 558)) & ~0x3f) == 0 and ((1 << (_la - 558)) & ((1 << (SelectSQLParser.TABLES - 558)) | (1 << (SelectSQLParser.ROUTINE - 558)) | (1 << (SelectSQLParser.EXECUTE - 558)) | (1 << (SelectSQLParser.FILE - 558)) | (1 << (SelectSQLParser.PROCESS - 558)) | (1 << (SelectSQLParser.RELOAD - 558)) | (1 << (SelectSQLParser.SHUTDOWN - 558)) | (1 << (SelectSQLParser.SUPER - 558)) | (1 << (SelectSQLParser.PRIVILEGES - 558)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(SelectSQLParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(SelectSQLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SelectSQLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SelectSQLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SelectSQLParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(SelectSQLParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(SelectSQLParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(SelectSQLParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_intervalTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeBase" ):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeBase" ):
                listener.exitIntervalTypeBase(self)




    def intervalTypeBase(self):

        localctx = SelectSQLParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            _la = self._input.LA(1)
            if not(((((_la - 550)) & ~0x3f) == 0 and ((1 << (_la - 550)) & ((1 << (SelectSQLParser.QUARTER - 550)) | (1 << (SelectSQLParser.MONTH - 550)) | (1 << (SelectSQLParser.DAY - 550)) | (1 << (SelectSQLParser.HOUR - 550)) | (1 << (SelectSQLParser.MINUTE - 550)) | (1 << (SelectSQLParser.WEEK - 550)) | (1 << (SelectSQLParser.SECOND - 550)) | (1 << (SelectSQLParser.MICROSECOND - 550)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(SelectSQLParser.DATE, 0)

        def TIME(self):
            return self.getToken(SelectSQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SelectSQLParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(SelectSQLParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(SelectSQLParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(SelectSQLParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(SelectSQLParser.TEXT, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = SelectSQLParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            _la = self._input.LA(1)
            if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (SelectSQLParser.DATE - 180)) | (1 << (SelectSQLParser.TIME - 180)) | (1 << (SelectSQLParser.TIMESTAMP - 180)) | (1 << (SelectSQLParser.DATETIME - 180)) | (1 << (SelectSQLParser.YEAR - 180)) | (1 << (SelectSQLParser.TEXT - 180)) | (1 << (SelectSQLParser.ENUM - 180)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordsCanBeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(SelectSQLParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(SelectSQLParser.ACTION, 0)

        def AFTER(self):
            return self.getToken(SelectSQLParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(SelectSQLParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(SelectSQLParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(SelectSQLParser.ANY, 0)

        def AT(self):
            return self.getToken(SelectSQLParser.AT, 0)

        def AUTHORS(self):
            return self.getToken(SelectSQLParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(SelectSQLParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(SelectSQLParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(SelectSQLParser.AUTO_INCREMENT, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(SelectSQLParser.AVG_ROW_LENGTH, 0)

        def BEGIN(self):
            return self.getToken(SelectSQLParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(SelectSQLParser.BINLOG, 0)

        def BIT(self):
            return self.getToken(SelectSQLParser.BIT, 0)

        def BLOCK(self):
            return self.getToken(SelectSQLParser.BLOCK, 0)

        def BOOL(self):
            return self.getToken(SelectSQLParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(SelectSQLParser.BOOLEAN, 0)

        def BTREE(self):
            return self.getToken(SelectSQLParser.BTREE, 0)

        def CASCADED(self):
            return self.getToken(SelectSQLParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(SelectSQLParser.CHAIN, 0)

        def CHANNEL(self):
            return self.getToken(SelectSQLParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(SelectSQLParser.CHECKSUM, 0)

        def CIPHER(self):
            return self.getToken(SelectSQLParser.CIPHER, 0)

        def CLIENT(self):
            return self.getToken(SelectSQLParser.CLIENT, 0)

        def COALESCE(self):
            return self.getToken(SelectSQLParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(SelectSQLParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(SelectSQLParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(SelectSQLParser.COLUMN_FORMAT, 0)

        def COMMENT(self):
            return self.getToken(SelectSQLParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(SelectSQLParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(SelectSQLParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(SelectSQLParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(SelectSQLParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(SelectSQLParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(SelectSQLParser.CONCURRENT, 0)

        def CONNECTION(self):
            return self.getToken(SelectSQLParser.CONNECTION, 0)

        def CONSISTENT(self):
            return self.getToken(SelectSQLParser.CONSISTENT, 0)

        def CONTAINS(self):
            return self.getToken(SelectSQLParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(SelectSQLParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(SelectSQLParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(SelectSQLParser.COPY, 0)

        def CPU(self):
            return self.getToken(SelectSQLParser.CPU, 0)

        def DATA(self):
            return self.getToken(SelectSQLParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(SelectSQLParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(SelectSQLParser.DEALLOCATE, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(SelectSQLParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(SelectSQLParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(SelectSQLParser.DELAY_KEY_WRITE, 0)

        def DIRECTORY(self):
            return self.getToken(SelectSQLParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(SelectSQLParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(SelectSQLParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(SelectSQLParser.DISK, 0)

        def DO(self):
            return self.getToken(SelectSQLParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(SelectSQLParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(SelectSQLParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(SelectSQLParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(SelectSQLParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(SelectSQLParser.ENCRYPTION, 0)

        def ENDS(self):
            return self.getToken(SelectSQLParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(SelectSQLParser.ENGINE, 0)

        def ENGINES(self):
            return self.getToken(SelectSQLParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(SelectSQLParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(SelectSQLParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(SelectSQLParser.ESCAPE, 0)

        def EVEN(self):
            return self.getToken(SelectSQLParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(SelectSQLParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(SelectSQLParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(SelectSQLParser.EVERY, 0)

        def EXCHANGE(self):
            return self.getToken(SelectSQLParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(SelectSQLParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(SelectSQLParser.EXPIRE, 0)

        def EXTENT_SIZE(self):
            return self.getToken(SelectSQLParser.EXTENT_SIZE, 0)

        def FAULTS(self):
            return self.getToken(SelectSQLParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(SelectSQLParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(SelectSQLParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(SelectSQLParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(SelectSQLParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(SelectSQLParser.FIXED, 0)

        def FOLLOWS(self):
            return self.getToken(SelectSQLParser.FOLLOWS, 0)

        def FULL(self):
            return self.getToken(SelectSQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(SelectSQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(SelectSQLParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(SelectSQLParser.GRANTS, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(SelectSQLParser.GROUP_REPLICATION, 0)

        def HASH(self):
            return self.getToken(SelectSQLParser.HASH, 0)

        def HOST(self):
            return self.getToken(SelectSQLParser.HOST, 0)

        def IDENTIFIED(self):
            return self.getToken(SelectSQLParser.IDENTIFIED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(SelectSQLParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(SelectSQLParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(SelectSQLParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(SelectSQLParser.INITIAL_SIZE, 0)

        def INPLACE(self):
            return self.getToken(SelectSQLParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(SelectSQLParser.INSERT_METHOD, 0)

        def INSTANCE(self):
            return self.getToken(SelectSQLParser.INSTANCE, 0)

        def INVOKER(self):
            return self.getToken(SelectSQLParser.INVOKER, 0)

        def IO(self):
            return self.getToken(SelectSQLParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(SelectSQLParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(SelectSQLParser.IPC, 0)

        def ISOLATION(self):
            return self.getToken(SelectSQLParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(SelectSQLParser.ISSUER, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(SelectSQLParser.KEY_BLOCK_SIZE, 0)

        def LANGUAGE(self):
            return self.getToken(SelectSQLParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(SelectSQLParser.LAST, 0)

        def LEAVES(self):
            return self.getToken(SelectSQLParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(SelectSQLParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(SelectSQLParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(SelectSQLParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(SelectSQLParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(SelectSQLParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(SelectSQLParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(SelectSQLParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(SelectSQLParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(SelectSQLParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(SelectSQLParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(SelectSQLParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(SelectSQLParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(SelectSQLParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(SelectSQLParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(SelectSQLParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(SelectSQLParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(SelectSQLParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(SelectSQLParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(SelectSQLParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(SelectSQLParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(SelectSQLParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(SelectSQLParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(SelectSQLParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(SelectSQLParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(SelectSQLParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(SelectSQLParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(SelectSQLParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(SelectSQLParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(SelectSQLParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX_ROWS(self):
            return self.getToken(SelectSQLParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(SelectSQLParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(SelectSQLParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(SelectSQLParser.MAX_USER_CONNECTIONS, 0)

        def MEMORY(self):
            return self.getToken(SelectSQLParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(SelectSQLParser.MERGE, 0)

        def MID(self):
            return self.getToken(SelectSQLParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(SelectSQLParser.MIGRATE, 0)

        def MIN_ROWS(self):
            return self.getToken(SelectSQLParser.MIN_ROWS, 0)

        def MODIFY(self):
            return self.getToken(SelectSQLParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(SelectSQLParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(SelectSQLParser.MYSQL, 0)

        def NAME(self):
            return self.getToken(SelectSQLParser.NAME, 0)

        def NAMES(self):
            return self.getToken(SelectSQLParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(SelectSQLParser.NCHAR, 0)

        def NEVER(self):
            return self.getToken(SelectSQLParser.NEVER, 0)

        def NO(self):
            return self.getToken(SelectSQLParser.NO, 0)

        def NODEGROUP(self):
            return self.getToken(SelectSQLParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(SelectSQLParser.NONE, 0)

        def OFFLINE(self):
            return self.getToken(SelectSQLParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(SelectSQLParser.OFFSET, 0)

        def OJ(self):
            return self.getToken(SelectSQLParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(SelectSQLParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(SelectSQLParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(SelectSQLParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(SelectSQLParser.ONLY, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(SelectSQLParser.OPTIMIZER_COSTS, 0)

        def OPTIONS(self):
            return self.getToken(SelectSQLParser.OPTIONS, 0)

        def OWNER(self):
            return self.getToken(SelectSQLParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(SelectSQLParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(SelectSQLParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(SelectSQLParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(SelectSQLParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(SelectSQLParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(SelectSQLParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(SelectSQLParser.PASSWORD, 0)

        def PHASE(self):
            return self.getToken(SelectSQLParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(SelectSQLParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(SelectSQLParser.PLUGIN_DIR, 0)

        def PORT(self):
            return self.getToken(SelectSQLParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(SelectSQLParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(SelectSQLParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(SelectSQLParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(SelectSQLParser.PREV, 0)

        def PROCESSLIST(self):
            return self.getToken(SelectSQLParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(SelectSQLParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(SelectSQLParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(SelectSQLParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(SelectSQLParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(SelectSQLParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(SelectSQLParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(SelectSQLParser.RECOVER, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(SelectSQLParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(SelectSQLParser.REDUNDANT, 0)

        def RELAYLOG(self):
            return self.getToken(SelectSQLParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(SelectSQLParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(SelectSQLParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(SelectSQLParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(SelectSQLParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(SelectSQLParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(SelectSQLParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(SelectSQLParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(SelectSQLParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(SelectSQLParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(SelectSQLParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(SelectSQLParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(SelectSQLParser.REPLICATION, 0)

        def RESUME(self):
            return self.getToken(SelectSQLParser.RESUME, 0)

        def RETURNS(self):
            return self.getToken(SelectSQLParser.RETURNS, 0)

        def ROLLBACK(self):
            return self.getToken(SelectSQLParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(SelectSQLParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(SelectSQLParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(SelectSQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SelectSQLParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(SelectSQLParser.ROW_FORMAT, 0)

        def SAVEPOINT(self):
            return self.getToken(SelectSQLParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(SelectSQLParser.SCHEDULE, 0)

        def SECURITY(self):
            return self.getToken(SelectSQLParser.SECURITY, 0)

        def SERVER(self):
            return self.getToken(SelectSQLParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(SelectSQLParser.SESSION, 0)

        def SHARE(self):
            return self.getToken(SelectSQLParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(SelectSQLParser.SHARED, 0)

        def SIGNED(self):
            return self.getToken(SelectSQLParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(SelectSQLParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(SelectSQLParser.SLAVE, 0)

        def SNAPSHOT(self):
            return self.getToken(SelectSQLParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(SelectSQLParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(SelectSQLParser.SOME, 0)

        def SOUNDS(self):
            return self.getToken(SelectSQLParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(SelectSQLParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(SelectSQLParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(SelectSQLParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(SelectSQLParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(SelectSQLParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(SelectSQLParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(SelectSQLParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(SelectSQLParser.SQL_THREAD, 0)

        def START(self):
            return self.getToken(SelectSQLParser.START, 0)

        def STARTS(self):
            return self.getToken(SelectSQLParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(SelectSQLParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(SelectSQLParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(SelectSQLParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(SelectSQLParser.STATUS, 0)

        def STOP(self):
            return self.getToken(SelectSQLParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(SelectSQLParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(SelectSQLParser.STRING, 0)

        def SUBJECT(self):
            return self.getToken(SelectSQLParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(SelectSQLParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(SelectSQLParser.SUBPARTITIONS, 0)

        def SUSPEND(self):
            return self.getToken(SelectSQLParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(SelectSQLParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(SelectSQLParser.SWITCHES, 0)

        def TABLESPACE(self):
            return self.getToken(SelectSQLParser.TABLESPACE, 0)

        def TEMPORARY(self):
            return self.getToken(SelectSQLParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(SelectSQLParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(SelectSQLParser.THAN, 0)

        def TRANSACTION(self):
            return self.getToken(SelectSQLParser.TRANSACTION, 0)

        def TRUNCATE(self):
            return self.getToken(SelectSQLParser.TRUNCATE, 0)

        def UNDEFINED(self):
            return self.getToken(SelectSQLParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(SelectSQLParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(SelectSQLParser.UNDO_BUFFER_SIZE, 0)

        def UNKNOWN(self):
            return self.getToken(SelectSQLParser.UNKNOWN, 0)

        def UPGRADE(self):
            return self.getToken(SelectSQLParser.UPGRADE, 0)

        def USER(self):
            return self.getToken(SelectSQLParser.USER, 0)

        def VALIDATION(self):
            return self.getToken(SelectSQLParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(SelectSQLParser.VALUE, 0)

        def VARIABLES(self):
            return self.getToken(SelectSQLParser.VARIABLES, 0)

        def VIEW(self):
            return self.getToken(SelectSQLParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(SelectSQLParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(SelectSQLParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(SelectSQLParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SelectSQLParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(SelectSQLParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(SelectSQLParser.X509, 0)

        def XA(self):
            return self.getToken(SelectSQLParser.XA, 0)

        def XML(self):
            return self.getToken(SelectSQLParser.XML, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_keywordsCanBeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordsCanBeId" ):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordsCanBeId" ):
                listener.exitKeywordsCanBeId(self)




    def keywordsCanBeId(self):

        localctx = SelectSQLParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            _la = self._input.LA(1)
            if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (SelectSQLParser.ACCOUNT - 244)) | (1 << (SelectSQLParser.ACTION - 244)) | (1 << (SelectSQLParser.AFTER - 244)) | (1 << (SelectSQLParser.AGGREGATE - 244)) | (1 << (SelectSQLParser.ALGORITHM - 244)) | (1 << (SelectSQLParser.ANY - 244)) | (1 << (SelectSQLParser.AT - 244)) | (1 << (SelectSQLParser.AUTHORS - 244)) | (1 << (SelectSQLParser.AUTOCOMMIT - 244)) | (1 << (SelectSQLParser.AUTOEXTEND_SIZE - 244)) | (1 << (SelectSQLParser.AUTO_INCREMENT - 244)) | (1 << (SelectSQLParser.AVG_ROW_LENGTH - 244)) | (1 << (SelectSQLParser.BEGIN - 244)) | (1 << (SelectSQLParser.BINLOG - 244)) | (1 << (SelectSQLParser.BIT - 244)) | (1 << (SelectSQLParser.BLOCK - 244)) | (1 << (SelectSQLParser.BOOL - 244)) | (1 << (SelectSQLParser.BOOLEAN - 244)) | (1 << (SelectSQLParser.BTREE - 244)) | (1 << (SelectSQLParser.CASCADED - 244)) | (1 << (SelectSQLParser.CHAIN - 244)) | (1 << (SelectSQLParser.CHANNEL - 244)) | (1 << (SelectSQLParser.CHECKSUM - 244)) | (1 << (SelectSQLParser.CIPHER - 244)) | (1 << (SelectSQLParser.CLIENT - 244)) | (1 << (SelectSQLParser.COALESCE - 244)) | (1 << (SelectSQLParser.CODE - 244)) | (1 << (SelectSQLParser.COLUMNS - 244)) | (1 << (SelectSQLParser.COLUMN_FORMAT - 244)) | (1 << (SelectSQLParser.COMMENT - 244)) | (1 << (SelectSQLParser.COMMIT - 244)) | (1 << (SelectSQLParser.COMPACT - 244)) | (1 << (SelectSQLParser.COMPLETION - 244)) | (1 << (SelectSQLParser.COMPRESSED - 244)) | (1 << (SelectSQLParser.COMPRESSION - 244)) | (1 << (SelectSQLParser.CONCURRENT - 244)) | (1 << (SelectSQLParser.CONNECTION - 244)) | (1 << (SelectSQLParser.CONSISTENT - 244)) | (1 << (SelectSQLParser.CONTAINS - 244)) | (1 << (SelectSQLParser.CONTEXT - 244)) | (1 << (SelectSQLParser.CONTRIBUTORS - 244)) | (1 << (SelectSQLParser.COPY - 244)) | (1 << (SelectSQLParser.CPU - 244)) | (1 << (SelectSQLParser.DATA - 244)) | (1 << (SelectSQLParser.DATAFILE - 244)) | (1 << (SelectSQLParser.DEALLOCATE - 244)) | (1 << (SelectSQLParser.DEFAULT_AUTH - 244)) | (1 << (SelectSQLParser.DEFINER - 244)) | (1 << (SelectSQLParser.DELAY_KEY_WRITE - 244)) | (1 << (SelectSQLParser.DIRECTORY - 244)) | (1 << (SelectSQLParser.DISABLE - 244)) | (1 << (SelectSQLParser.DISCARD - 244)) | (1 << (SelectSQLParser.DISK - 244)) | (1 << (SelectSQLParser.DO - 244)) | (1 << (SelectSQLParser.DUMPFILE - 244)) | (1 << (SelectSQLParser.DUPLICATE - 244)) | (1 << (SelectSQLParser.DYNAMIC - 244)) | (1 << (SelectSQLParser.ENABLE - 244)) | (1 << (SelectSQLParser.ENCRYPTION - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (SelectSQLParser.ENDS - 308)) | (1 << (SelectSQLParser.ENGINE - 308)) | (1 << (SelectSQLParser.ENGINES - 308)) | (1 << (SelectSQLParser.ERROR - 308)) | (1 << (SelectSQLParser.ERRORS - 308)) | (1 << (SelectSQLParser.ESCAPE - 308)) | (1 << (SelectSQLParser.EVEN - 308)) | (1 << (SelectSQLParser.EVENT - 308)) | (1 << (SelectSQLParser.EVENTS - 308)) | (1 << (SelectSQLParser.EVERY - 308)) | (1 << (SelectSQLParser.EXCHANGE - 308)) | (1 << (SelectSQLParser.EXCLUSIVE - 308)) | (1 << (SelectSQLParser.EXPIRE - 308)) | (1 << (SelectSQLParser.EXTENT_SIZE - 308)) | (1 << (SelectSQLParser.FAULTS - 308)) | (1 << (SelectSQLParser.FIELDS - 308)) | (1 << (SelectSQLParser.FILE_BLOCK_SIZE - 308)) | (1 << (SelectSQLParser.FILTER - 308)) | (1 << (SelectSQLParser.FIRST - 308)) | (1 << (SelectSQLParser.FIXED - 308)) | (1 << (SelectSQLParser.FOLLOWS - 308)) | (1 << (SelectSQLParser.FULL - 308)) | (1 << (SelectSQLParser.FUNCTION - 308)) | (1 << (SelectSQLParser.GLOBAL - 308)) | (1 << (SelectSQLParser.GRANTS - 308)) | (1 << (SelectSQLParser.GROUP_REPLICATION - 308)) | (1 << (SelectSQLParser.HASH - 308)) | (1 << (SelectSQLParser.HOST - 308)) | (1 << (SelectSQLParser.IDENTIFIED - 308)) | (1 << (SelectSQLParser.IGNORE_SERVER_IDS - 308)) | (1 << (SelectSQLParser.IMPORT - 308)) | (1 << (SelectSQLParser.INDEXES - 308)) | (1 << (SelectSQLParser.INITIAL_SIZE - 308)) | (1 << (SelectSQLParser.INPLACE - 308)) | (1 << (SelectSQLParser.INSERT_METHOD - 308)) | (1 << (SelectSQLParser.INSTANCE - 308)) | (1 << (SelectSQLParser.INVOKER - 308)) | (1 << (SelectSQLParser.IO - 308)) | (1 << (SelectSQLParser.IO_THREAD - 308)) | (1 << (SelectSQLParser.IPC - 308)) | (1 << (SelectSQLParser.ISOLATION - 308)) | (1 << (SelectSQLParser.ISSUER - 308)) | (1 << (SelectSQLParser.KEY_BLOCK_SIZE - 308)) | (1 << (SelectSQLParser.LANGUAGE - 308)) | (1 << (SelectSQLParser.LAST - 308)) | (1 << (SelectSQLParser.LEAVES - 308)) | (1 << (SelectSQLParser.LESS - 308)) | (1 << (SelectSQLParser.LEVEL - 308)) | (1 << (SelectSQLParser.LIST - 308)) | (1 << (SelectSQLParser.LOCAL - 308)) | (1 << (SelectSQLParser.LOGFILE - 308)) | (1 << (SelectSQLParser.LOGS - 308)) | (1 << (SelectSQLParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (SelectSQLParser.MASTER_AUTO_POSITION - 372)) | (1 << (SelectSQLParser.MASTER_CONNECT_RETRY - 372)) | (1 << (SelectSQLParser.MASTER_DELAY - 372)) | (1 << (SelectSQLParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (SelectSQLParser.MASTER_HOST - 372)) | (1 << (SelectSQLParser.MASTER_LOG_FILE - 372)) | (1 << (SelectSQLParser.MASTER_LOG_POS - 372)) | (1 << (SelectSQLParser.MASTER_PASSWORD - 372)) | (1 << (SelectSQLParser.MASTER_PORT - 372)) | (1 << (SelectSQLParser.MASTER_RETRY_COUNT - 372)) | (1 << (SelectSQLParser.MASTER_SSL - 372)) | (1 << (SelectSQLParser.MASTER_SSL_CA - 372)) | (1 << (SelectSQLParser.MASTER_SSL_CAPATH - 372)) | (1 << (SelectSQLParser.MASTER_SSL_CERT - 372)) | (1 << (SelectSQLParser.MASTER_SSL_CIPHER - 372)) | (1 << (SelectSQLParser.MASTER_SSL_CRL - 372)) | (1 << (SelectSQLParser.MASTER_SSL_CRLPATH - 372)) | (1 << (SelectSQLParser.MASTER_SSL_KEY - 372)) | (1 << (SelectSQLParser.MASTER_TLS_VERSION - 372)) | (1 << (SelectSQLParser.MASTER_USER - 372)) | (1 << (SelectSQLParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (SelectSQLParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (SelectSQLParser.MAX_ROWS - 372)) | (1 << (SelectSQLParser.MAX_SIZE - 372)) | (1 << (SelectSQLParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (SelectSQLParser.MAX_USER_CONNECTIONS - 372)) | (1 << (SelectSQLParser.MERGE - 372)) | (1 << (SelectSQLParser.MID - 372)) | (1 << (SelectSQLParser.MIGRATE - 372)) | (1 << (SelectSQLParser.MIN_ROWS - 372)) | (1 << (SelectSQLParser.MODIFY - 372)) | (1 << (SelectSQLParser.MUTEX - 372)) | (1 << (SelectSQLParser.MYSQL - 372)) | (1 << (SelectSQLParser.NAME - 372)) | (1 << (SelectSQLParser.NAMES - 372)) | (1 << (SelectSQLParser.NCHAR - 372)) | (1 << (SelectSQLParser.NEVER - 372)) | (1 << (SelectSQLParser.NO - 372)) | (1 << (SelectSQLParser.NODEGROUP - 372)) | (1 << (SelectSQLParser.NONE - 372)) | (1 << (SelectSQLParser.OFFLINE - 372)) | (1 << (SelectSQLParser.OFFSET - 372)) | (1 << (SelectSQLParser.OJ - 372)) | (1 << (SelectSQLParser.OLD_PASSWORD - 372)) | (1 << (SelectSQLParser.ONE - 372)) | (1 << (SelectSQLParser.ONLINE - 372)) | (1 << (SelectSQLParser.ONLY - 372)) | (1 << (SelectSQLParser.OPTIMIZER_COSTS - 372)) | (1 << (SelectSQLParser.OPTIONS - 372)) | (1 << (SelectSQLParser.OWNER - 372)) | (1 << (SelectSQLParser.PACK_KEYS - 372)) | (1 << (SelectSQLParser.PAGE - 372)) | (1 << (SelectSQLParser.PARSER - 372)) | (1 << (SelectSQLParser.PARTIAL - 372)) | (1 << (SelectSQLParser.PARTITIONING - 372)) | (1 << (SelectSQLParser.PARTITIONS - 372)) | (1 << (SelectSQLParser.PASSWORD - 372)) | (1 << (SelectSQLParser.PHASE - 372)) | (1 << (SelectSQLParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (SelectSQLParser.PLUGINS - 436)) | (1 << (SelectSQLParser.PORT - 436)) | (1 << (SelectSQLParser.PRECEDES - 436)) | (1 << (SelectSQLParser.PREPARE - 436)) | (1 << (SelectSQLParser.PRESERVE - 436)) | (1 << (SelectSQLParser.PREV - 436)) | (1 << (SelectSQLParser.PROCESSLIST - 436)) | (1 << (SelectSQLParser.PROFILE - 436)) | (1 << (SelectSQLParser.PROFILES - 436)) | (1 << (SelectSQLParser.PROXY - 436)) | (1 << (SelectSQLParser.QUERY - 436)) | (1 << (SelectSQLParser.QUICK - 436)) | (1 << (SelectSQLParser.REBUILD - 436)) | (1 << (SelectSQLParser.RECOVER - 436)) | (1 << (SelectSQLParser.REDO_BUFFER_SIZE - 436)) | (1 << (SelectSQLParser.REDUNDANT - 436)) | (1 << (SelectSQLParser.RELAY_LOG_FILE - 436)) | (1 << (SelectSQLParser.RELAY_LOG_POS - 436)) | (1 << (SelectSQLParser.RELAYLOG - 436)) | (1 << (SelectSQLParser.REMOVE - 436)) | (1 << (SelectSQLParser.REORGANIZE - 436)) | (1 << (SelectSQLParser.REPAIR - 436)) | (1 << (SelectSQLParser.REPLICATE_DO_DB - 436)) | (1 << (SelectSQLParser.REPLICATE_DO_TABLE - 436)) | (1 << (SelectSQLParser.REPLICATE_IGNORE_DB - 436)) | (1 << (SelectSQLParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (SelectSQLParser.REPLICATE_REWRITE_DB - 436)) | (1 << (SelectSQLParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (SelectSQLParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (SelectSQLParser.REPLICATION - 436)) | (1 << (SelectSQLParser.RESUME - 436)) | (1 << (SelectSQLParser.RETURNS - 436)) | (1 << (SelectSQLParser.ROLLBACK - 436)) | (1 << (SelectSQLParser.ROLLUP - 436)) | (1 << (SelectSQLParser.ROTATE - 436)) | (1 << (SelectSQLParser.ROW - 436)) | (1 << (SelectSQLParser.ROWS - 436)) | (1 << (SelectSQLParser.ROW_FORMAT - 436)) | (1 << (SelectSQLParser.SAVEPOINT - 436)) | (1 << (SelectSQLParser.SCHEDULE - 436)) | (1 << (SelectSQLParser.SECURITY - 436)) | (1 << (SelectSQLParser.SERVER - 436)) | (1 << (SelectSQLParser.SESSION - 436)) | (1 << (SelectSQLParser.SHARE - 436)) | (1 << (SelectSQLParser.SHARED - 436)) | (1 << (SelectSQLParser.SIGNED - 436)) | (1 << (SelectSQLParser.SIMPLE - 436)) | (1 << (SelectSQLParser.SLAVE - 436)) | (1 << (SelectSQLParser.SNAPSHOT - 436)) | (1 << (SelectSQLParser.SOCKET - 436)) | (1 << (SelectSQLParser.SOME - 436)) | (1 << (SelectSQLParser.SOUNDS - 436)) | (1 << (SelectSQLParser.SOURCE - 436)) | (1 << (SelectSQLParser.SQL_AFTER_GTIDS - 436)) | (1 << (SelectSQLParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (SelectSQLParser.SQL_BEFORE_GTIDS - 436)) | (1 << (SelectSQLParser.SQL_BUFFER_RESULT - 436)) | (1 << (SelectSQLParser.SQL_CACHE - 436)) | (1 << (SelectSQLParser.SQL_NO_CACHE - 436)) | (1 << (SelectSQLParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (SelectSQLParser.START - 500)) | (1 << (SelectSQLParser.STARTS - 500)) | (1 << (SelectSQLParser.STATS_AUTO_RECALC - 500)) | (1 << (SelectSQLParser.STATS_PERSISTENT - 500)) | (1 << (SelectSQLParser.STATS_SAMPLE_PAGES - 500)) | (1 << (SelectSQLParser.STATUS - 500)) | (1 << (SelectSQLParser.STOP - 500)) | (1 << (SelectSQLParser.STORAGE - 500)) | (1 << (SelectSQLParser.STRING - 500)) | (1 << (SelectSQLParser.SUBJECT - 500)) | (1 << (SelectSQLParser.SUBPARTITION - 500)) | (1 << (SelectSQLParser.SUBPARTITIONS - 500)) | (1 << (SelectSQLParser.SUSPEND - 500)) | (1 << (SelectSQLParser.SWAPS - 500)) | (1 << (SelectSQLParser.SWITCHES - 500)) | (1 << (SelectSQLParser.TABLESPACE - 500)) | (1 << (SelectSQLParser.TEMPORARY - 500)) | (1 << (SelectSQLParser.TEMPTABLE - 500)) | (1 << (SelectSQLParser.THAN - 500)) | (1 << (SelectSQLParser.TRANSACTION - 500)) | (1 << (SelectSQLParser.TRUNCATE - 500)) | (1 << (SelectSQLParser.UNDEFINED - 500)) | (1 << (SelectSQLParser.UNDOFILE - 500)) | (1 << (SelectSQLParser.UNDO_BUFFER_SIZE - 500)) | (1 << (SelectSQLParser.UNKNOWN - 500)) | (1 << (SelectSQLParser.UPGRADE - 500)) | (1 << (SelectSQLParser.USER - 500)) | (1 << (SelectSQLParser.VALIDATION - 500)) | (1 << (SelectSQLParser.VALUE - 500)) | (1 << (SelectSQLParser.VARIABLES - 500)) | (1 << (SelectSQLParser.VIEW - 500)) | (1 << (SelectSQLParser.WAIT - 500)) | (1 << (SelectSQLParser.WARNINGS - 500)) | (1 << (SelectSQLParser.WITHOUT - 500)) | (1 << (SelectSQLParser.WORK - 500)) | (1 << (SelectSQLParser.WRAPPER - 500)) | (1 << (SelectSQLParser.X509 - 500)) | (1 << (SelectSQLParser.XA - 500)) | (1 << (SelectSQLParser.XML - 500)))) != 0) or _la==SelectSQLParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(SelectSQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(SelectSQLParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(SelectSQLParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(SelectSQLParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(SelectSQLParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(SelectSQLParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(SelectSQLParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(SelectSQLParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(SelectSQLParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(SelectSQLParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(SelectSQLParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(SelectSQLParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(SelectSQLParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(SelectSQLParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(SelectSQLParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(SelectSQLParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(SelectSQLParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(SelectSQLParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(SelectSQLParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(SelectSQLParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(SelectSQLParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(SelectSQLParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(SelectSQLParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(SelectSQLParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(SelectSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(SelectSQLParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(SelectSQLParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(SelectSQLParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(SelectSQLParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(SelectSQLParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(SelectSQLParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(SelectSQLParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(SelectSQLParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(SelectSQLParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(SelectSQLParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(SelectSQLParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(SelectSQLParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(SelectSQLParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(SelectSQLParser.COS, 0)

        def COT(self):
            return self.getToken(SelectSQLParser.COT, 0)

        def COUNT(self):
            return self.getToken(SelectSQLParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(SelectSQLParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(SelectSQLParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(SelectSQLParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(SelectSQLParser.CROSSES, 0)

        def DATE(self):
            return self.getToken(SelectSQLParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(SelectSQLParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(SelectSQLParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(SelectSQLParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(SelectSQLParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(SelectSQLParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(SelectSQLParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(SelectSQLParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(SelectSQLParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(SelectSQLParser.DEGREES, 0)

        def DES_DECRYPT(self):
            return self.getToken(SelectSQLParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(SelectSQLParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(SelectSQLParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(SelectSQLParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(SelectSQLParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(SelectSQLParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(SelectSQLParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(SelectSQLParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(SelectSQLParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(SelectSQLParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(SelectSQLParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(SelectSQLParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(SelectSQLParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(SelectSQLParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(SelectSQLParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(SelectSQLParser.FIND_IN_SET, 0)

        def FLOOR(self):
            return self.getToken(SelectSQLParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(SelectSQLParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(SelectSQLParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(SelectSQLParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(SelectSQLParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(SelectSQLParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(SelectSQLParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(SelectSQLParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(SelectSQLParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(SelectSQLParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(SelectSQLParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(SelectSQLParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(SelectSQLParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(SelectSQLParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(SelectSQLParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(SelectSQLParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(SelectSQLParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(SelectSQLParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(SelectSQLParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(SelectSQLParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(SelectSQLParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(SelectSQLParser.HEX, 0)

        def HOUR(self):
            return self.getToken(SelectSQLParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(SelectSQLParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(SelectSQLParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(SelectSQLParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(SelectSQLParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(SelectSQLParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(SelectSQLParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(SelectSQLParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(SelectSQLParser.INTERSECTS, 0)

        def ISCLOSED(self):
            return self.getToken(SelectSQLParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(SelectSQLParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(SelectSQLParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(SelectSQLParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(SelectSQLParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(SelectSQLParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(SelectSQLParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(SelectSQLParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(SelectSQLParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(SelectSQLParser.IS_USED_LOCK, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(SelectSQLParser.LAST_INSERT_ID, 0)

        def LCASE(self):
            return self.getToken(SelectSQLParser.LCASE, 0)

        def LEAST(self):
            return self.getToken(SelectSQLParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(SelectSQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(SelectSQLParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(SelectSQLParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(SelectSQLParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(SelectSQLParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(SelectSQLParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(SelectSQLParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(SelectSQLParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(SelectSQLParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(SelectSQLParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(SelectSQLParser.LOG, 0)

        def LOG10(self):
            return self.getToken(SelectSQLParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(SelectSQLParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(SelectSQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(SelectSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(SelectSQLParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(SelectSQLParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(SelectSQLParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(SelectSQLParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(SelectSQLParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(SelectSQLParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(SelectSQLParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(SelectSQLParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(SelectSQLParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(SelectSQLParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(SelectSQLParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(SelectSQLParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(SelectSQLParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(SelectSQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(SelectSQLParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(SelectSQLParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(SelectSQLParser.MLINEFROMWKB, 0)

        def MONTH(self):
            return self.getToken(SelectSQLParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(SelectSQLParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(SelectSQLParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(SelectSQLParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(SelectSQLParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(SelectSQLParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(SelectSQLParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(SelectSQLParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(SelectSQLParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(SelectSQLParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(SelectSQLParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(SelectSQLParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(SelectSQLParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(SelectSQLParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(SelectSQLParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(SelectSQLParser.NAME_CONST, 0)

        def NULLIF(self):
            return self.getToken(SelectSQLParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(SelectSQLParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(SelectSQLParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(SelectSQLParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(SelectSQLParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(SelectSQLParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(SelectSQLParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(SelectSQLParser.OVERLAPS, 0)

        def PERIOD_ADD(self):
            return self.getToken(SelectSQLParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(SelectSQLParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(SelectSQLParser.PI, 0)

        def POINT(self):
            return self.getToken(SelectSQLParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(SelectSQLParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(SelectSQLParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(SelectSQLParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(SelectSQLParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(SelectSQLParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(SelectSQLParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(SelectSQLParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(SelectSQLParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(SelectSQLParser.POSITION, 0)

        def POW(self):
            return self.getToken(SelectSQLParser.POW, 0)

        def POWER(self):
            return self.getToken(SelectSQLParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(SelectSQLParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(SelectSQLParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(SelectSQLParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(SelectSQLParser.RAND, 0)

        def RANDOM_BYTES(self):
            return self.getToken(SelectSQLParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(SelectSQLParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(SelectSQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(SelectSQLParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(SelectSQLParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(SelectSQLParser.ROW_COUNT, 0)

        def RPAD(self):
            return self.getToken(SelectSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(SelectSQLParser.RTRIM, 0)

        def SECOND(self):
            return self.getToken(SelectSQLParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(SelectSQLParser.SEC_TO_TIME, 0)

        def SESSION_USER(self):
            return self.getToken(SelectSQLParser.SESSION_USER, 0)

        def SHA(self):
            return self.getToken(SelectSQLParser.SHA, 0)

        def SHA1(self):
            return self.getToken(SelectSQLParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(SelectSQLParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(SelectSQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(SelectSQLParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(SelectSQLParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(SelectSQLParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(SelectSQLParser.SQRT, 0)

        def SRID(self):
            return self.getToken(SelectSQLParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(SelectSQLParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(SelectSQLParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(SelectSQLParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(SelectSQLParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(SelectSQLParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(SelectSQLParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(SelectSQLParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(SelectSQLParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(SelectSQLParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(SelectSQLParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(SelectSQLParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(SelectSQLParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(SelectSQLParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(SelectSQLParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(SelectSQLParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(SelectSQLParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(SelectSQLParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(SelectSQLParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(SelectSQLParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(SelectSQLParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(SelectSQLParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(SelectSQLParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(SelectSQLParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(SelectSQLParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(SelectSQLParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(SelectSQLParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(SelectSQLParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(SelectSQLParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(SelectSQLParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(SelectSQLParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(SelectSQLParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(SelectSQLParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(SelectSQLParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(SelectSQLParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(SelectSQLParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(SelectSQLParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(SelectSQLParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(SelectSQLParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(SelectSQLParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(SelectSQLParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(SelectSQLParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(SelectSQLParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(SelectSQLParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(SelectSQLParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(SelectSQLParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(SelectSQLParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(SelectSQLParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(SelectSQLParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(SelectSQLParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(SelectSQLParser.TAN, 0)

        def TIME(self):
            return self.getToken(SelectSQLParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(SelectSQLParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(SelectSQLParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SelectSQLParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SelectSQLParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(SelectSQLParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(SelectSQLParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(SelectSQLParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(SelectSQLParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(SelectSQLParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(SelectSQLParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(SelectSQLParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(SelectSQLParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(SelectSQLParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(SelectSQLParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(SelectSQLParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(SelectSQLParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(SelectSQLParser.UPPER, 0)

        def UUID(self):
            return self.getToken(SelectSQLParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(SelectSQLParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(SelectSQLParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(SelectSQLParser.VERSION, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(SelectSQLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(SelectSQLParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(SelectSQLParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(SelectSQLParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(SelectSQLParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(SelectSQLParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(SelectSQLParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(SelectSQLParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(SelectSQLParser.X_FUNCTION, 0)

        def getRuleIndex(self):
            return SelectSQLParser.RULE_functionNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionNameBase" ):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionNameBase" ):
                listener.exitFunctionNameBase(self)




    def functionNameBase(self):

        localctx = SelectSQLParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            _la = self._input.LA(1)
            if not(_la==SelectSQLParser.LEFT or _la==SelectSQLParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (SelectSQLParser.DATE - 180)) | (1 << (SelectSQLParser.TIME - 180)) | (1 << (SelectSQLParser.TIMESTAMP - 180)) | (1 << (SelectSQLParser.YEAR - 180)) | (1 << (SelectSQLParser.COUNT - 180)) | (1 << (SelectSQLParser.POSITION - 180)))) != 0) or ((((_la - 550)) & ~0x3f) == 0 and ((1 << (_la - 550)) & ((1 << (SelectSQLParser.QUARTER - 550)) | (1 << (SelectSQLParser.MONTH - 550)) | (1 << (SelectSQLParser.DAY - 550)) | (1 << (SelectSQLParser.HOUR - 550)) | (1 << (SelectSQLParser.MINUTE - 550)) | (1 << (SelectSQLParser.WEEK - 550)) | (1 << (SelectSQLParser.SECOND - 550)) | (1 << (SelectSQLParser.MICROSECOND - 550)))) != 0) or ((((_la - 622)) & ~0x3f) == 0 and ((1 << (_la - 622)) & ((1 << (SelectSQLParser.GEOMETRYCOLLECTION - 622)) | (1 << (SelectSQLParser.LINESTRING - 622)) | (1 << (SelectSQLParser.MULTILINESTRING - 622)) | (1 << (SelectSQLParser.MULTIPOINT - 622)) | (1 << (SelectSQLParser.MULTIPOLYGON - 622)) | (1 << (SelectSQLParser.POINT - 622)) | (1 << (SelectSQLParser.POLYGON - 622)) | (1 << (SelectSQLParser.ABS - 622)) | (1 << (SelectSQLParser.ACOS - 622)) | (1 << (SelectSQLParser.ADDDATE - 622)) | (1 << (SelectSQLParser.ADDTIME - 622)) | (1 << (SelectSQLParser.AES_DECRYPT - 622)) | (1 << (SelectSQLParser.AES_ENCRYPT - 622)) | (1 << (SelectSQLParser.AREA - 622)) | (1 << (SelectSQLParser.ASBINARY - 622)) | (1 << (SelectSQLParser.ASIN - 622)) | (1 << (SelectSQLParser.ASTEXT - 622)) | (1 << (SelectSQLParser.ASWKB - 622)) | (1 << (SelectSQLParser.ASWKT - 622)) | (1 << (SelectSQLParser.ASYMMETRIC_DECRYPT - 622)) | (1 << (SelectSQLParser.ASYMMETRIC_DERIVE - 622)) | (1 << (SelectSQLParser.ASYMMETRIC_ENCRYPT - 622)) | (1 << (SelectSQLParser.ASYMMETRIC_SIGN - 622)) | (1 << (SelectSQLParser.ASYMMETRIC_VERIFY - 622)) | (1 << (SelectSQLParser.ATAN - 622)) | (1 << (SelectSQLParser.ATAN2 - 622)) | (1 << (SelectSQLParser.BENCHMARK - 622)) | (1 << (SelectSQLParser.BIN - 622)) | (1 << (SelectSQLParser.BIT_COUNT - 622)) | (1 << (SelectSQLParser.BIT_LENGTH - 622)) | (1 << (SelectSQLParser.BUFFER - 622)) | (1 << (SelectSQLParser.CEIL - 622)) | (1 << (SelectSQLParser.CEILING - 622)) | (1 << (SelectSQLParser.CENTROID - 622)) | (1 << (SelectSQLParser.CHARACTER_LENGTH - 622)) | (1 << (SelectSQLParser.CHARSET - 622)) | (1 << (SelectSQLParser.CHAR_LENGTH - 622)) | (1 << (SelectSQLParser.COERCIBILITY - 622)) | (1 << (SelectSQLParser.COLLATION - 622)) | (1 << (SelectSQLParser.COMPRESS - 622)) | (1 << (SelectSQLParser.CONCAT - 622)) | (1 << (SelectSQLParser.CONCAT_WS - 622)) | (1 << (SelectSQLParser.CONNECTION_ID - 622)) | (1 << (SelectSQLParser.CONV - 622)) | (1 << (SelectSQLParser.CONVERT_TZ - 622)) | (1 << (SelectSQLParser.COS - 622)) | (1 << (SelectSQLParser.COT - 622)) | (1 << (SelectSQLParser.CRC32 - 622)) | (1 << (SelectSQLParser.CREATE_ASYMMETRIC_PRIV_KEY - 622)) | (1 << (SelectSQLParser.CREATE_ASYMMETRIC_PUB_KEY - 622)) | (1 << (SelectSQLParser.CREATE_DH_PARAMETERS - 622)) | (1 << (SelectSQLParser.CREATE_DIGEST - 622)) | (1 << (SelectSQLParser.CROSSES - 622)) | (1 << (SelectSQLParser.DATEDIFF - 622)) | (1 << (SelectSQLParser.DATE_FORMAT - 622)) | (1 << (SelectSQLParser.DAYNAME - 622)) | (1 << (SelectSQLParser.DAYOFMONTH - 622)) | (1 << (SelectSQLParser.DAYOFWEEK - 622)) | (1 << (SelectSQLParser.DAYOFYEAR - 622)) | (1 << (SelectSQLParser.DECODE - 622)) | (1 << (SelectSQLParser.DEGREES - 622)) | (1 << (SelectSQLParser.DES_DECRYPT - 622)) | (1 << (SelectSQLParser.DES_ENCRYPT - 622)) | (1 << (SelectSQLParser.DIMENSION - 622)))) != 0) or ((((_la - 686)) & ~0x3f) == 0 and ((1 << (_la - 686)) & ((1 << (SelectSQLParser.DISJOINT - 686)) | (1 << (SelectSQLParser.ELT - 686)) | (1 << (SelectSQLParser.ENCODE - 686)) | (1 << (SelectSQLParser.ENCRYPT - 686)) | (1 << (SelectSQLParser.ENDPOINT - 686)) | (1 << (SelectSQLParser.ENVELOPE - 686)) | (1 << (SelectSQLParser.EQUALS - 686)) | (1 << (SelectSQLParser.EXP - 686)) | (1 << (SelectSQLParser.EXPORT_SET - 686)) | (1 << (SelectSQLParser.EXTERIORRING - 686)) | (1 << (SelectSQLParser.EXTRACTVALUE - 686)) | (1 << (SelectSQLParser.FIELD - 686)) | (1 << (SelectSQLParser.FIND_IN_SET - 686)) | (1 << (SelectSQLParser.FLOOR - 686)) | (1 << (SelectSQLParser.FORMAT - 686)) | (1 << (SelectSQLParser.FOUND_ROWS - 686)) | (1 << (SelectSQLParser.FROM_BASE64 - 686)) | (1 << (SelectSQLParser.FROM_DAYS - 686)) | (1 << (SelectSQLParser.FROM_UNIXTIME - 686)) | (1 << (SelectSQLParser.GEOMCOLLFROMTEXT - 686)) | (1 << (SelectSQLParser.GEOMCOLLFROMWKB - 686)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTIONFROMTEXT - 686)) | (1 << (SelectSQLParser.GEOMETRYCOLLECTIONFROMWKB - 686)) | (1 << (SelectSQLParser.GEOMETRYFROMTEXT - 686)) | (1 << (SelectSQLParser.GEOMETRYFROMWKB - 686)) | (1 << (SelectSQLParser.GEOMETRYN - 686)) | (1 << (SelectSQLParser.GEOMETRYTYPE - 686)) | (1 << (SelectSQLParser.GEOMFROMTEXT - 686)) | (1 << (SelectSQLParser.GEOMFROMWKB - 686)) | (1 << (SelectSQLParser.GET_FORMAT - 686)) | (1 << (SelectSQLParser.GET_LOCK - 686)) | (1 << (SelectSQLParser.GLENGTH - 686)) | (1 << (SelectSQLParser.GREATEST - 686)) | (1 << (SelectSQLParser.GTID_SUBSET - 686)) | (1 << (SelectSQLParser.GTID_SUBTRACT - 686)) | (1 << (SelectSQLParser.HEX - 686)) | (1 << (SelectSQLParser.IFNULL - 686)) | (1 << (SelectSQLParser.INET6_ATON - 686)) | (1 << (SelectSQLParser.INET6_NTOA - 686)) | (1 << (SelectSQLParser.INET_ATON - 686)) | (1 << (SelectSQLParser.INET_NTOA - 686)) | (1 << (SelectSQLParser.INSTR - 686)) | (1 << (SelectSQLParser.INTERIORRINGN - 686)) | (1 << (SelectSQLParser.INTERSECTS - 686)) | (1 << (SelectSQLParser.ISCLOSED - 686)) | (1 << (SelectSQLParser.ISEMPTY - 686)) | (1 << (SelectSQLParser.ISNULL - 686)) | (1 << (SelectSQLParser.ISSIMPLE - 686)) | (1 << (SelectSQLParser.IS_FREE_LOCK - 686)) | (1 << (SelectSQLParser.IS_IPV4 - 686)) | (1 << (SelectSQLParser.IS_IPV4_COMPAT - 686)) | (1 << (SelectSQLParser.IS_IPV4_MAPPED - 686)) | (1 << (SelectSQLParser.IS_IPV6 - 686)) | (1 << (SelectSQLParser.IS_USED_LOCK - 686)) | (1 << (SelectSQLParser.LAST_INSERT_ID - 686)) | (1 << (SelectSQLParser.LCASE - 686)) | (1 << (SelectSQLParser.LEAST - 686)) | (1 << (SelectSQLParser.LENGTH - 686)) | (1 << (SelectSQLParser.LINEFROMTEXT - 686)) | (1 << (SelectSQLParser.LINEFROMWKB - 686)) | (1 << (SelectSQLParser.LINESTRINGFROMTEXT - 686)) | (1 << (SelectSQLParser.LINESTRINGFROMWKB - 686)) | (1 << (SelectSQLParser.LN - 686)) | (1 << (SelectSQLParser.LOAD_FILE - 686)))) != 0) or ((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & ((1 << (SelectSQLParser.LOCATE - 750)) | (1 << (SelectSQLParser.LOG - 750)) | (1 << (SelectSQLParser.LOG10 - 750)) | (1 << (SelectSQLParser.LOG2 - 750)) | (1 << (SelectSQLParser.LOWER - 750)) | (1 << (SelectSQLParser.LPAD - 750)) | (1 << (SelectSQLParser.LTRIM - 750)) | (1 << (SelectSQLParser.MAKEDATE - 750)) | (1 << (SelectSQLParser.MAKETIME - 750)) | (1 << (SelectSQLParser.MAKE_SET - 750)) | (1 << (SelectSQLParser.MASTER_POS_WAIT - 750)) | (1 << (SelectSQLParser.MBRCONTAINS - 750)) | (1 << (SelectSQLParser.MBRDISJOINT - 750)) | (1 << (SelectSQLParser.MBREQUAL - 750)) | (1 << (SelectSQLParser.MBRINTERSECTS - 750)) | (1 << (SelectSQLParser.MBROVERLAPS - 750)) | (1 << (SelectSQLParser.MBRTOUCHES - 750)) | (1 << (SelectSQLParser.MBRWITHIN - 750)) | (1 << (SelectSQLParser.MD5 - 750)) | (1 << (SelectSQLParser.MLINEFROMTEXT - 750)) | (1 << (SelectSQLParser.MLINEFROMWKB - 750)) | (1 << (SelectSQLParser.MONTHNAME - 750)) | (1 << (SelectSQLParser.MPOINTFROMTEXT - 750)) | (1 << (SelectSQLParser.MPOINTFROMWKB - 750)) | (1 << (SelectSQLParser.MPOLYFROMTEXT - 750)) | (1 << (SelectSQLParser.MPOLYFROMWKB - 750)) | (1 << (SelectSQLParser.MULTILINESTRINGFROMTEXT - 750)) | (1 << (SelectSQLParser.MULTILINESTRINGFROMWKB - 750)) | (1 << (SelectSQLParser.MULTIPOINTFROMTEXT - 750)) | (1 << (SelectSQLParser.MULTIPOINTFROMWKB - 750)) | (1 << (SelectSQLParser.MULTIPOLYGONFROMTEXT - 750)) | (1 << (SelectSQLParser.MULTIPOLYGONFROMWKB - 750)) | (1 << (SelectSQLParser.NAME_CONST - 750)) | (1 << (SelectSQLParser.NULLIF - 750)) | (1 << (SelectSQLParser.NUMGEOMETRIES - 750)) | (1 << (SelectSQLParser.NUMINTERIORRINGS - 750)) | (1 << (SelectSQLParser.NUMPOINTS - 750)) | (1 << (SelectSQLParser.OCT - 750)) | (1 << (SelectSQLParser.OCTET_LENGTH - 750)) | (1 << (SelectSQLParser.ORD - 750)) | (1 << (SelectSQLParser.OVERLAPS - 750)) | (1 << (SelectSQLParser.PERIOD_ADD - 750)) | (1 << (SelectSQLParser.PERIOD_DIFF - 750)) | (1 << (SelectSQLParser.PI - 750)) | (1 << (SelectSQLParser.POINTFROMTEXT - 750)) | (1 << (SelectSQLParser.POINTFROMWKB - 750)) | (1 << (SelectSQLParser.POINTN - 750)) | (1 << (SelectSQLParser.POLYFROMTEXT - 750)) | (1 << (SelectSQLParser.POLYFROMWKB - 750)) | (1 << (SelectSQLParser.POLYGONFROMTEXT - 750)) | (1 << (SelectSQLParser.POLYGONFROMWKB - 750)) | (1 << (SelectSQLParser.POW - 750)) | (1 << (SelectSQLParser.POWER - 750)) | (1 << (SelectSQLParser.QUOTE - 750)) | (1 << (SelectSQLParser.RADIANS - 750)) | (1 << (SelectSQLParser.RAND - 750)) | (1 << (SelectSQLParser.RANDOM_BYTES - 750)) | (1 << (SelectSQLParser.RELEASE_LOCK - 750)) | (1 << (SelectSQLParser.REVERSE - 750)) | (1 << (SelectSQLParser.ROUND - 750)) | (1 << (SelectSQLParser.ROW_COUNT - 750)) | (1 << (SelectSQLParser.RPAD - 750)) | (1 << (SelectSQLParser.RTRIM - 750)) | (1 << (SelectSQLParser.SEC_TO_TIME - 750)))) != 0) or ((((_la - 814)) & ~0x3f) == 0 and ((1 << (_la - 814)) & ((1 << (SelectSQLParser.SESSION_USER - 814)) | (1 << (SelectSQLParser.SHA - 814)) | (1 << (SelectSQLParser.SHA1 - 814)) | (1 << (SelectSQLParser.SHA2 - 814)) | (1 << (SelectSQLParser.SIGN - 814)) | (1 << (SelectSQLParser.SIN - 814)) | (1 << (SelectSQLParser.SLEEP - 814)) | (1 << (SelectSQLParser.SOUNDEX - 814)) | (1 << (SelectSQLParser.SQL_THREAD_WAIT_AFTER_GTIDS - 814)) | (1 << (SelectSQLParser.SQRT - 814)) | (1 << (SelectSQLParser.SRID - 814)) | (1 << (SelectSQLParser.STARTPOINT - 814)) | (1 << (SelectSQLParser.STRCMP - 814)) | (1 << (SelectSQLParser.STR_TO_DATE - 814)) | (1 << (SelectSQLParser.ST_AREA - 814)) | (1 << (SelectSQLParser.ST_ASBINARY - 814)) | (1 << (SelectSQLParser.ST_ASTEXT - 814)) | (1 << (SelectSQLParser.ST_ASWKB - 814)) | (1 << (SelectSQLParser.ST_ASWKT - 814)) | (1 << (SelectSQLParser.ST_BUFFER - 814)) | (1 << (SelectSQLParser.ST_CENTROID - 814)) | (1 << (SelectSQLParser.ST_CONTAINS - 814)) | (1 << (SelectSQLParser.ST_CROSSES - 814)) | (1 << (SelectSQLParser.ST_DIFFERENCE - 814)) | (1 << (SelectSQLParser.ST_DIMENSION - 814)) | (1 << (SelectSQLParser.ST_DISJOINT - 814)) | (1 << (SelectSQLParser.ST_DISTANCE - 814)) | (1 << (SelectSQLParser.ST_ENDPOINT - 814)) | (1 << (SelectSQLParser.ST_ENVELOPE - 814)) | (1 << (SelectSQLParser.ST_EQUALS - 814)) | (1 << (SelectSQLParser.ST_EXTERIORRING - 814)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMTXT - 814)) | (1 << (SelectSQLParser.ST_GEOMCOLLFROMWKB - 814)) | (1 << (SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_GEOMETRYCOLLECTIONFROMWKB - 814)) | (1 << (SelectSQLParser.ST_GEOMETRYFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_GEOMETRYFROMWKB - 814)) | (1 << (SelectSQLParser.ST_GEOMETRYN - 814)) | (1 << (SelectSQLParser.ST_GEOMETRYTYPE - 814)) | (1 << (SelectSQLParser.ST_GEOMFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_GEOMFROMWKB - 814)) | (1 << (SelectSQLParser.ST_INTERIORRINGN - 814)) | (1 << (SelectSQLParser.ST_INTERSECTION - 814)) | (1 << (SelectSQLParser.ST_INTERSECTS - 814)) | (1 << (SelectSQLParser.ST_ISCLOSED - 814)) | (1 << (SelectSQLParser.ST_ISEMPTY - 814)) | (1 << (SelectSQLParser.ST_ISSIMPLE - 814)) | (1 << (SelectSQLParser.ST_LINEFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_LINEFROMWKB - 814)) | (1 << (SelectSQLParser.ST_LINESTRINGFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_LINESTRINGFROMWKB - 814)) | (1 << (SelectSQLParser.ST_NUMGEOMETRIES - 814)) | (1 << (SelectSQLParser.ST_NUMINTERIORRING - 814)) | (1 << (SelectSQLParser.ST_NUMINTERIORRINGS - 814)) | (1 << (SelectSQLParser.ST_NUMPOINTS - 814)) | (1 << (SelectSQLParser.ST_OVERLAPS - 814)) | (1 << (SelectSQLParser.ST_POINTFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_POINTFROMWKB - 814)) | (1 << (SelectSQLParser.ST_POINTN - 814)) | (1 << (SelectSQLParser.ST_POLYFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_POLYFROMWKB - 814)) | (1 << (SelectSQLParser.ST_POLYGONFROMTEXT - 814)) | (1 << (SelectSQLParser.ST_POLYGONFROMWKB - 814)))) != 0) or ((((_la - 878)) & ~0x3f) == 0 and ((1 << (_la - 878)) & ((1 << (SelectSQLParser.ST_SRID - 878)) | (1 << (SelectSQLParser.ST_STARTPOINT - 878)) | (1 << (SelectSQLParser.ST_SYMDIFFERENCE - 878)) | (1 << (SelectSQLParser.ST_TOUCHES - 878)) | (1 << (SelectSQLParser.ST_UNION - 878)) | (1 << (SelectSQLParser.ST_WITHIN - 878)) | (1 << (SelectSQLParser.ST_X - 878)) | (1 << (SelectSQLParser.ST_Y - 878)) | (1 << (SelectSQLParser.SUBDATE - 878)) | (1 << (SelectSQLParser.SUBSTRING_INDEX - 878)) | (1 << (SelectSQLParser.SUBTIME - 878)) | (1 << (SelectSQLParser.SYSTEM_USER - 878)) | (1 << (SelectSQLParser.TAN - 878)) | (1 << (SelectSQLParser.TIMEDIFF - 878)) | (1 << (SelectSQLParser.TIMESTAMPADD - 878)) | (1 << (SelectSQLParser.TIMESTAMPDIFF - 878)) | (1 << (SelectSQLParser.TIME_FORMAT - 878)) | (1 << (SelectSQLParser.TIME_TO_SEC - 878)) | (1 << (SelectSQLParser.TOUCHES - 878)) | (1 << (SelectSQLParser.TO_BASE64 - 878)) | (1 << (SelectSQLParser.TO_DAYS - 878)) | (1 << (SelectSQLParser.TO_SECONDS - 878)) | (1 << (SelectSQLParser.UCASE - 878)) | (1 << (SelectSQLParser.UNCOMPRESS - 878)) | (1 << (SelectSQLParser.UNCOMPRESSED_LENGTH - 878)) | (1 << (SelectSQLParser.UNHEX - 878)) | (1 << (SelectSQLParser.UNIX_TIMESTAMP - 878)) | (1 << (SelectSQLParser.UPDATEXML - 878)) | (1 << (SelectSQLParser.UPPER - 878)) | (1 << (SelectSQLParser.UUID - 878)) | (1 << (SelectSQLParser.UUID_SHORT - 878)) | (1 << (SelectSQLParser.VALIDATE_PASSWORD_STRENGTH - 878)) | (1 << (SelectSQLParser.VERSION - 878)) | (1 << (SelectSQLParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 878)) | (1 << (SelectSQLParser.WEEKDAY - 878)) | (1 << (SelectSQLParser.WEEKOFYEAR - 878)) | (1 << (SelectSQLParser.WEIGHT_STRING - 878)) | (1 << (SelectSQLParser.WITHIN - 878)) | (1 << (SelectSQLParser.YEARWEEK - 878)) | (1 << (SelectSQLParser.Y_FUNCTION - 878)) | (1 << (SelectSQLParser.X_FUNCTION - 878)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[72] = self.expression_sempred
        self._predicates[73] = self.predicate_sempred
        self._predicates[74] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         




